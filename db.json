{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/0bb88e26323e5177a53878775cc60b9d.png","path":"images/0bb88e26323e5177a53878775cc60b9d.png","modified":0,"renderable":0},{"_id":"source/images/151BC80037EF896D625DE917E38F4A93.jpg","path":"images/151BC80037EF896D625DE917E38F4A93.jpg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png","path":"images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png","modified":0,"renderable":0},{"_id":"source/images/b50c5aaf3e2c3ed994e58a455bb76f45.png","path":"images/b50c5aaf3e2c3ed994e58a455bb76f45.png","modified":0,"renderable":0},{"_id":"source/images/58ea25b757562d146a426d9133118a80.png","path":"images/58ea25b757562d146a426d9133118a80.png","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg","modified":0,"renderable":0},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg","path":"images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg","modified":0,"renderable":0},{"_id":"source/images/C6F003CB6AF935154F7AC9F21018273B.jpg","path":"images/C6F003CB6AF935154F7AC9F21018273B.jpg","modified":0,"renderable":0},{"_id":"source/images/QQ20170113-141819@2x.png","path":"images/QQ20170113-141819@2x.png","modified":0,"renderable":0},{"_id":"source/images/images1.png","path":"images/images1.png","modified":0,"renderable":0},{"_id":"source/images/QQ20170113-114118@2x.png","path":"images/QQ20170113-114118@2x.png","modified":0,"renderable":0},{"_id":"source/images/QQ20170113-114306@2x.png","path":"images/QQ20170113-114306@2x.png","modified":0,"renderable":0},{"_id":"source/images/QQ20170113-114530@2x.png","path":"images/QQ20170113-114530@2x.png","modified":0,"renderable":0},{"_id":"source/images/images2.png","path":"images/images2.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/images3.png","path":"images/images3.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/Untitled.gif","path":"images/Untitled.gif","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1480757679000},{"_id":"source/.DS_Store","hash":"c2c7a959c8e5684dc8212e1d4192ae15a2fbc4aa","modified":1484369426000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1480757679000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1480757679000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1480757679000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1480757679000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1480757679000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1480757679000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1480757679000},{"_id":"themes/next/_config.yml","hash":"e23793c70be1d6a9a05c58e7f0aa89a159e8026f","modified":1480757962000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1480757679000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1480757679000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1480757679000},{"_id":"source/_posts/3种-web-会话管理的方式.md","hash":"0b6c7a7d5dd5807c156e3d027fc62b5f2b9e3ae1","modified":1480762294000},{"_id":"source/_posts/2017-yunle项目开发目标.md","hash":"cafa5401a42824d7528cfa1b6fd18420486c399a","modified":1484300419000},{"_id":"source/_posts/Mac-OSX-VirtualBox-Vagrant-CentOS7.md","hash":"da22195ad1ebe469fd096db06051c798a12d885f","modified":1482555441000},{"_id":"source/_posts/H5项目常见问题汇总及解决方案.md","hash":"cf80ef95b8a18bb0ea8711eed260c58f2cf97f6c","modified":1490666745000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1480324668000},{"_id":"source/_posts/前后端分离架构一.md","hash":"b16187363678dfd2b06a2bef14d2f1ae1c77754a","modified":1484128417000},{"_id":"source/_posts/一种为前端提供服务的后端模式-BFF.md","hash":"0184eb5d91d33adeb23bfb272c71f0c9cfe1e8fe","modified":1482116784000},{"_id":"source/_posts/Web-研发模式演变.md","hash":"f6028ecc1e278099fe0c06ed2d60d86b4197a916","modified":1482290019000},{"_id":"source/_posts/前端开发流程.md","hash":"e6b078ff34709e8c3ea892b4000825f17da9a580","modified":1486363699000},{"_id":"source/_posts/我们为什么要尝试前后端分离.md","hash":"9b073f0372b9ec72ac8d0f6cbc7a45045bd727bc","modified":1480761209000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484213360000},{"_id":"source/_posts/微服务架构-开源API网关Kong的部署与使用.md","hash":"577024fb3df90e6a4bf43ec3a65d79dc29dc3347","modified":1481942296000},{"_id":"source/images/0bb88e26323e5177a53878775cc60b9d.png","hash":"849e339764c6f4c977e66d1c5122a446ff030b51","modified":1480762116000},{"_id":"source/images/151BC80037EF896D625DE917E38F4A93.jpg","hash":"131a3641f63527228738cf890f9b0cb9a5442ec3","modified":1484299948000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg","hash":"b986e37cac8c88159570c5b4787c7d1507d144be","modified":1482289608000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg","hash":"53b1abd2151e4882ed7b2395be7c3c9479b04be6","modified":1482289783000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg","hash":"e3bab96d3b04467da3adfdd4459db5474847771a","modified":1482289589000},{"_id":"source/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png","hash":"4255c1b8f1b2c6ffc2975f0c5a3a25c75eaaa00b","modified":1480761992000},{"_id":"source/images/b50c5aaf3e2c3ed994e58a455bb76f45.png","hash":"d2264af433c93eae9671e56ce6e94738801242b2","modified":1480762146000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1480757679000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1480757634000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1480757679000},{"_id":"themes/next/.git/packed-refs","hash":"80908fda4226cdf164a41c85c7fbea49cb816125","modified":1480757679000},{"_id":"themes/next/.git/index","hash":"0b7303665bf1c1bae1a5ee7ac71271b025fe1980","modified":1480758112000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1480757679000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1480757679000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1480757679000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1480757679000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1480757679000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1480757679000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1480757679000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1480757679000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1480757679000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1480757679000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1480757679000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1480757679000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1480757679000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1480757679000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1480757679000},{"_id":"themes/next/layout/_layout.swig","hash":"d8dddf361d283d60934e81d996b24f42c42b61b4","modified":1502456426000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1480757679000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1480757679000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1480757679000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1480757679000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1480757679000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1480757679000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1480757679000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1480757679000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1480757679000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1480757679000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1480757679000},{"_id":"source/images/58ea25b757562d146a426d9133118a80.png","hash":"05652ef6386da009fadb5255e898742d7738d396","modified":1480762156000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg","hash":"9987763481dc030c04a92f34b150512299de5613","modified":1482289758000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png","hash":"48be0739435c912edf70f3ad618f01067263e25f","modified":1482289806000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg","hash":"12f0054ee10440a0675f4bfba089549f02611042","modified":1482289731000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg","hash":"48bfdf9544b81ee9bcc3ddc7068bf5f57a87f12d","modified":1482289705000},{"_id":"source/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg","hash":"cf2559df0179ff4d1ff03dc4def9a8c4ffa7d54e","modified":1482289463000},{"_id":"source/images/C6F003CB6AF935154F7AC9F21018273B.jpg","hash":"5404d8192b1b8fce4e55b7c87a225015d9f3e599","modified":1482116502000},{"_id":"source/images/QQ20170113-141819@2x.png","hash":"376d0adc2b65a543022df3fd16075370b445e9f6","modified":1484288304000},{"_id":"source/images/images1.png","hash":"4006cecf54cc8693481c62a0d35aa899628d4a12","modified":1484109059000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"source/images/QQ20170113-114118@2x.png","hash":"2cc74f42471bea368fcb77dcf7deedb8a886971e","modified":1484279031000},{"_id":"source/images/QQ20170113-114306@2x.png","hash":"a248aa8ca4ada5d992e9b70b5cb8774d31f84fed","modified":1484279031000},{"_id":"source/images/QQ20170113-114530@2x.png","hash":"100cafb106b1b2d7105fa8538fdaabadad8b0970","modified":1484279137000},{"_id":"source/images/images2.png","hash":"0c96ac5640ac1959d0981a0300518acceb76abfa","modified":1480438704000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1480757634000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1480757634000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1480757634000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1480757634000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1480757634000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1480757634000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1480757634000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1480757634000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1480757634000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1480757634000},{"_id":"themes/next/.git/logs/HEAD","hash":"90f317984ecef05b7ba29fff4d5f92721fe6fd71","modified":1480757679000},{"_id":"themes/next/layout/_custom/header.swig","hash":"2ad77afc23889450bd69b8cf13b4a37be5008364","modified":1502456956000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480757679000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1480757679000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1480757679000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1480757679000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1480757679000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1480757679000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1480757679000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1480757679000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1480757679000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1480757679000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1480757679000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1480757679000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1480757679000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480757679000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1480757679000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1480757679000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1480757679000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1480757679000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1480757679000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1480757679000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1480757679000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1480757679000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480757679000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480757679000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1480757679000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1480757679000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480757679000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480757679000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480757679000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480757679000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480757679000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480757679000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480757679000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480757679000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480757679000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480757679000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480757679000},{"_id":"source/images/images3.png","hash":"2338bb051bf79beedbeb44cc8aeb815eb60b315e","modified":1480438735000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480757679000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1480757679000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1480757679000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1480757679000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1480757679000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1480757679000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1480757679000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1480757679000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1480757679000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1480757679000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1480757679000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1480757679000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1480757679000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1480757679000},{"_id":"themes/next/.git/refs/heads/master","hash":"93d0f27eb58dcc033accd3711a6d88c269c8e1e8","modified":1480757679000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1480757679000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1480757679000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1480757679000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1480757679000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1480757679000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1480757679000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480757679000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480757679000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480757679000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480757679000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480757679000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480757679000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480757679000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480757679000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480757679000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480757679000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480757679000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480757679000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"90f317984ecef05b7ba29fff4d5f92721fe6fd71","modified":1480757679000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1480757679000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1480757679000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480757679000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1480757679000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1480757679000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1480757679000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1480757679000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1480757679000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480757679000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480757679000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480757679000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480757679000},{"_id":"themes/next/.git/objects/pack/pack-2beef8093c52583b95a9e8b3c6565c4a4b99a024.idx","hash":"18f99930748195202f356b888450ef110b1a6dbb","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480757679000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480757679000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"90f317984ecef05b7ba29fff4d5f92721fe6fd71","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1480757679000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480757679000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480757679000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480757679000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480757679000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480757679000},{"_id":"source/images/Untitled.gif","hash":"cb808c5b99b66c6e198898d06de303d136fde8f1","modified":1484281211000},{"_id":"themes/next/.git/objects/pack/pack-2beef8093c52583b95a9e8b3c6565c4a4b99a024.pack","hash":"1406aa53b4b2c76a365056279cf4090c86170940","modified":1480757679000},{"_id":"public/2017/01/13/2017-yunle项目开发目标/index.html","hash":"719614d0ebd42a12e048dfd7dcf8e5fe806898b6","modified":1502790303022},{"_id":"public/archives/page/2/index.html","hash":"84bde4c30d5d359ca4c232b0f1e5783e26773dd1","modified":1502790303024},{"_id":"public/archives/2016/index.html","hash":"7c3464bb928249fec81de6cceaa55eb33dbcf6b7","modified":1502790303024},{"_id":"public/archives/2016/11/index.html","hash":"5b420a27b8384df7a202ed42613271501aabe863","modified":1502790303024},{"_id":"public/archives/2016/12/index.html","hash":"fa0ddb71a2a541b99f4de12bfa829026f9245f41","modified":1502790303024},{"_id":"public/archives/2017/index.html","hash":"6f01ec12e15bdf46984be72c2c9d8c5540ad45d4","modified":1502790303024},{"_id":"public/archives/2017/01/index.html","hash":"0e2f44ad863bac6d810fe45a484e75ecb81715ee","modified":1502790303024},{"_id":"public/archives/2017/03/index.html","hash":"c3b6f92ceb68253e24fb5a1564fe75fbf74c9c20","modified":1502790303024},{"_id":"public/page/2/index.html","hash":"a8fb5236804db5fde0866d27fa132be108130c5c","modified":1502790303024},{"_id":"public/tags/server/index.html","hash":"8ac79f12fe7d41d420897bd6456306225f98d054","modified":1502790303024},{"_id":"public/tags/VirtualBox/index.html","hash":"d36f937c6a3b09bea15cb0cf4b3c4e5d3e26ca6d","modified":1502790303024},{"_id":"public/tags/前后端分离/index.html","hash":"64886452b4d40c6e7a7fd0ae00c7f514651f263f","modified":1502790303024},{"_id":"public/tags/BFF/index.html","hash":"78ab3ee0df4639cb74d4b373a9416b329e7db8e6","modified":1502790303024},{"_id":"public/tags/kong-api/index.html","hash":"259c83f35244b6e99e60937b60e44150a65f130f","modified":1502790303024},{"_id":"public/2017/03/27/H5项目常见问题汇总及解决方案/index.html","hash":"ad4997840d49d0c066390861e9dd0f2948e5d133","modified":1502790303024},{"_id":"public/2017/01/11/前端开发流程/index.html","hash":"f5dc8adc44444547e03400bf779aea91f9e10dcf","modified":1502790303024},{"_id":"public/2016/12/24/Mac-OSX-VirtualBox-Vagrant-CentOS7/index.html","hash":"d8f2871bf8d2528f9aaabeff9853de0dbb8348a0","modified":1502790303023},{"_id":"public/2016/12/21/Web-研发模式演变/index.html","hash":"a6a5bb041709798f948491de401dc010ac06ced3","modified":1502790303025},{"_id":"public/2016/12/19/一种为前端提供服务的后端模式-BFF/index.html","hash":"4705bcb1fbc657eff2682948b592741a757a0c3e","modified":1502790303023},{"_id":"public/2016/12/17/微服务架构-开源API网关Kong的部署与使用/index.html","hash":"9d6b8c8fe02af50d26f2c63c14bdb9df2e962bc9","modified":1502790303025},{"_id":"public/2016/12/03/3种-web-会话管理的方式/index.html","hash":"819b456cf8d1931dc61bfb6ff1404f21abcf3a08","modified":1502790303025},{"_id":"public/2016/11/30/我们为什么要尝试前后端分离/index.html","hash":"425b0b58652c965d0c37a16b40dce30edf3b026a","modified":1502790303025},{"_id":"public/2016/11/30/前后端分离架构一/index.html","hash":"0a7296d715f6b2d4c6b811ef1547a44d4c928f7f","modified":1502790303023},{"_id":"public/2016/11/28/hello-world/index.html","hash":"1ed64b1d1cda00c58b2c02cc3a91bf7ef419203d","modified":1502790303023},{"_id":"public/archives/index.html","hash":"e30bdbfa29b051a2d0be3627c814718f1300a748","modified":1502790303023},{"_id":"public/index.html","hash":"91e392872bbae35b1d69bf6005cabba8cf34ccbc","modified":1502790303025},{"_id":"public/images/0bb88e26323e5177a53878775cc60b9d.png","hash":"849e339764c6f4c977e66d1c5122a446ff030b51","modified":1502790303045},{"_id":"public/images/151BC80037EF896D625DE917E38F4A93.jpg","hash":"131a3641f63527228738cf890f9b0cb9a5442ec3","modified":1502790303045},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg","hash":"b986e37cac8c88159570c5b4787c7d1507d144be","modified":1502790303046},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg","hash":"e3bab96d3b04467da3adfdd4459db5474847771a","modified":1502790303046},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg","hash":"53b1abd2151e4882ed7b2395be7c3c9479b04be6","modified":1502790303046},{"_id":"public/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png","hash":"4255c1b8f1b2c6ffc2975f0c5a3a25c75eaaa00b","modified":1502790303046},{"_id":"public/images/b50c5aaf3e2c3ed994e58a455bb76f45.png","hash":"d2264af433c93eae9671e56ce6e94738801242b2","modified":1502790303046},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502790303046},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502790303046},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502790303046},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1502790303046},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502790303046},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502790303046},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502790303046},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502790303046},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502790303046},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502790303047},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502790303046},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502790303047},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502790303047},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502790303047},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502790303047},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502790303047},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502790303047},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502790303047},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502790303047},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502790303047},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502790303047},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502790303047},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502790303047},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502790303047},{"_id":"public/images/58ea25b757562d146a426d9133118a80.png","hash":"05652ef6386da009fadb5255e898742d7738d396","modified":1502790303457},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg","hash":"9987763481dc030c04a92f34b150512299de5613","modified":1502790303571},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png","hash":"48be0739435c912edf70f3ad618f01067263e25f","modified":1502790303582},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg","hash":"12f0054ee10440a0675f4bfba089549f02611042","modified":1502790303582},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg","hash":"48bfdf9544b81ee9bcc3ddc7068bf5f57a87f12d","modified":1502790303582},{"_id":"public/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg","hash":"cf2559df0179ff4d1ff03dc4def9a8c4ffa7d54e","modified":1502790303582},{"_id":"public/images/C6F003CB6AF935154F7AC9F21018273B.jpg","hash":"5404d8192b1b8fce4e55b7c87a225015d9f3e599","modified":1502790303582},{"_id":"public/images/QQ20170113-141819@2x.png","hash":"376d0adc2b65a543022df3fd16075370b445e9f6","modified":1502790303583},{"_id":"public/images/images1.png","hash":"4006cecf54cc8693481c62a0d35aa899628d4a12","modified":1502790303583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1502790303583},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1502790303583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1502790303583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1502790303583},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1502790303602},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1502790303602},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502790303602},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502790303602},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502790303603},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1502790303604},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1502790303604},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1502790303604},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502790303604},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502790303604},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502790303604},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502790303604},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502790303604},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502790303604},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502790303604},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502790303605},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502790303605},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502790303605},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502790303605},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1502790303605},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502790303605},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502790303605},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502790303605},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502790303605},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502790303606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502790303606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502790303606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502790303606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502790303606},{"_id":"public/css/main.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502790303602},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502790303607},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502790303607},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502790303607},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502790303607},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502790303607},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502790303607},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1502790303607},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1502790303607},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502790303607},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502790303607},{"_id":"public/images/QQ20170113-114306@2x.png","hash":"a248aa8ca4ada5d992e9b70b5cb8774d31f84fed","modified":1502790303608},{"_id":"public/images/QQ20170113-114118@2x.png","hash":"2cc74f42471bea368fcb77dcf7deedb8a886971e","modified":1502790303608},{"_id":"public/images/images2.png","hash":"0c96ac5640ac1959d0981a0300518acceb76abfa","modified":1502790303609},{"_id":"public/images/QQ20170113-114530@2x.png","hash":"100cafb106b1b2d7105fa8538fdaabadad8b0970","modified":1502790303608},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1502790303609},{"_id":"public/images/images3.png","hash":"2338bb051bf79beedbeb44cc8aeb815eb60b315e","modified":1502790303620},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1502790303634},{"_id":"public/images/Untitled.gif","hash":"cb808c5b99b66c6e198898d06de303d136fde8f1","modified":1502790303685},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1480324668000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1480324668000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1480324668000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1480324668000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1480324668000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1480324668000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1480324668000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1480324668000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1480324668000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1480324668000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1480324668000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1480324668000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1480324668000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1480324668000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480324668000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480324668000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1480324668000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1480324668000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1480324668000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1480324668000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1480324668000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1480324668000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1480324668000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1480324668000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1480324668000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6aaa125f9bbb56ecfa0e89760451a691fd51489d","modified":1502774214000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"d9edf1fce99f148fd3a423593b7de46dc07e6ffc","modified":1502774192000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1480324668000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1480324668000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1480324668000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1480324668000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1480324668000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1480324668000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1480324668000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1480324668000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1480324668000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1480324668000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480324668000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480324668000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480324668000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1480324668000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1480324668000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1480324668000},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502790303047},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502790303047},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502790303047},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502790303047},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502790303047},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502790303047},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1502790303047},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1502790303047},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502790303048},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1502790303048},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1502790303583},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1502790303606},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1502790303606},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502790303606},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1502790303606},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502790303606},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1502790303606},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1502790303606},{"_id":"public/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1502790303607},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1502790303608},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1502790303608},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1502790303620},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1502790303620},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1487692586000},{"_id":"themes/material/.npmignore","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1492254140000},{"_id":"themes/material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1491294414000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1487692586000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1487692586000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1487244609000},{"_id":"themes/material/README.md","hash":"cc7b80f6bce7b910a7ba641abac1ade1311705f8","modified":1496316325000},{"_id":"themes/material/_config.template.yml","hash":"3e9eb8083c0188dbab50ce3ebccf9fb2a504d8fb","modified":1496316325000},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1487244609000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1491294414000},{"_id":"themes/material/package.json","hash":"4833c069161c6a6d503318561a5b9f7b94804432","modified":1502789554000},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1491294414000},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1491294414000},{"_id":"themes/material/languages/ar.yml","hash":"b8ffe10584fe49ed0218e57b27140b134e3022f8","modified":1493443791000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1493443791000},{"_id":"themes/material/languages/en.yml","hash":"2d538f5b71b2837b75bdcb686f1431a48dcb6eda","modified":1496316325000},{"_id":"themes/material/languages/es.yml","hash":"aaf23ea448489ec01f7c6228e3bf4833e062ec34","modified":1493443791000},{"_id":"themes/material/languages/fr.yml","hash":"66a966e8a9a60bfe00829b20c1f5e26cd6390f73","modified":1493443791000},{"_id":"themes/material/languages/ja.yml","hash":"af5466576ce9f6cac8529feb57ac8ba5401a318f","modified":1493443791000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1493443791000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1493443791000},{"_id":"themes/material/languages/zh-CN.yml","hash":"563671897a5d4d04ddc2f4b8a45e8f2c366a77b9","modified":1493443791000},{"_id":"themes/material/languages/zh-TW.yml","hash":"516b74e942f849e716098d111c7c3a9f4847cb0a","modified":1493443791000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1491715225000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1493443791000},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1493443791000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1493443791000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487244609000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493443791000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1491294414000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"9c6e728a736eaba7edbcaf6862e5dcef8edd2a9e","modified":1496316325000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"31095a56feaf04a710e8302ccb18e2d4d10b97ba","modified":1493443791000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"ae949e16cbd20d895ba3c0b64f3992bf28d81e06","modified":1493443791000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1491715225000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1487244609000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"1b1a18b49674d2e78672a69c6ced6ff35f1b63e9","modified":1496316325000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1493484084000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"9956cc20b84b67334dcc80a5d4396f9064d4a804","modified":1493562357000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"f564ba4b36363882154870558091383887fffdf8","modified":1493562357000},{"_id":"themes/material/layout/_partial/config_footer.ejs","hash":"bd520f4e8a381494c78e3c00905c80a9cd807f97","modified":1496316325000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1492709339000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"c17e2da7d6cb0e4104fc64a541f4c81f4abed095","modified":1493443791000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1493484084000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"75ecc32a258857424c48a2ebb0b5b9f3b30614a5","modified":1493443791000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1493443791000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"16a4bc65e631f5d21e7fd204f457adc86ea2af26","modified":1496316325000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"88c604ae4f70ccf24289bc967f18ada697013304","modified":1496316325000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1487244609000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1493443791000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1491294414000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"b6e5af993245a2e3caa6eb66009503ec52c82f5b","modified":1496316325000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1491294414000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1487244609000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1491294414000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"44aba38692abc609f28b55bff81362a1c03ce36c","modified":1496316325000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1493443901000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1491294414000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1491294414000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"f3ed6673a774cd5a27c94dfe174e8f7344f4ebbe","modified":1496316325000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"1c0773c3b2cf33aad0e0373540e11540e5137c75","modified":1496316325000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1493443791000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1493443791000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1487244609000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"843818bffeaebe5e3fa07c90d260bb912555cb3b","modified":1493443791000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"52fcfe5b70c25378e48bb67daf85d952b32d34b2","modified":1493541521000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"f03bc95a0c9b4905413b8fdfefc1af463b51e828","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1493443791000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"ab544bc337a48bdd30f9cb146db6a287bb36a10f","modified":1496316325000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1493443791000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1493443791000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"c52bbfe62863cd141925747b2575a6a6858444d1","modified":1493541521000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1493443791000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1493443791000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"c604f337d219bccf3f315e984cf12a6658dbd7a2","modified":1493541521000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1493443791000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1493443791000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1493443791000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1487244609000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1487244609000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496316325000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1491294414000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1487244609000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1493443791000},{"_id":"themes/material/source/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1496316325000},{"_id":"themes/material/source/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1496316325000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1487244609000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1487244609000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1487244609000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1491715210000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1487244609000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487244609000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487244609000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1491294414000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1490883710000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1491294414000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1491294414000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1487692586000},{"_id":"themes/material/source/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1493541521000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1493541521000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1487692586000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1491715225000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1493443791000},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1491715225000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1491294414000},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1491294414000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1487244609000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496316325000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496316325000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1487244609000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1491294414000},{"_id":"themes/material/source/js/js.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1493443791000},{"_id":"themes/material/source/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1493443791000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"c24af97754140f221d20323a3e5aac9dd02889d4","modified":1493484084000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"61a891acb13e71289f360c91cb27fb88f81848ec","modified":1493484084000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"8bff3b1bd066eef693319b82400c353b2d6736e7","modified":1493484084000},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1487692586000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496316325000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1487244609000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496316325000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496316325000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1491294414000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1487244609000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1487244609000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1487244609000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1491294414000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1491294414000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1491294414000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1491294414000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1491294414000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1491294414000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1491294414000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1491294414000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1491294414000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1491294414000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1491294414000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1491294414000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1491294414000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1487244609000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1487244609000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1487244609000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1491294414000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1491294414000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1491294414000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1491294414000},{"_id":"themes/material/layout/_widget/comment/163gentie/common.ejs","hash":"ac56d01746ef2f72d54bff4b61e0ca0089c5c164","modified":1496316325000},{"_id":"themes/material/layout/_widget/comment/163gentie/enter.ejs","hash":"6e057829fa926cc02e3e2ebfdee7c244a9b31dd7","modified":1496316325000},{"_id":"themes/material/layout/_widget/comment/163gentie/main.ejs","hash":"e84afb44929f4dab8cf279b958d472955bc5f034","modified":1496316325000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1496316325000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"fa89d225dafa4a6b0f6be6fe395ada0be172c4ae","modified":1493484084000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496316325000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1487244609000},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1502790303048},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1502790303048},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1502790303048},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1502790303048},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1502790303048},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1502790303048},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1502790303048},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1502790303048},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1502790303049},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1502790303049},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1502790303049},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1502790303049},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1502790303049},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1502790303049},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1502790303049},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1502790303049},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1502790303049},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1502790303049},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1502790303049},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1502790303049},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1502790303051},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1502790303051},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1502790303051},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1502790303051},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1502790303051},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1502790303051},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1502790303051},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1502790303051},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1502790303052},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1502790303052},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1502790303052},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1502790303052},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1502790303584},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502790303584},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502790303584},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1502790303584},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1502790303585},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1502790303585},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1502790303585},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1502790303585},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1502790303585},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1502790303585},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1502790303585},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1502790303585},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1502790303586},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1502790303586},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1502790303606},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1502790303606},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1502790303606},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1502790303606},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1502790303606},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1502790303606},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1502790303606},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1502790303606},{"_id":"public/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1502790303606},{"_id":"public/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1502790303607},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1502790303607},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1502790303607},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1502790303607},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1502790303607},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1502790303608},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502790303608},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1502790303608},{"_id":"public/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1502790303608},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1502790303608},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1502790303608},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1502790303608},{"_id":"public/js/js.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1502790303608},{"_id":"public/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1502790303608},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1502790303608},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1502790303608},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502790303609},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1502790303609},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502790303609},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502790303609},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502790303645},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1502790303652},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1502790303652},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1502790303653},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1502790303653},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1502790303654},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1502790303654}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"3种 web 会话管理的方式","date":"2016-12-03T10:40:30.000Z","_content":"\n[原文 流云诸葛](http://www.cnblogs.com/lyzg/p/6067766.html)\n\nhttp是无状态的，一次请求结束，连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。当然它知道是哪个客户端地址发过来的，但是对于我们的应用来说，我们是靠用户来管理，而不是靠客户端。所以对我们的应用而言，它是需要有状态管理的，以便服务端能够准确的知道http请求是哪个用户发起的，从而判断他是否有权限继续这个请求。这个过程就是常说的会话管理。它也可以简单理解为一个用户从登录到退出应用的一段期间。本文总结了3种常见的实现web应用会话管理的方式：\n\n1）基于server端session的管理方式\n\n2）cookie-base的管理方式\n\n3）token-base的管理方式\n\n这些内容可以帮助加深对web中用户登录机制的理解，对实际项目开发也有参考价值，欢迎阅读与指正。\n\n## 1. 基于server端session的管理\n\n在早期web应用中，通常使用服务端session来管理用户的会话。快速了解服务端session:\n\n1) 服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，可以用来存放数据。服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。\n\n2）服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。\n\n3）session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。\n\n4）session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往sesssion对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。\n\n以上过程可简单使用流程图描述如下：\n\n![](/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png)\n\n主流的web开发平台（java,.net,php）都原生支持这种会话管理的方式，而且开发起来很简单，相信大部分后端开发人员在入门的时候都了解并使用过它。它还有一个比较大的优点就是安全性好，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。但是在真正决定用它管理会话之前，也得根据自己的应用情况考虑以下几个问题：\n\n1）这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存；\n\n2）当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了；\n\n3）多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。\n\n针对问题1和问题2，我见过的解决方案是采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，由于服务端的session依赖cookie来传递sessionid，所以在实际项目中，只要解决各个项目里面如何实现sessionid的cookie跨域访问即可，这个是可以实现的，就是比较麻烦，前后端有可能都要做处理。\n\n如果不考虑以上三个问题，这种管理方式比较值得使用，尤其是一些小型的web应用。但是一旦应用将来有扩展的必要，那就得谨慎对待前面的三个问题。如果真要在项目中使用这种方式，推荐结合单点登录框架如CAS一起用，这样会使应用的扩展性更强。\n\n## 2. cookie-based的管理方式\n\n由于前一种方式会增加服务器的负担和架构的复杂性，所以后来就有人想出直接把用户的登录凭证直接存到客户端的方案，当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用它来实现会话管理的整体流程如下：\n\n1）用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。\n\n2）服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。\n\n3）用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。\n\n![](/images/0bb88e26323e5177a53878775cc60b9d.png)\n\n这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。\n\n这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：\n\n1）cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；\n\n2）每次传送cookie，增加了请求的数量，对访问性能也有影响；\n\n3）也有跨域问题，毕竟还是要用cookie。\n\n相比起第一种方式，cookie-based方案明显还是要好一些，目前好多web开发平台或框架都默认使用这种方式来做会话管理，比如php里面yii框架，这是我们团队后端目前用的，它用的就是这个方案，以上提到的那些登录逻辑，框架也都已经封装好了，实际用起来也很简单；asp.net里面forms身份认证，也是这个思路，这里有一篇好文章把它的实现细节都说的很清楚：\n\nhttp://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html\n\n前面两种会话管理方式因为都用到cookie，不适合用在native app里面：native app不好管理cookie，毕竟它不是浏览器。这两种方案都不适合用来做纯api服务的登录认证。要实现api服务的登录认证，就要考虑下面要介绍的第三种会话管理方式。\n\n## 3. token-based的管理方式\n\n这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：\n![](/images/b50c5aaf3e2c3ed994e58a455bb76f45.png)\n\n这种方式不通过cookie进行token的传递，而是每次请求的时候，主动把token加到http header里面或者url后面，所以即使在native app里面也能使用它来调用我们通过web发布的api接口。app里面还要做两件事情：\n\n1）有效存储token，得保证每次调接口的时候都能从同一个位置拿到同一个token；\n\n2）每次调接口的的代码里都得把token加到header或者接口地址里面。\n\n看起来麻烦，其实也不麻烦，这两件事情，对于app来说，很容易做到，只要对接口调用的模块稍加封装即可。\n\n这种方式同样适用于网页应用，token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。\n\n这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决，相关细节可去阅读前面给出的CORS文章详细了解。\n\n这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。\n\n## 4. 安全问题\n\n在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。\n\n首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个session id，所以只要这个session id足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的session id进行操作；第二种方式的凭证（ticket）以及第三种方式的凭证（token）都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。\n\n然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是我们从代码能做的防范，确实也就是这个层次了。\n\n最后的安全问题就是CSRF（[跨站请求伪造](http://www.ruanyifeng.com/blog/2016/04/cors.html)）。这个跟代码有很大关系，本质上它就是代码的漏洞，只不过一般情况下这些漏洞，作为开发人员都不容易发现，只有那些一门心思想搞些事情的人才会专门去找这些漏洞，所以这种问题的防范更多地还是依赖于开发人员对这种攻击方式的了解，包括常见的攻击形式和应对方法。不管凭证信息本身多么安全，别人利用CSRF，就能拿到别人的凭证，然后用它冒充别人进行非法操作，所以有时间还真得多去了解下它的相关资料才行。举例来说，假如我们把凭证直接放到url后面进行传递，就有可能成为一个CSRF的漏洞：当恶意用户在我们的应用内上传了1张引用了他自己网站的图片，当正常的用户登录之后访问的页面里面包含这个图片的时候，由于这个图片加载的时候会向恶意网站发送get请求；当恶意网站收到请求的时候，就会从这个请求的Reffer header里面看到包含这个图片的页面地址，而这个地址正好包含了正常用户的会话凭证；于是恶意用户就拿到了正常用户的凭证；只要这个凭证还没失效，他就能用它冒充用户进行非法操作。\n\n## . 总结\n\n前面这三种方式，各自有各自的优点及使用场景，我觉得没有哪个是最好的，做项目的时候，根据项目将来的扩展情况和架构情况，才能决定用哪个是最合适的。本文的目的也就是想介绍这几种方式的原理，以便掌握web应用中登录验证的关键因素。\n\n作为一个前端开发人员，本文虽然介绍了3种会话管理的方式，但是与前端关系最紧密的还是第三种方式，毕竟现在前端开发SPA应用以及hybrid应用已经非常流行了，所以掌握好这个方式的认证过程和使用方式，对前端来说，显然是很有帮助的。好在这个方式的技术其实早就有很多实现了，而且还有现成的标准可用，这个标准就是JWT(json-web-token)。\n\nJWT本身并没有做任何技术实现，它只是定义了token-based的管理方式该如何实现，它规定了token的应该包含的标准内容以及token的生成过程和方法。目前实现了这个标准的技术已经有非常多：\n![](/images/58ea25b757562d146a426d9133118a80.png)\n\n更多可参阅：[https://jwt.io/#libraries-io](https://jwt.io/#libraries-io)\n\n为了对第三种会话管理方式的实现有个更全面的认识，我选择用express和上面众多JWT实现中的jsonwebtoken来研究，相关内容我会在下一篇博客详细介绍。本文内容到此结束，谢谢阅读，欢迎关注下一篇博客的内容。\n","source":"_posts/3种-web-会话管理的方式.md","raw":"---\ntitle: 3种 web 会话管理的方式\ndate: 2016-12-03 18:40:30\ntags: server\n---\n\n[原文 流云诸葛](http://www.cnblogs.com/lyzg/p/6067766.html)\n\nhttp是无状态的，一次请求结束，连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。当然它知道是哪个客户端地址发过来的，但是对于我们的应用来说，我们是靠用户来管理，而不是靠客户端。所以对我们的应用而言，它是需要有状态管理的，以便服务端能够准确的知道http请求是哪个用户发起的，从而判断他是否有权限继续这个请求。这个过程就是常说的会话管理。它也可以简单理解为一个用户从登录到退出应用的一段期间。本文总结了3种常见的实现web应用会话管理的方式：\n\n1）基于server端session的管理方式\n\n2）cookie-base的管理方式\n\n3）token-base的管理方式\n\n这些内容可以帮助加深对web中用户登录机制的理解，对实际项目开发也有参考价值，欢迎阅读与指正。\n\n## 1. 基于server端session的管理\n\n在早期web应用中，通常使用服务端session来管理用户的会话。快速了解服务端session:\n\n1) 服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，可以用来存放数据。服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。\n\n2）服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。\n\n3）session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。\n\n4）session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往sesssion对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。\n\n以上过程可简单使用流程图描述如下：\n\n![](/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png)\n\n主流的web开发平台（java,.net,php）都原生支持这种会话管理的方式，而且开发起来很简单，相信大部分后端开发人员在入门的时候都了解并使用过它。它还有一个比较大的优点就是安全性好，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。但是在真正决定用它管理会话之前，也得根据自己的应用情况考虑以下几个问题：\n\n1）这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存；\n\n2）当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了；\n\n3）多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。\n\n针对问题1和问题2，我见过的解决方案是采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，由于服务端的session依赖cookie来传递sessionid，所以在实际项目中，只要解决各个项目里面如何实现sessionid的cookie跨域访问即可，这个是可以实现的，就是比较麻烦，前后端有可能都要做处理。\n\n如果不考虑以上三个问题，这种管理方式比较值得使用，尤其是一些小型的web应用。但是一旦应用将来有扩展的必要，那就得谨慎对待前面的三个问题。如果真要在项目中使用这种方式，推荐结合单点登录框架如CAS一起用，这样会使应用的扩展性更强。\n\n## 2. cookie-based的管理方式\n\n由于前一种方式会增加服务器的负担和架构的复杂性，所以后来就有人想出直接把用户的登录凭证直接存到客户端的方案，当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用它来实现会话管理的整体流程如下：\n\n1）用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。\n\n2）服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。\n\n3）用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。\n\n![](/images/0bb88e26323e5177a53878775cc60b9d.png)\n\n这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。\n\n这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：\n\n1）cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；\n\n2）每次传送cookie，增加了请求的数量，对访问性能也有影响；\n\n3）也有跨域问题，毕竟还是要用cookie。\n\n相比起第一种方式，cookie-based方案明显还是要好一些，目前好多web开发平台或框架都默认使用这种方式来做会话管理，比如php里面yii框架，这是我们团队后端目前用的，它用的就是这个方案，以上提到的那些登录逻辑，框架也都已经封装好了，实际用起来也很简单；asp.net里面forms身份认证，也是这个思路，这里有一篇好文章把它的实现细节都说的很清楚：\n\nhttp://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html\n\n前面两种会话管理方式因为都用到cookie，不适合用在native app里面：native app不好管理cookie，毕竟它不是浏览器。这两种方案都不适合用来做纯api服务的登录认证。要实现api服务的登录认证，就要考虑下面要介绍的第三种会话管理方式。\n\n## 3. token-based的管理方式\n\n这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：\n![](/images/b50c5aaf3e2c3ed994e58a455bb76f45.png)\n\n这种方式不通过cookie进行token的传递，而是每次请求的时候，主动把token加到http header里面或者url后面，所以即使在native app里面也能使用它来调用我们通过web发布的api接口。app里面还要做两件事情：\n\n1）有效存储token，得保证每次调接口的时候都能从同一个位置拿到同一个token；\n\n2）每次调接口的的代码里都得把token加到header或者接口地址里面。\n\n看起来麻烦，其实也不麻烦，这两件事情，对于app来说，很容易做到，只要对接口调用的模块稍加封装即可。\n\n这种方式同样适用于网页应用，token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。\n\n这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决，相关细节可去阅读前面给出的CORS文章详细了解。\n\n这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。\n\n## 4. 安全问题\n\n在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。\n\n首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个session id，所以只要这个session id足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的session id进行操作；第二种方式的凭证（ticket）以及第三种方式的凭证（token）都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。\n\n然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是我们从代码能做的防范，确实也就是这个层次了。\n\n最后的安全问题就是CSRF（[跨站请求伪造](http://www.ruanyifeng.com/blog/2016/04/cors.html)）。这个跟代码有很大关系，本质上它就是代码的漏洞，只不过一般情况下这些漏洞，作为开发人员都不容易发现，只有那些一门心思想搞些事情的人才会专门去找这些漏洞，所以这种问题的防范更多地还是依赖于开发人员对这种攻击方式的了解，包括常见的攻击形式和应对方法。不管凭证信息本身多么安全，别人利用CSRF，就能拿到别人的凭证，然后用它冒充别人进行非法操作，所以有时间还真得多去了解下它的相关资料才行。举例来说，假如我们把凭证直接放到url后面进行传递，就有可能成为一个CSRF的漏洞：当恶意用户在我们的应用内上传了1张引用了他自己网站的图片，当正常的用户登录之后访问的页面里面包含这个图片的时候，由于这个图片加载的时候会向恶意网站发送get请求；当恶意网站收到请求的时候，就会从这个请求的Reffer header里面看到包含这个图片的页面地址，而这个地址正好包含了正常用户的会话凭证；于是恶意用户就拿到了正常用户的凭证；只要这个凭证还没失效，他就能用它冒充用户进行非法操作。\n\n## . 总结\n\n前面这三种方式，各自有各自的优点及使用场景，我觉得没有哪个是最好的，做项目的时候，根据项目将来的扩展情况和架构情况，才能决定用哪个是最合适的。本文的目的也就是想介绍这几种方式的原理，以便掌握web应用中登录验证的关键因素。\n\n作为一个前端开发人员，本文虽然介绍了3种会话管理的方式，但是与前端关系最紧密的还是第三种方式，毕竟现在前端开发SPA应用以及hybrid应用已经非常流行了，所以掌握好这个方式的认证过程和使用方式，对前端来说，显然是很有帮助的。好在这个方式的技术其实早就有很多实现了，而且还有现成的标准可用，这个标准就是JWT(json-web-token)。\n\nJWT本身并没有做任何技术实现，它只是定义了token-based的管理方式该如何实现，它规定了token的应该包含的标准内容以及token的生成过程和方法。目前实现了这个标准的技术已经有非常多：\n![](/images/58ea25b757562d146a426d9133118a80.png)\n\n更多可参阅：[https://jwt.io/#libraries-io](https://jwt.io/#libraries-io)\n\n为了对第三种会话管理方式的实现有个更全面的认识，我选择用express和上面众多JWT实现中的jsonwebtoken来研究，相关内容我会在下一篇博客详细介绍。本文内容到此结束，谢谢阅读，欢迎关注下一篇博客的内容。\n","slug":"3种-web-会话管理的方式","published":1,"updated":"2016-12-03T10:51:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zo90000nxx37h5w9ep4","content":"<p><a href=\"http://www.cnblogs.com/lyzg/p/6067766.html\" target=\"_blank\" rel=\"external\">原文 流云诸葛</a></p>\n<p>http是无状态的，一次请求结束，连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。当然它知道是哪个客户端地址发过来的，但是对于我们的应用来说，我们是靠用户来管理，而不是靠客户端。所以对我们的应用而言，它是需要有状态管理的，以便服务端能够准确的知道http请求是哪个用户发起的，从而判断他是否有权限继续这个请求。这个过程就是常说的会话管理。它也可以简单理解为一个用户从登录到退出应用的一段期间。本文总结了3种常见的实现web应用会话管理的方式：</p>\n<p>1）基于server端session的管理方式</p>\n<p>2）cookie-base的管理方式</p>\n<p>3）token-base的管理方式</p>\n<p>这些内容可以帮助加深对web中用户登录机制的理解，对实际项目开发也有参考价值，欢迎阅读与指正。</p>\n<h2 id=\"1-基于server端session的管理\"><a href=\"#1-基于server端session的管理\" class=\"headerlink\" title=\"1. 基于server端session的管理\"></a>1. 基于server端session的管理</h2><p>在早期web应用中，通常使用服务端session来管理用户的会话。快速了解服务端session:</p>\n<p>1) 服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，可以用来存放数据。服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。</p>\n<p>2）服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。</p>\n<p>3）session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。</p>\n<p>4）session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往sesssion对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。</p>\n<p>以上过程可简单使用流程图描述如下：</p>\n<p><img src=\"/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png\" alt=\"\"></p>\n<p>主流的web开发平台（java,.net,php）都原生支持这种会话管理的方式，而且开发起来很简单，相信大部分后端开发人员在入门的时候都了解并使用过它。它还有一个比较大的优点就是安全性好，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。但是在真正决定用它管理会话之前，也得根据自己的应用情况考虑以下几个问题：</p>\n<p>1）这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存；</p>\n<p>2）当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了；</p>\n<p>3）多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。</p>\n<p>针对问题1和问题2，我见过的解决方案是采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，由于服务端的session依赖cookie来传递sessionid，所以在实际项目中，只要解决各个项目里面如何实现sessionid的cookie跨域访问即可，这个是可以实现的，就是比较麻烦，前后端有可能都要做处理。</p>\n<p>如果不考虑以上三个问题，这种管理方式比较值得使用，尤其是一些小型的web应用。但是一旦应用将来有扩展的必要，那就得谨慎对待前面的三个问题。如果真要在项目中使用这种方式，推荐结合单点登录框架如CAS一起用，这样会使应用的扩展性更强。</p>\n<h2 id=\"2-cookie-based的管理方式\"><a href=\"#2-cookie-based的管理方式\" class=\"headerlink\" title=\"2. cookie-based的管理方式\"></a>2. cookie-based的管理方式</h2><p>由于前一种方式会增加服务器的负担和架构的复杂性，所以后来就有人想出直接把用户的登录凭证直接存到客户端的方案，当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用它来实现会话管理的整体流程如下：</p>\n<p>1）用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。</p>\n<p>2）服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。</p>\n<p>3）用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。</p>\n<p><img src=\"/images/0bb88e26323e5177a53878775cc60b9d.png\" alt=\"\"></p>\n<p>这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。</p>\n<p>这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：</p>\n<p>1）cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；</p>\n<p>2）每次传送cookie，增加了请求的数量，对访问性能也有影响；</p>\n<p>3）也有跨域问题，毕竟还是要用cookie。</p>\n<p>相比起第一种方式，cookie-based方案明显还是要好一些，目前好多web开发平台或框架都默认使用这种方式来做会话管理，比如php里面yii框架，这是我们团队后端目前用的，它用的就是这个方案，以上提到的那些登录逻辑，框架也都已经封装好了，实际用起来也很简单；asp.net里面forms身份认证，也是这个思路，这里有一篇好文章把它的实现细节都说的很清楚：</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html</a></p>\n<p>前面两种会话管理方式因为都用到cookie，不适合用在native app里面：native app不好管理cookie，毕竟它不是浏览器。这两种方案都不适合用来做纯api服务的登录认证。要实现api服务的登录认证，就要考虑下面要介绍的第三种会话管理方式。</p>\n<h2 id=\"3-token-based的管理方式\"><a href=\"#3-token-based的管理方式\" class=\"headerlink\" title=\"3. token-based的管理方式\"></a>3. token-based的管理方式</h2><p>这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：<br><img src=\"/images/b50c5aaf3e2c3ed994e58a455bb76f45.png\" alt=\"\"></p>\n<p>这种方式不通过cookie进行token的传递，而是每次请求的时候，主动把token加到http header里面或者url后面，所以即使在native app里面也能使用它来调用我们通过web发布的api接口。app里面还要做两件事情：</p>\n<p>1）有效存储token，得保证每次调接口的时候都能从同一个位置拿到同一个token；</p>\n<p>2）每次调接口的的代码里都得把token加到header或者接口地址里面。</p>\n<p>看起来麻烦，其实也不麻烦，这两件事情，对于app来说，很容易做到，只要对接口调用的模块稍加封装即可。</p>\n<p>这种方式同样适用于网页应用，token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。</p>\n<p>这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决，相关细节可去阅读前面给出的CORS文章详细了解。</p>\n<p>这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。</p>\n<h2 id=\"4-安全问题\"><a href=\"#4-安全问题\" class=\"headerlink\" title=\"4. 安全问题\"></a>4. 安全问题</h2><p>在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。</p>\n<p>首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个session id，所以只要这个session id足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的session id进行操作；第二种方式的凭证（ticket）以及第三种方式的凭证（token）都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。</p>\n<p>然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是我们从代码能做的防范，确实也就是这个层次了。</p>\n<p>最后的安全问题就是CSRF（<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">跨站请求伪造</a>）。这个跟代码有很大关系，本质上它就是代码的漏洞，只不过一般情况下这些漏洞，作为开发人员都不容易发现，只有那些一门心思想搞些事情的人才会专门去找这些漏洞，所以这种问题的防范更多地还是依赖于开发人员对这种攻击方式的了解，包括常见的攻击形式和应对方法。不管凭证信息本身多么安全，别人利用CSRF，就能拿到别人的凭证，然后用它冒充别人进行非法操作，所以有时间还真得多去了解下它的相关资料才行。举例来说，假如我们把凭证直接放到url后面进行传递，就有可能成为一个CSRF的漏洞：当恶意用户在我们的应用内上传了1张引用了他自己网站的图片，当正常的用户登录之后访问的页面里面包含这个图片的时候，由于这个图片加载的时候会向恶意网站发送get请求；当恶意网站收到请求的时候，就会从这个请求的Reffer header里面看到包含这个图片的页面地址，而这个地址正好包含了正常用户的会话凭证；于是恶意用户就拿到了正常用户的凭证；只要这个凭证还没失效，他就能用它冒充用户进行非法操作。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\". 总结\"></a>. 总结</h2><p>前面这三种方式，各自有各自的优点及使用场景，我觉得没有哪个是最好的，做项目的时候，根据项目将来的扩展情况和架构情况，才能决定用哪个是最合适的。本文的目的也就是想介绍这几种方式的原理，以便掌握web应用中登录验证的关键因素。</p>\n<p>作为一个前端开发人员，本文虽然介绍了3种会话管理的方式，但是与前端关系最紧密的还是第三种方式，毕竟现在前端开发SPA应用以及hybrid应用已经非常流行了，所以掌握好这个方式的认证过程和使用方式，对前端来说，显然是很有帮助的。好在这个方式的技术其实早就有很多实现了，而且还有现成的标准可用，这个标准就是JWT(json-web-token)。</p>\n<p>JWT本身并没有做任何技术实现，它只是定义了token-based的管理方式该如何实现，它规定了token的应该包含的标准内容以及token的生成过程和方法。目前实现了这个标准的技术已经有非常多：<br><img src=\"/images/58ea25b757562d146a426d9133118a80.png\" alt=\"\"></p>\n<p>更多可参阅：<a href=\"https://jwt.io/#libraries-io\" target=\"_blank\" rel=\"external\">https://jwt.io/#libraries-io</a></p>\n<p>为了对第三种会话管理方式的实现有个更全面的认识，我选择用express和上面众多JWT实现中的jsonwebtoken来研究，相关内容我会在下一篇博客详细介绍。本文内容到此结束，谢谢阅读，欢迎关注下一篇博客的内容。</p>\n","excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/lyzg/p/6067766.html\">原文 流云诸葛</a></p>\n<p>http是无状态的，一次请求结束，连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。当然它知道是哪个客户端地址发过来的，但是对于我们的应用来说，我们是靠用户来管理，而不是靠客户端。所以对我们的应用而言，它是需要有状态管理的，以便服务端能够准确的知道http请求是哪个用户发起的，从而判断他是否有权限继续这个请求。这个过程就是常说的会话管理。它也可以简单理解为一个用户从登录到退出应用的一段期间。本文总结了3种常见的实现web应用会话管理的方式：</p>\n<p>1）基于server端session的管理方式</p>\n<p>2）cookie-base的管理方式</p>\n<p>3）token-base的管理方式</p>\n<p>这些内容可以帮助加深对web中用户登录机制的理解，对实际项目开发也有参考价值，欢迎阅读与指正。</p>\n<h2 id=\"1-基于server端session的管理\"><a href=\"#1-基于server端session的管理\" class=\"headerlink\" title=\"1. 基于server端session的管理\"></a>1. 基于server端session的管理</h2><p>在早期web应用中，通常使用服务端session来管理用户的会话。快速了解服务端session:</p>\n<p>1) 服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，可以用来存放数据。服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。</p>\n<p>2）服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。</p>\n<p>3）session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。</p>\n<p>4）session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往sesssion对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。</p>\n<p>以上过程可简单使用流程图描述如下：</p>\n<p><img src=\"/images/a10951ed6bdebc20e1c0d6f4f7ea20e2.png\" alt=\"\"></p>\n<p>主流的web开发平台（java,.net,php）都原生支持这种会话管理的方式，而且开发起来很简单，相信大部分后端开发人员在入门的时候都了解并使用过它。它还有一个比较大的优点就是安全性好，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。但是在真正决定用它管理会话之前，也得根据自己的应用情况考虑以下几个问题：</p>\n<p>1）这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存；</p>\n<p>2）当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了；</p>\n<p>3）多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。</p>\n<p>针对问题1和问题2，我见过的解决方案是采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，由于服务端的session依赖cookie来传递sessionid，所以在实际项目中，只要解决各个项目里面如何实现sessionid的cookie跨域访问即可，这个是可以实现的，就是比较麻烦，前后端有可能都要做处理。</p>\n<p>如果不考虑以上三个问题，这种管理方式比较值得使用，尤其是一些小型的web应用。但是一旦应用将来有扩展的必要，那就得谨慎对待前面的三个问题。如果真要在项目中使用这种方式，推荐结合单点登录框架如CAS一起用，这样会使应用的扩展性更强。</p>\n<h2 id=\"2-cookie-based的管理方式\"><a href=\"#2-cookie-based的管理方式\" class=\"headerlink\" title=\"2. cookie-based的管理方式\"></a>2. cookie-based的管理方式</h2><p>由于前一种方式会增加服务器的负担和架构的复杂性，所以后来就有人想出直接把用户的登录凭证直接存到客户端的方案，当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用它来实现会话管理的整体流程如下：</p>\n<p>1）用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。</p>\n<p>2）服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。</p>\n<p>3）用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。</p>\n<p><img src=\"/images/0bb88e26323e5177a53878775cc60b9d.png\" alt=\"\"></p>\n<p>这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。</p>\n<p>这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：</p>\n<p>1）cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；</p>\n<p>2）每次传送cookie，增加了请求的数量，对访问性能也有影响；</p>\n<p>3）也有跨域问题，毕竟还是要用cookie。</p>\n<p>相比起第一种方式，cookie-based方案明显还是要好一些，目前好多web开发平台或框架都默认使用这种方式来做会话管理，比如php里面yii框架，这是我们团队后端目前用的，它用的就是这个方案，以上提到的那些登录逻辑，框架也都已经封装好了，实际用起来也很简单；asp.net里面forms身份认证，也是这个思路，这里有一篇好文章把它的实现细节都说的很清楚：</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html\">http://www.cnblogs.com/fish-li/archive/2012/04/15/2450571.html</a></p>\n<p>前面两种会话管理方式因为都用到cookie，不适合用在native app里面：native app不好管理cookie，毕竟它不是浏览器。这两种方案都不适合用来做纯api服务的登录认证。要实现api服务的登录认证，就要考虑下面要介绍的第三种会话管理方式。</p>\n<h2 id=\"3-token-based的管理方式\"><a href=\"#3-token-based的管理方式\" class=\"headerlink\" title=\"3. token-based的管理方式\"></a>3. token-based的管理方式</h2><p>这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：<br><img src=\"/images/b50c5aaf3e2c3ed994e58a455bb76f45.png\" alt=\"\"></p>\n<p>这种方式不通过cookie进行token的传递，而是每次请求的时候，主动把token加到http header里面或者url后面，所以即使在native app里面也能使用它来调用我们通过web发布的api接口。app里面还要做两件事情：</p>\n<p>1）有效存储token，得保证每次调接口的时候都能从同一个位置拿到同一个token；</p>\n<p>2）每次调接口的的代码里都得把token加到header或者接口地址里面。</p>\n<p>看起来麻烦，其实也不麻烦，这两件事情，对于app来说，很容易做到，只要对接口调用的模块稍加封装即可。</p>\n<p>这种方式同样适用于网页应用，token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。</p>\n<p>这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决，相关细节可去阅读前面给出的CORS文章详细了解。</p>\n<p>这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。</p>\n<h2 id=\"4-安全问题\"><a href=\"#4-安全问题\" class=\"headerlink\" title=\"4. 安全问题\"></a>4. 安全问题</h2><p>在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。</p>\n<p>首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个session id，所以只要这个session id足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的session id进行操作；第二种方式的凭证（ticket）以及第三种方式的凭证（token）都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。</p>\n<p>然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是我们从代码能做的防范，确实也就是这个层次了。</p>\n<p>最后的安全问题就是CSRF（<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">跨站请求伪造</a>）。这个跟代码有很大关系，本质上它就是代码的漏洞，只不过一般情况下这些漏洞，作为开发人员都不容易发现，只有那些一门心思想搞些事情的人才会专门去找这些漏洞，所以这种问题的防范更多地还是依赖于开发人员对这种攻击方式的了解，包括常见的攻击形式和应对方法。不管凭证信息本身多么安全，别人利用CSRF，就能拿到别人的凭证，然后用它冒充别人进行非法操作，所以有时间还真得多去了解下它的相关资料才行。举例来说，假如我们把凭证直接放到url后面进行传递，就有可能成为一个CSRF的漏洞：当恶意用户在我们的应用内上传了1张引用了他自己网站的图片，当正常的用户登录之后访问的页面里面包含这个图片的时候，由于这个图片加载的时候会向恶意网站发送get请求；当恶意网站收到请求的时候，就会从这个请求的Reffer header里面看到包含这个图片的页面地址，而这个地址正好包含了正常用户的会话凭证；于是恶意用户就拿到了正常用户的凭证；只要这个凭证还没失效，他就能用它冒充用户进行非法操作。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\". 总结\"></a>. 总结</h2><p>前面这三种方式，各自有各自的优点及使用场景，我觉得没有哪个是最好的，做项目的时候，根据项目将来的扩展情况和架构情况，才能决定用哪个是最合适的。本文的目的也就是想介绍这几种方式的原理，以便掌握web应用中登录验证的关键因素。</p>\n<p>作为一个前端开发人员，本文虽然介绍了3种会话管理的方式，但是与前端关系最紧密的还是第三种方式，毕竟现在前端开发SPA应用以及hybrid应用已经非常流行了，所以掌握好这个方式的认证过程和使用方式，对前端来说，显然是很有帮助的。好在这个方式的技术其实早就有很多实现了，而且还有现成的标准可用，这个标准就是JWT(json-web-token)。</p>\n<p>JWT本身并没有做任何技术实现，它只是定义了token-based的管理方式该如何实现，它规定了token的应该包含的标准内容以及token的生成过程和方法。目前实现了这个标准的技术已经有非常多：<br><img src=\"/images/58ea25b757562d146a426d9133118a80.png\" alt=\"\"></p>\n<p>更多可参阅：<a href=\"https://jwt.io/#libraries-io\">https://jwt.io/#libraries-io</a></p>\n<p>为了对第三种会话管理方式的实现有个更全面的认识，我选择用express和上面众多JWT实现中的jsonwebtoken来研究，相关内容我会在下一篇博客详细介绍。本文内容到此结束，谢谢阅读，欢迎关注下一篇博客的内容。</p>\n"},{"title":"Mac OSX+VirtualBox+Vagrant+CentOS7","date":"2016-12-24T04:33:06.000Z","_content":"> 本来想在我阿里服务器上搭建自己的一套微服务架构，可惜我是一个穷人，\n> 现只有用OSX+VirtualBox+Vagrant+CentOS7在本地先实现自己的一套本地服务\n\n## 1.安装VirtualBox\n  [VirtualBox下载地址](https://www.virtualbox.org/wiki/Downloads) 根据自己机器系统选择下载包\n\n## 2.安装Vagrant\n  1) [Vagrant](https://www.vagrantup.com/downloads.html)下载地址 选择下载包\n\n  安装完成后，在终端输入\n  ```\n  vagrant -v\n  ```\n  2）下载Vagrant官方封装好的[系统镜像](http://www.vagrantbox.es/)\n    因为我在阿里云上主要用的是Centos7，这边我使用centos7.box\n\n  3) 添加下载好的box系统镜像到Vagrant\n  ```\n  vagrant box add centos7 /path/centos7.box\n  ```\n  centos7 名称可能自己设置\n\n## 3.配置开发环境\n  1）创建开发目录\n  ```\n  cd ~                    # 切换目录\n\n  mkdir test_vagrant      # 创建文件夹\n\n  cd test                 # 切换目录\n  ```\n  2）初始化开发环境\n  在终端中输入  \n  ```\n  vagrant init centos7         #初始化\n  ```\n  3）启动开发环境\n  在终端中输入\n  ```\n  vagrant up        # 启动环境\n  ```\n","source":"_posts/Mac-OSX-VirtualBox-Vagrant-CentOS7.md","raw":"---\ntitle: Mac OSX+VirtualBox+Vagrant+CentOS7\ndate: 2016-12-24 12:33:06\ntags: VirtualBox\n---\n> 本来想在我阿里服务器上搭建自己的一套微服务架构，可惜我是一个穷人，\n> 现只有用OSX+VirtualBox+Vagrant+CentOS7在本地先实现自己的一套本地服务\n\n## 1.安装VirtualBox\n  [VirtualBox下载地址](https://www.virtualbox.org/wiki/Downloads) 根据自己机器系统选择下载包\n\n## 2.安装Vagrant\n  1) [Vagrant](https://www.vagrantup.com/downloads.html)下载地址 选择下载包\n\n  安装完成后，在终端输入\n  ```\n  vagrant -v\n  ```\n  2）下载Vagrant官方封装好的[系统镜像](http://www.vagrantbox.es/)\n    因为我在阿里云上主要用的是Centos7，这边我使用centos7.box\n\n  3) 添加下载好的box系统镜像到Vagrant\n  ```\n  vagrant box add centos7 /path/centos7.box\n  ```\n  centos7 名称可能自己设置\n\n## 3.配置开发环境\n  1）创建开发目录\n  ```\n  cd ~                    # 切换目录\n\n  mkdir test_vagrant      # 创建文件夹\n\n  cd test                 # 切换目录\n  ```\n  2）初始化开发环境\n  在终端中输入  \n  ```\n  vagrant init centos7         #初始化\n  ```\n  3）启动开发环境\n  在终端中输入\n  ```\n  vagrant up        # 启动环境\n  ```\n","slug":"Mac-OSX-VirtualBox-Vagrant-CentOS7","published":1,"updated":"2016-12-24T04:57:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zoh0001nxx3bvfneoss","content":"<blockquote>\n<p>本来想在我阿里服务器上搭建自己的一套微服务架构，可惜我是一个穷人，<br>现只有用OSX+VirtualBox+Vagrant+CentOS7在本地先实现自己的一套本地服务</p>\n</blockquote>\n<h2 id=\"1-安装VirtualBox\"><a href=\"#1-安装VirtualBox\" class=\"headerlink\" title=\"1.安装VirtualBox\"></a>1.安装VirtualBox</h2><p>  <a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">VirtualBox下载地址</a> 根据自己机器系统选择下载包</p>\n<h2 id=\"2-安装Vagrant\"><a href=\"#2-安装Vagrant\" class=\"headerlink\" title=\"2.安装Vagrant\"></a>2.安装Vagrant</h2><p>  1) <a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"external\">Vagrant</a>下载地址 选择下载包</p>\n<p>  安装完成后，在终端输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant -v</div></pre></td></tr></table></figure></p>\n<p>  2）下载Vagrant官方封装好的<a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">系统镜像</a><br>    因为我在阿里云上主要用的是Centos7，这边我使用centos7.box</p>\n<p>  3) 添加下载好的box系统镜像到Vagrant<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant box add centos7 /path/centos7.box</div></pre></td></tr></table></figure></p>\n<p>  centos7 名称可能自己设置</p>\n<h2 id=\"3-配置开发环境\"><a href=\"#3-配置开发环境\" class=\"headerlink\" title=\"3.配置开发环境\"></a>3.配置开发环境</h2><p>  1）创建开发目录<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~                    # 切换目录</div><div class=\"line\"></div><div class=\"line\">mkdir test_vagrant      # 创建文件夹</div><div class=\"line\"></div><div class=\"line\">cd test                 # 切换目录</div></pre></td></tr></table></figure></p>\n<p>  2）初始化开发环境<br>  在终端中输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant init centos7         #初始化</div></pre></td></tr></table></figure></p>\n<p>  3）启动开发环境<br>  在终端中输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up        # 启动环境</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>本来想在我阿里服务器上搭建自己的一套微服务架构，可惜我是一个穷人，<br>现只有用OSX+VirtualBox+Vagrant+CentOS7在本地先实现自己的一套本地服务</p>\n</blockquote>\n<h2 id=\"1-安装VirtualBox\"><a href=\"#1-安装VirtualBox\" class=\"headerlink\" title=\"1.安装VirtualBox\"></a>1.安装VirtualBox</h2><p>  <a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox下载地址</a> 根据自己机器系统选择下载包</p>\n<h2 id=\"2-安装Vagrant\"><a href=\"#2-安装Vagrant\" class=\"headerlink\" title=\"2.安装Vagrant\"></a>2.安装Vagrant</h2><p>  1) <a href=\"https://www.vagrantup.com/downloads.html\">Vagrant</a>下载地址 选择下载包</p>\n<p>  安装完成后，在终端输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant -v</div></pre></td></tr></table></figure></p>\n<p>  2）下载Vagrant官方封装好的<a href=\"http://www.vagrantbox.es/\">系统镜像</a><br>    因为我在阿里云上主要用的是Centos7，这边我使用centos7.box</p>\n<p>  3) 添加下载好的box系统镜像到Vagrant<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant box add centos7 /path/centos7.box</div></pre></td></tr></table></figure></p>\n<p>  centos7 名称可能自己设置</p>\n<h2 id=\"3-配置开发环境\"><a href=\"#3-配置开发环境\" class=\"headerlink\" title=\"3.配置开发环境\"></a>3.配置开发环境</h2><p>  1）创建开发目录<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~                    # 切换目录</div><div class=\"line\"></div><div class=\"line\">mkdir test_vagrant      # 创建文件夹</div><div class=\"line\"></div><div class=\"line\">cd test                 # 切换目录</div></pre></td></tr></table></figure></p>\n<p>  2）初始化开发环境<br>  在终端中输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant init centos7         #初始化</div></pre></td></tr></table></figure></p>\n<p>  3）启动开发环境<br>  在终端中输入<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up        # 启动环境</div></pre></td></tr></table></figure></p>\n"},{"title":"2017 yunle项目开发目标","date":"2017-01-13T09:30:43.000Z","_content":"# 大前端半栈技术开发\n> 2017年我准完成自己的半栈技术栈，前后端分离之半栈开发\n> 我的前后端分离架构请参考[前后端分离架构一](/2016/11/30/前后端分离架构一/)\n> 我的前端开发流程请参考[前端开发流程](/2017/01/11/前端开发流程/)\n\n![](/images/151BC80037EF896D625DE917E38F4A93.jpg)\n","source":"_posts/2017-yunle项目开发目标.md","raw":"---\ntitle: 2017 yunle项目开发目标\ndate: 2017-01-13 17:30:43\ntags:\n---\n# 大前端半栈技术开发\n> 2017年我准完成自己的半栈技术栈，前后端分离之半栈开发\n> 我的前后端分离架构请参考[前后端分离架构一](/2016/11/30/前后端分离架构一/)\n> 我的前端开发流程请参考[前端开发流程](/2017/01/11/前端开发流程/)\n\n![](/images/151BC80037EF896D625DE917E38F4A93.jpg)\n","slug":"2017-yunle项目开发目标","published":1,"updated":"2017-01-13T09:40:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zon0003nxx3gynz4dw5","content":"<h1 id=\"大前端半栈技术开发\"><a href=\"#大前端半栈技术开发\" class=\"headerlink\" title=\"大前端半栈技术开发\"></a>大前端半栈技术开发</h1><blockquote>\n<p>2017年我准完成自己的半栈技术栈，前后端分离之半栈开发<br>我的前后端分离架构请参考<a href=\"/2016/11/30/前后端分离架构一/\">前后端分离架构一</a><br>我的前端开发流程请参考<a href=\"/2017/01/11/前端开发流程/\">前端开发流程</a></p>\n</blockquote>\n<p><img src=\"/images/151BC80037EF896D625DE917E38F4A93.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"大前端半栈技术开发\"><a href=\"#大前端半栈技术开发\" class=\"headerlink\" title=\"大前端半栈技术开发\"></a>大前端半栈技术开发</h1><blockquote>\n<p>2017年我准完成自己的半栈技术栈，前后端分离之半栈开发<br>我的前后端分离架构请参考<a href=\"/2016/11/30/前后端分离架构一/\">前后端分离架构一</a><br>我的前端开发流程请参考<a href=\"/2017/01/11/前端开发流程/\">前端开发流程</a></p>\n</blockquote>\n<p><img src=\"/images/151BC80037EF896D625DE917E38F4A93.jpg\" alt=\"\"></p>\n"},{"title":"前后端分离架构一","date":"2016-11-29T16:15:36.000Z","_content":"\n> 开始写自己的技术博客了，以前没怎么关注这块，现在开始写了，以前后端分离架构为引，写一套自己对一路来对前端架构的理解与实战( 开发流程 )，后期会涉及docker,nginx,jenkins,nodejs,mocha.js, api文档rap, yunle-cli前端脚手架, 可能会有（mongo, redis, mq，graphql）等\n\n## 一. 前后端分离的好处\n\n1. 让\b合适的人做合适的事( 前端页面UI && 后端业务逻辑 )\n2. 关注点分离，前后端变得相对独立并松耦合( 独立开发，独立测试，独立部署 )\n3. 研发效率的提升，前后端都更快速开发( 前后端并行开发 )\n4. 测试可能独立测试UI交互和api接口( BUG指向, 职责清晰明了 )\n\n## 二. 前后端分离开发流程\n![前后端分离开发流程](/images/images1.png)\n\n## 三. 前端server架构\n![前端server架构](/images/images3.png)\n\n## 四. 前后开发脚手架yunle-cli\n\n> [yunle-cli](https://www.npmjs.com/package/yunle-cli) 是专为前端开发做的脚手架\n\n![前后开发脚手架yunle-cli](/images/images2.png)\n","source":"_posts/前后端分离架构一.md","raw":"---\ntitle: 前后端分离架构一\ndate: 2016-11-30 00:15:36\ntags: 前后端分离\n---\n\n> 开始写自己的技术博客了，以前没怎么关注这块，现在开始写了，以前后端分离架构为引，写一套自己对一路来对前端架构的理解与实战( 开发流程 )，后期会涉及docker,nginx,jenkins,nodejs,mocha.js, api文档rap, yunle-cli前端脚手架, 可能会有（mongo, redis, mq，graphql）等\n\n## 一. 前后端分离的好处\n\n1. 让\b合适的人做合适的事( 前端页面UI && 后端业务逻辑 )\n2. 关注点分离，前后端变得相对独立并松耦合( 独立开发，独立测试，独立部署 )\n3. 研发效率的提升，前后端都更快速开发( 前后端并行开发 )\n4. 测试可能独立测试UI交互和api接口( BUG指向, 职责清晰明了 )\n\n## 二. 前后端分离开发流程\n![前后端分离开发流程](/images/images1.png)\n\n## 三. 前端server架构\n![前端server架构](/images/images3.png)\n\n## 四. 前后开发脚手架yunle-cli\n\n> [yunle-cli](https://www.npmjs.com/package/yunle-cli) 是专为前端开发做的脚手架\n\n![前后开发脚手架yunle-cli](/images/images2.png)\n","slug":"前后端分离架构一","published":1,"updated":"2017-01-11T09:53:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zoo0004nxx3emffhnwe","content":"<blockquote>\n<p>开始写自己的技术博客了，以前没怎么关注这块，现在开始写了，以前后端分离架构为引，写一套自己对一路来对前端架构的理解与实战( 开发流程 )，后期会涉及docker,nginx,jenkins,nodejs,mocha.js, api文档rap, yunle-cli前端脚手架, 可能会有（mongo, redis, mq，graphql）等</p>\n</blockquote>\n<h2 id=\"一-前后端分离的好处\"><a href=\"#一-前后端分离的好处\" class=\"headerlink\" title=\"一. 前后端分离的好处\"></a>一. 前后端分离的好处</h2><ol>\n<li>让\b合适的人做合适的事( 前端页面UI &amp;&amp; 后端业务逻辑 )</li>\n<li>关注点分离，前后端变得相对独立并松耦合( 独立开发，独立测试，独立部署 )</li>\n<li>研发效率的提升，前后端都更快速开发( 前后端并行开发 )</li>\n<li>测试可能独立测试UI交互和api接口( BUG指向, 职责清晰明了 )</li>\n</ol>\n<h2 id=\"二-前后端分离开发流程\"><a href=\"#二-前后端分离开发流程\" class=\"headerlink\" title=\"二. 前后端分离开发流程\"></a>二. 前后端分离开发流程</h2><p><img src=\"/images/images1.png\" alt=\"前后端分离开发流程\"></p>\n<h2 id=\"三-前端server架构\"><a href=\"#三-前端server架构\" class=\"headerlink\" title=\"三. 前端server架构\"></a>三. 前端server架构</h2><p><img src=\"/images/images3.png\" alt=\"前端server架构\"></p>\n<h2 id=\"四-前后开发脚手架yunle-cli\"><a href=\"#四-前后开发脚手架yunle-cli\" class=\"headerlink\" title=\"四. 前后开发脚手架yunle-cli\"></a>四. 前后开发脚手架yunle-cli</h2><blockquote>\n<p><a href=\"https://www.npmjs.com/package/yunle-cli\" target=\"_blank\" rel=\"external\">yunle-cli</a> 是专为前端开发做的脚手架</p>\n</blockquote>\n<p><img src=\"/images/images2.png\" alt=\"前后开发脚手架yunle-cli\"></p>\n","excerpt":"","more":"<blockquote>\n<p>开始写自己的技术博客了，以前没怎么关注这块，现在开始写了，以前后端分离架构为引，写一套自己对一路来对前端架构的理解与实战( 开发流程 )，后期会涉及docker,nginx,jenkins,nodejs,mocha.js, api文档rap, yunle-cli前端脚手架, 可能会有（mongo, redis, mq，graphql）等</p>\n</blockquote>\n<h2 id=\"一-前后端分离的好处\"><a href=\"#一-前后端分离的好处\" class=\"headerlink\" title=\"一. 前后端分离的好处\"></a>一. 前后端分离的好处</h2><ol>\n<li>让\b合适的人做合适的事( 前端页面UI &amp;&amp; 后端业务逻辑 )</li>\n<li>关注点分离，前后端变得相对独立并松耦合( 独立开发，独立测试，独立部署 )</li>\n<li>研发效率的提升，前后端都更快速开发( 前后端并行开发 )</li>\n<li>测试可能独立测试UI交互和api接口( BUG指向, 职责清晰明了 )</li>\n</ol>\n<h2 id=\"二-前后端分离开发流程\"><a href=\"#二-前后端分离开发流程\" class=\"headerlink\" title=\"二. 前后端分离开发流程\"></a>二. 前后端分离开发流程</h2><p><img src=\"/images/images1.png\" alt=\"前后端分离开发流程\"></p>\n<h2 id=\"三-前端server架构\"><a href=\"#三-前端server架构\" class=\"headerlink\" title=\"三. 前端server架构\"></a>三. 前端server架构</h2><p><img src=\"/images/images3.png\" alt=\"前端server架构\"></p>\n<h2 id=\"四-前后开发脚手架yunle-cli\"><a href=\"#四-前后开发脚手架yunle-cli\" class=\"headerlink\" title=\"四. 前后开发脚手架yunle-cli\"></a>四. 前后开发脚手架yunle-cli</h2><blockquote>\n<p><a href=\"https://www.npmjs.com/package/yunle-cli\">yunle-cli</a> 是专为前端开发做的脚手架</p>\n</blockquote>\n<p><img src=\"/images/images2.png\" alt=\"前后开发脚手架yunle-cli\"></p>\n"},{"title":"社区h5服务化，组件化技术和发展","date":"2017-03-27T09:44:34.000Z","_content":"\n\n\n\n### 1. H5项目常见问题及注意事项\n\n####Meta基础知识：\n- H5页面窗口自动调整到设备宽度，并禁止用户缩放页面\n``` Javascript\n//一、HTML页面结构\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" />\n// width    设置viewport宽度，为一个正整数，或字符串‘device-width’\n// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置\n// initial-scale    默认缩放比例，为一个数字，可以带小数\n// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数\n// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数\n// user-scalable    是否允许手动缩放\n\n//二、JS动态判断\nvar phoneWidth =  parseInt(window.screen.width);\nvar phoneScale = phoneWidth/640;\nvar ua = navigator.userAgent;\nif (/Android (\\d+\\.\\d+)/.test(ua)){\n\tvar version = parseFloat(RegExp.$1);\n\tif(version>2.3){\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=640, minimum-scale = '+phoneScale+', maximum-scale = '+phoneScale+', target-densitydpi=device-dpi\">');\n\t}else{\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\">');\n\t}\n} else {\n\tdocument.write('<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">');\n}\n```\n\n\n\n\n- H5空白页基本meta标签\n```\n<!-- 设置缩放 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\" />\n<!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） -->\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 -->\n<meta name=\"format-detection\"content=\"telephone=no, email=no\" />\n```\n\n- PC端基础meta标签\n```\n<!-- 页面关键词-->\n<meta name=\"keywords\" content=\"your tags\" />\n<!-- 页面描述-->\n<meta name=\"description\" content=\"150 words\" />\n<!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。-->\n<meta name=\"robots\" content=\"index,follow\" />\n<!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n -->\n\n <!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。-->\n <meta http-equiv=\"refresh\" content=\"0;url=\" />\n\n```\n\n- 页面缓存设置\n```\n<!-- 清除缓存 -->\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta http-equiv=\"expires\" content=\"0\">   \n```\n\n- 其他meta标签\n```\n<!-- 启用360浏览器的极速模式(webkit) -->\n<meta name=\"renderer\" content=\"webkit\">\n<!-- 避免IE使用兼容模式 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n<meta name=\"author\" content=\"author name\" /> <!-- 定义网页作者 -->\n<meta name=\"google\" content=\"index,follow\" />\n<meta name=\"googlebot\" content=\"index,follow\" />\n<meta name=\"verify\" content=\"index,follow\" />\n```\n\n\n####常见问题：\n- 移动端如何定义字体font-family\n``` CSS\n@ --------------------------------------中文字体的英文名称\n@ 宋体      SimSun\n@ 黑体      SimHei\n@ 微信雅黑   Microsoft Yahei\n@ 微软正黑体 Microsoft JhengHei\n@ 新宋体    NSimSun\n@ 新细明体  MingLiU\n@ 细明体    MingLiU\n@ 标楷体    DFKai-SB\n@ 仿宋     FangSong\n@ 楷体     KaiTi\n@ 仿宋_GB2312  FangSong_GB2312\n@ 楷体_GB2312  KaiTi_GB2312  \n@\n@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica\n\nbody { font-family: Microsoft Yahei,SimSun,Helvetica; }\n```\n\n\n- 打电话发短信写邮件怎么实现\n``` HTML\n// 一、打电话\n<a href=\"tel:0755-10086\">打电话给:0755-10086</a>\n\n//  二、发短信，winphone系统无效\n<a href=\"sms:10086\">发短信给: 10086</a>\n\n// 三、写邮件\n//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&\"开头\n//1.普通邮件\n<a href=\"mailto:863139978@qq.com\">点击我发邮件</a>\n//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）\n<a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\">点击我发邮件</a>\n//3.跟着抄送地址后，写上&bcc=,可添加密件抄送地址（Android存在兼容问题）\n<a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&bcc=384900096@qq.com\">点击我发邮件</a>\n//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址\n<a href=\"mailto:863139978@qq.com;384900096@qq.com\">点击我发邮件</a>\n//5.包含主题，用?subject=\n<a href=\"mailto:863139978@qq.com?subject=邮件主题\">点击我发邮件</a>\n//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行\n<a href=\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\">点击我发邮件</a>\n//7.内容包含链接，含http(s)://等的文本自动转化为链接\n<a href=\"mailto:863139978@qq.com?body=http://www.baidu.com\">点击我发邮件</a>\n//8.内容包含图片（PC不支持）\n<a href=\"mailto:863139978@qq.com?body=<img src='images/1.jpg' />\">点击我发邮件</a>\n//9.完整示例\n<a href=\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&bcc=993233461@qq.com&subject=[邮件主题]&body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A<img src='images/1.jpg' />\">点击我发邮件</a>\n```\n\n\n- 移动端touch事件（区分webkit和winphone）\n```\n/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */\n// 以下支持webkit\ntouchstart——当手指触碰屏幕时候发生。不管当前有多少只手指\ntouchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动\ntouchend——当手指离开屏幕时触发\ntouchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用\n\n//TouchEvent说明：\ntouches：屏幕上所有手指的信息\ntargetTouches：手指在目标区域的手指信息\nchangedTouches：最近一次触发该事件的手指信息\ntouchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息\n\n//参数信息(changedTouches[0])\nclientX、clientY在显示区的坐标\ntarget：当前元素\n\n//事件响应顺序\nontouchstart  > ontouchmove  > ontouchend > onclick\n\n// 以下支持winphone 8\nMSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指\nMSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动\nMSPointerUp——当手指离开屏幕时触发\n```\n\n\n- 移动端click屏幕产生200-300ms的延时响应\n```\n说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。\n\n以下是历史原因，来源一个公司内一个同事的分享：\n2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n\n双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。\n\n原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href=\"#\"></a>，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n\n//解决方案：\nfastclick可以解决在手机上点击事件的300ms延迟\nzepto的touch模块，tap事件也是为了解决在click的延迟问题\n```\n\n\n- Rentina显示屏原理及设计方案\n```\n说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。\n在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。\n那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2\n\n//例如图片宽高为：200px*200px，那么写法如下\n.css{width:100px;height:100px;background-size:100px 100px;}\n//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px\n.css{font-size:20px}\n\n//image-set设计Rentina背景图\nimage-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。\n.css {\n\tbackground: url(images/bg.jpg) no-repeat center;\n\tbackground: -webkit-image-set(\n\turl(images/bg.jpg) 1x,     //支持image-set普通屏\n\turl(images/bg-2x.jpg) 2x); //支持image-set的Rentinan\n}\n```\n\n\n- 点击元素产生背景或边框怎么去掉\n```\n//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；\n//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；\n//winphone系统,点击标签产生的灰色半透明背景，能通过设置<meta name=\"msapplication-tap-highlight\" content=\"no\">去掉；\n//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签\na,button,input,textarea {\n\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t-webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符\n}   \n// 也可以\n* { -webkit-tap-highlight-color: rgba(0,0,0,0); }\n//winphone下\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n\n- 美化表单元素\n``` CSS\n//一、使用appearance改变webkit浏览器的默认外观\ninput,select { -webkit-appearance:none; appearance: none; }\n\n//二、winphone下，使用伪元素改变表单元素默认外观\n//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰\nselect::-ms-expand { display:none; }\n\n//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰\ninput[type=radio]::-ms-check,\ninput[type=checkbox]::-ms-check { display:none; }\n\n//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰\ninput[type=text]::-ms-clear,\ninput[type=tel]::-ms-clear,\ninput[type=number]::-ms-clear { display:none; }\n```\n\n\n- 移动端字体单位font-size选择px还是rem\n```\n// 如需适配多种移动设备，建议使用rem。以下为参考值：\nhtml { font-size: 62.5%; }   //10*16 = 62.5%\n//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级\nbody { font-size:12px; font-size:1.2rem; }     \n```\n\n\n- 超实用的CSS样式\n```\n//去掉webkit的滚动条——display: none;\n//其他参数\n::-webkit-scrollba //滚动条整体部分\n::-webkit-scrollbar-thumb   //滚动条内的小方块\n::-webkit-scrollbar-track   //滚动条轨道\n::-webkit-scrollbar-button  //滚动条轨道两端按钮\n::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道\n::-webkit-scrollbar-corner       //边角，两个滚动条交汇处\n::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n\n// 禁止长按链接与图片弹出菜单\na,img { -webkit-touch-callout: none }    \n\n// 禁止ios和android用户选中文字\nhtml,body {-webkit-user-select:none; user-select: none; }\n\n// 改变输入框placeholder的颜色值\n::-webkit-input-placeholder { /* WebKit browsers */\ncolor: #999; }\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\ncolor: #999; }\n::-moz-placeholder { /* Mozilla Firefox 19+ */\ncolor: #999; }\n:-ms-input-placeholder { /* Internet Explorer 10+ */\ncolor: #999; }\ninput:focus::-webkit-input-placeholder{ color:#999; }\n\n// android上去掉语音输入按钮\ninput::-webkit-input-speech-button {display: none}\n\n// 阻止windows Phone的默认触摸事件\n/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/\nhtml { -ms-touch-action:none; } //禁止winphone默认触摸事件\n```\n\n\n- 取消input在ios下，输入的时候英文首字母的默认大写\n``` HTML\n<input autocapitalize=\"off\" autocorrect=\"off\" />\n```\n\n\n- 手机拍照和上传图片\n```\n//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持\n<input type=\"file\" accept=\"images/*\" />\n<input type=\"file\" accept=\"video/*\" />\n```\n\n\n- 屏幕旋转的事件和样式\n``` JS&CSs\n//JS处理\nfunction orientInit(){\n\tvar orientChk = document.documentElement.clientWidth > document.documentElement.clientHeight?'landscape':'portrait';\n\tif(orientChk =='lapdscape'){\n\t\t//这里是横屏下需要执行的事件\n\t}else{\n\t\t//这里是竖屏下需要执行的事件\n\t}\n}\n\norientInit();\nwindow.addEventListener('onorientationchange' in window?'orientationchange':'resize', function(){\n\tsetTimeout(orientInit, 100);\n},false)\n\n//CSS处理\n//竖屏时样式\n@media all and (orientation:portrait){   }\n//横屏时样式\n@media all and (orientation:landscape){   }\n```\n\n\n- audio元素和video元素在ios和andriod中无法自动播放\n```\n//音频，写法一\n<audio src=\"music/bg.mp3\" autoplay loop controls>你的浏览器还不支持哦</audio>\n\n//音频，写法二\n<audio controls=\"controls\">\n\t<source src=\"music/bg.ogg\" type=\"audio/ogg\"></source>\n\t<source src=\"music/bg.mp3\" type=\"audio/mpeg\"></source>\n\t优先播放音乐bg.ogg，不支持在播放bg.mp3\n</audio>\n\n//JS绑定自动播放（操作window时，播放音乐）\n$(window).one('touchstart', function(){\n\tmusic.play();\n})\n\n//微信下兼容处理\ndocument.addEventListener(\"WeixinJSBridgeReady\", function () {\n    music.play();\n}, false);\n\n//小结\n//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常\n//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间\n```\n\n- 重力感应事件\n```\n// 运用HTML5的deviceMotion，调用重力感应事件\nif(window.DeviceMotionEvent){\n\tdocument.addEventListener('devicemotion', deviceMotionHandler, false)\n}\n\nvar speed = 30;\nvar x = y = z = lastX = lastY = lastZ = 0;\nfunction deviceMotionHandler(eventData){\n\tvar acceleration = event.accelerationIncludingGravity;\n\tx = acceleration.x;\n\ty = acceleration.y;\n\tz = acceleration.z;\n\tif(Math.abs(x-lastX)>speed || Math.abs(y-lastY)>speed || Math.abs(z-lastZ)>speed ){\n\t\t//这里是摇动后要执行的方法\n\t\tyaoAfter();\n\t}\n\tlastX = x;\n\tlastY = y;\n\tlastZ = z;\n}\n\nfunction yaoAfter(){\n\t//do something\n}\n\n//说明：说见案例摇一摇效果中yao.js\n```\n\n\n- 微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整\n```\n//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理\nif (typeof(WeixinJSBridge) == \"undefined\") {\n\tdocument.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n\t    setTimeout(function(){\n\t\t    WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize':0}, function(res){\n\t\t\t    alert(JSON.stringify(res));\n\t\t    })\n\t    }, 0)\n\t});\n}else{\n    setTimeout(function(){\n\t    WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize':0}, function(res){\n\t\t    alert(JSON.stringify(res));\n\t    })\n    }, 0)\n}\n\n//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小\nbody { -webkit-text-size-adjust:100%!important; }\n\n//最好的解决方案：最好使用rem或百分比布局\n```\n\n- 定位的坑\n```\n//fixed定位\n//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位\n//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位\n//3.ios4下不支持position:fixed\n//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：\n<div id=\"wrapper\">\n        <ul>\n               <li></li>\n               .....\n        </ul>\n</div>\n<script src=\"iscroll.js\"></script>\n<script>\n\tvar myscroll;\n\tfunction loaded(){\n\t\tmyscroll=new iScroll(\"wrapper\");\n\t}\n\twindow.addEventListener(\"DOMContentLoaded\",loaded,false);\n</script>\n\n\n//position定位\n//Android下弹出软键盘弹出时，影响absolute元素定位\n//解决方案:\nvar ua = navigator.userAgent.indexOf('Android');\nif(ua>-1){\n\t$('.ipt').on('focus', function(){\n\t\t$('.css').css({'visibility':'hidden'})\n\t}).on('blur', function(){\n\t\t$('.css').css({'visibility':'visible'})\n\t})\n}\n\n```\n\n\n- 播放视频不全屏\n``` HTML\n<!--\n1.ios7+支持自动播放\n2.支持Airplay的设备（如：音箱、Apple TV)播放\nx-webkit-airplay=\"true\"\n3.播放视频不全屏\nwebkit-playsinline=\"true\"\n-->\n<video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"></video>\n```\n\n- JS判断设备\n```\nfunction deviceType(){\n\tvar ua = navigator.userAgent;\n\tvar agent = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\n\tfor(var i=0; i<len,len = agent.length; i++){\n\t\tif(ua.indexOf(agent[i])>0){\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n}\ndeviceType();\nwindow.addEventListener('resize', function(){\n\tdeviceType();\n})\n```\n\n- JS判断微信浏览器\n```\nfunction isWeixin(){\n\tvar ua = navigator.userAgent.toLowerCase();\n\tif(ua.match(/MicroMessenger/i)=='micromessenger'){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n```\n\n\n- android 2.3 bug\n```\n//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉\n//2.after和before伪类无法使用动画animation\n//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值\n//4.translate百分比的写法和scale在一起会导致失效，例如：\n-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)\n```\n\n- android 4.x bug\n```\n//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写\n//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分\n//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色\n//4.android无法同时播放多音频audio\n```\n\n\n- 消除transition闪屏\n``` CSS\n.css {\n\t-webkit-transform-style: preserve-3d;\n\t-webkit-backface-visibility: hidden;\n\t-webkit-perspective: 1000;\n}\n```\n\n\n- 开启硬件加速\n``` CSS\n//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。\n.css {\n\t-webkit-transform: translate3d(0,0,0);\n\t-moz-transform: translate3d(0,0,0);\n\t-ms-transform: translate3d(0,0,0);\n\ttransform: translate3d(0,0,0);\n}\n```\n\n\n- 渲染优化\n```\n//1.禁止使用iframe（阻塞父文档onload事件）\n//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）\n//使用CSS3代码代替JS动画；\n//开启GPU加速；\n//使用base64位编码图片(不小图而言，大图不建议使用)\n\t// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：\n\t//1.减少HTTP请求；\n\t//2.避免文件跨域；\n\t//3.修改及时生效；\n```\n\n\n- 腾讯方案\n``` javascript\nvar autoScale = function(){\n    var ratio = 320/504,   //这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）\n        winW = document.getElement.clientWidth,\n        winH = document.getElement.clientHeight,\n        ratio2 = winW/winH,\n        scale;\n    if(ratio<ratio2){\n        scale = (winH/504).toString().substring(0, 6);\n    }else{\n        scale = (winW/320).toString().substring(0, 6);  \n    }\n    var cssText = '-webkit-transform: scale('+scale+');-webkit-transform-origin: top; opacity:1;'  \n    $('.wrap').attr('style', cssText);\n}\nsetTimeout(function(){\n    if(document.documentElement.clientWidth/document.documentElement.clientHeight !== 320/504){\n        autoScale();\n    }else{\n        $('.page').css({'opacity': 1});\n    }\n}, 300)  //添加一定时长以确保宽高获取正确\nwindow.addEventListener('onorientationchange' in window?'orientationchange':'resize', autoScale, false){\n        detectOrientatioin();\n}   //切换横竖屏\n\nfunction detectOrientatioin(){\n    if(window.orientation==180 || window.orientation==0){\n        //竖屏\n    }\n    if(window.orientation==90 || window.orientation==-90){\n        //横屏\n    }\n}\n```\n\n\n####常用的移动端框架\nzepto.js\n\t- [官网](http://zeptojs.com/)\n\t- [中文网](http://www.css88.com/doc/zeptojs_api/)\n\t- [浏览器检测](https://github.com/madrobby/zepto/blob/master/src/detect.js)\n\t- [tap事件](https://github.com/madrobby/zepto/blob/master/src/touch.js)\n\n# 2. 主要包含以下几大职能：\n    1. H5社区富交互动画\n    2. WebApp和端交互\n    3. 社区后台功能与交互\n\n# 3. 技术：\n    ## H5 端：\n    第一版：（jq || zepto) + less + gulp\n    第二版：react + less + webpack\n    前端规范:\n    ES6 + webpack + babel\n    请求方式： 统一的请求中间件\n    唤起app: 统一的中间页服务 + iframe 请求 schema\n\n# 4. 准备实践和产出\n    1. 唤起app功能组件\n    2. 请求中间件\n    2. 可视化h5编辑器 ( 基于reactjs )\n    3. 小型社区H5组件库 （ 基于reactjs ） \n\n### 唤起app功能组件\n以下为思路，后期封装成库组件\n```\n$(\"a[href^='schema://']\").on('click',function(e){\n    e.preventDefault();\n    if(isWeixinBrowser() || isQQBrowser()){\n        $('.layer').show(); //友好的提示页面\n    }else{\n        if(isAndroid){\n            //android\n            \n            //此操作会调起app并阻止接下来的js执行\n            $('body').append(\"<iframe src='schema://openapp' style='display:none' target='' ></iframe>\");\n\n            //没有安装应用会执行下面的语句\n            setTimeout(function(){window.location = 'http://www.yourdlurl.com/download.html'},600);\n        }else{\n            //ios\n            window.location = 'schema://openapp';\n            setTimeout(function(){window.location = 'itms-apps://itunes.apple.com/app/idXXXXXXX'},25);\n        }\n    }\n})\n\nfunction isWeixinBrowser() {\n        return (/micromessenger/.test(ua)) ? true : false;\n    }\n\nfunction isQQBrowser() {\n    return (ua.match(/QQ/i) == \"qq\") ? true : false;\n}\n```\n### 请求中间件\n   这块要商量下，暂时不出！\n### 可视化h5编辑器\n    非前端人员用一张图就可以完成H5专题页，前端er只推护组件与功能，不重复编码\n    （个人理念：提供服务，而不是提供劳动力）\n   DOME展示\n### 小型社区H5组件库\n    社区h5的业务其实很简单，一次开发的页面没有几页，共用的组件也很多，可提取公共组件\n   DOME展示\n   \n ## 结尾\n   #提供服务，而不是提供劳动力\n   \n   \n   ","source":"_posts/H5项目常见问题汇总及解决方案.md","raw":"---\ntitle: 社区h5服务化，组件化技术和发展\ndate: 2017-03-27 17:44:34\ntags:\n---\n\n\n\n\n### 1. H5项目常见问题及注意事项\n\n####Meta基础知识：\n- H5页面窗口自动调整到设备宽度，并禁止用户缩放页面\n``` Javascript\n//一、HTML页面结构\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" />\n// width    设置viewport宽度，为一个正整数，或字符串‘device-width’\n// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置\n// initial-scale    默认缩放比例，为一个数字，可以带小数\n// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数\n// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数\n// user-scalable    是否允许手动缩放\n\n//二、JS动态判断\nvar phoneWidth =  parseInt(window.screen.width);\nvar phoneScale = phoneWidth/640;\nvar ua = navigator.userAgent;\nif (/Android (\\d+\\.\\d+)/.test(ua)){\n\tvar version = parseFloat(RegExp.$1);\n\tif(version>2.3){\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=640, minimum-scale = '+phoneScale+', maximum-scale = '+phoneScale+', target-densitydpi=device-dpi\">');\n\t}else{\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\">');\n\t}\n} else {\n\tdocument.write('<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">');\n}\n```\n\n\n\n\n- H5空白页基本meta标签\n```\n<!-- 设置缩放 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\" />\n<!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） -->\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 -->\n<meta name=\"format-detection\"content=\"telephone=no, email=no\" />\n```\n\n- PC端基础meta标签\n```\n<!-- 页面关键词-->\n<meta name=\"keywords\" content=\"your tags\" />\n<!-- 页面描述-->\n<meta name=\"description\" content=\"150 words\" />\n<!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。-->\n<meta name=\"robots\" content=\"index,follow\" />\n<!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n -->\n\n <!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。-->\n <meta http-equiv=\"refresh\" content=\"0;url=\" />\n\n```\n\n- 页面缓存设置\n```\n<!-- 清除缓存 -->\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta http-equiv=\"expires\" content=\"0\">   \n```\n\n- 其他meta标签\n```\n<!-- 启用360浏览器的极速模式(webkit) -->\n<meta name=\"renderer\" content=\"webkit\">\n<!-- 避免IE使用兼容模式 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n<meta name=\"author\" content=\"author name\" /> <!-- 定义网页作者 -->\n<meta name=\"google\" content=\"index,follow\" />\n<meta name=\"googlebot\" content=\"index,follow\" />\n<meta name=\"verify\" content=\"index,follow\" />\n```\n\n\n####常见问题：\n- 移动端如何定义字体font-family\n``` CSS\n@ --------------------------------------中文字体的英文名称\n@ 宋体      SimSun\n@ 黑体      SimHei\n@ 微信雅黑   Microsoft Yahei\n@ 微软正黑体 Microsoft JhengHei\n@ 新宋体    NSimSun\n@ 新细明体  MingLiU\n@ 细明体    MingLiU\n@ 标楷体    DFKai-SB\n@ 仿宋     FangSong\n@ 楷体     KaiTi\n@ 仿宋_GB2312  FangSong_GB2312\n@ 楷体_GB2312  KaiTi_GB2312  \n@\n@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica\n\nbody { font-family: Microsoft Yahei,SimSun,Helvetica; }\n```\n\n\n- 打电话发短信写邮件怎么实现\n``` HTML\n// 一、打电话\n<a href=\"tel:0755-10086\">打电话给:0755-10086</a>\n\n//  二、发短信，winphone系统无效\n<a href=\"sms:10086\">发短信给: 10086</a>\n\n// 三、写邮件\n//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&\"开头\n//1.普通邮件\n<a href=\"mailto:863139978@qq.com\">点击我发邮件</a>\n//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）\n<a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\">点击我发邮件</a>\n//3.跟着抄送地址后，写上&bcc=,可添加密件抄送地址（Android存在兼容问题）\n<a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&bcc=384900096@qq.com\">点击我发邮件</a>\n//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址\n<a href=\"mailto:863139978@qq.com;384900096@qq.com\">点击我发邮件</a>\n//5.包含主题，用?subject=\n<a href=\"mailto:863139978@qq.com?subject=邮件主题\">点击我发邮件</a>\n//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行\n<a href=\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\">点击我发邮件</a>\n//7.内容包含链接，含http(s)://等的文本自动转化为链接\n<a href=\"mailto:863139978@qq.com?body=http://www.baidu.com\">点击我发邮件</a>\n//8.内容包含图片（PC不支持）\n<a href=\"mailto:863139978@qq.com?body=<img src='images/1.jpg' />\">点击我发邮件</a>\n//9.完整示例\n<a href=\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&bcc=993233461@qq.com&subject=[邮件主题]&body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A<img src='images/1.jpg' />\">点击我发邮件</a>\n```\n\n\n- 移动端touch事件（区分webkit和winphone）\n```\n/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */\n// 以下支持webkit\ntouchstart——当手指触碰屏幕时候发生。不管当前有多少只手指\ntouchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动\ntouchend——当手指离开屏幕时触发\ntouchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用\n\n//TouchEvent说明：\ntouches：屏幕上所有手指的信息\ntargetTouches：手指在目标区域的手指信息\nchangedTouches：最近一次触发该事件的手指信息\ntouchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息\n\n//参数信息(changedTouches[0])\nclientX、clientY在显示区的坐标\ntarget：当前元素\n\n//事件响应顺序\nontouchstart  > ontouchmove  > ontouchend > onclick\n\n// 以下支持winphone 8\nMSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指\nMSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动\nMSPointerUp——当手指离开屏幕时触发\n```\n\n\n- 移动端click屏幕产生200-300ms的延时响应\n```\n说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。\n\n以下是历史原因，来源一个公司内一个同事的分享：\n2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n\n双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。\n\n原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href=\"#\"></a>，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n\n//解决方案：\nfastclick可以解决在手机上点击事件的300ms延迟\nzepto的touch模块，tap事件也是为了解决在click的延迟问题\n```\n\n\n- Rentina显示屏原理及设计方案\n```\n说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。\n在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。\n那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2\n\n//例如图片宽高为：200px*200px，那么写法如下\n.css{width:100px;height:100px;background-size:100px 100px;}\n//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px\n.css{font-size:20px}\n\n//image-set设计Rentina背景图\nimage-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。\n.css {\n\tbackground: url(images/bg.jpg) no-repeat center;\n\tbackground: -webkit-image-set(\n\turl(images/bg.jpg) 1x,     //支持image-set普通屏\n\turl(images/bg-2x.jpg) 2x); //支持image-set的Rentinan\n}\n```\n\n\n- 点击元素产生背景或边框怎么去掉\n```\n//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；\n//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；\n//winphone系统,点击标签产生的灰色半透明背景，能通过设置<meta name=\"msapplication-tap-highlight\" content=\"no\">去掉；\n//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签\na,button,input,textarea {\n\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t-webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符\n}   \n// 也可以\n* { -webkit-tap-highlight-color: rgba(0,0,0,0); }\n//winphone下\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n\n- 美化表单元素\n``` CSS\n//一、使用appearance改变webkit浏览器的默认外观\ninput,select { -webkit-appearance:none; appearance: none; }\n\n//二、winphone下，使用伪元素改变表单元素默认外观\n//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰\nselect::-ms-expand { display:none; }\n\n//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰\ninput[type=radio]::-ms-check,\ninput[type=checkbox]::-ms-check { display:none; }\n\n//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰\ninput[type=text]::-ms-clear,\ninput[type=tel]::-ms-clear,\ninput[type=number]::-ms-clear { display:none; }\n```\n\n\n- 移动端字体单位font-size选择px还是rem\n```\n// 如需适配多种移动设备，建议使用rem。以下为参考值：\nhtml { font-size: 62.5%; }   //10*16 = 62.5%\n//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级\nbody { font-size:12px; font-size:1.2rem; }     \n```\n\n\n- 超实用的CSS样式\n```\n//去掉webkit的滚动条——display: none;\n//其他参数\n::-webkit-scrollba //滚动条整体部分\n::-webkit-scrollbar-thumb   //滚动条内的小方块\n::-webkit-scrollbar-track   //滚动条轨道\n::-webkit-scrollbar-button  //滚动条轨道两端按钮\n::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道\n::-webkit-scrollbar-corner       //边角，两个滚动条交汇处\n::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n\n// 禁止长按链接与图片弹出菜单\na,img { -webkit-touch-callout: none }    \n\n// 禁止ios和android用户选中文字\nhtml,body {-webkit-user-select:none; user-select: none; }\n\n// 改变输入框placeholder的颜色值\n::-webkit-input-placeholder { /* WebKit browsers */\ncolor: #999; }\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\ncolor: #999; }\n::-moz-placeholder { /* Mozilla Firefox 19+ */\ncolor: #999; }\n:-ms-input-placeholder { /* Internet Explorer 10+ */\ncolor: #999; }\ninput:focus::-webkit-input-placeholder{ color:#999; }\n\n// android上去掉语音输入按钮\ninput::-webkit-input-speech-button {display: none}\n\n// 阻止windows Phone的默认触摸事件\n/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/\nhtml { -ms-touch-action:none; } //禁止winphone默认触摸事件\n```\n\n\n- 取消input在ios下，输入的时候英文首字母的默认大写\n``` HTML\n<input autocapitalize=\"off\" autocorrect=\"off\" />\n```\n\n\n- 手机拍照和上传图片\n```\n//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持\n<input type=\"file\" accept=\"images/*\" />\n<input type=\"file\" accept=\"video/*\" />\n```\n\n\n- 屏幕旋转的事件和样式\n``` JS&CSs\n//JS处理\nfunction orientInit(){\n\tvar orientChk = document.documentElement.clientWidth > document.documentElement.clientHeight?'landscape':'portrait';\n\tif(orientChk =='lapdscape'){\n\t\t//这里是横屏下需要执行的事件\n\t}else{\n\t\t//这里是竖屏下需要执行的事件\n\t}\n}\n\norientInit();\nwindow.addEventListener('onorientationchange' in window?'orientationchange':'resize', function(){\n\tsetTimeout(orientInit, 100);\n},false)\n\n//CSS处理\n//竖屏时样式\n@media all and (orientation:portrait){   }\n//横屏时样式\n@media all and (orientation:landscape){   }\n```\n\n\n- audio元素和video元素在ios和andriod中无法自动播放\n```\n//音频，写法一\n<audio src=\"music/bg.mp3\" autoplay loop controls>你的浏览器还不支持哦</audio>\n\n//音频，写法二\n<audio controls=\"controls\">\n\t<source src=\"music/bg.ogg\" type=\"audio/ogg\"></source>\n\t<source src=\"music/bg.mp3\" type=\"audio/mpeg\"></source>\n\t优先播放音乐bg.ogg，不支持在播放bg.mp3\n</audio>\n\n//JS绑定自动播放（操作window时，播放音乐）\n$(window).one('touchstart', function(){\n\tmusic.play();\n})\n\n//微信下兼容处理\ndocument.addEventListener(\"WeixinJSBridgeReady\", function () {\n    music.play();\n}, false);\n\n//小结\n//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常\n//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间\n```\n\n- 重力感应事件\n```\n// 运用HTML5的deviceMotion，调用重力感应事件\nif(window.DeviceMotionEvent){\n\tdocument.addEventListener('devicemotion', deviceMotionHandler, false)\n}\n\nvar speed = 30;\nvar x = y = z = lastX = lastY = lastZ = 0;\nfunction deviceMotionHandler(eventData){\n\tvar acceleration = event.accelerationIncludingGravity;\n\tx = acceleration.x;\n\ty = acceleration.y;\n\tz = acceleration.z;\n\tif(Math.abs(x-lastX)>speed || Math.abs(y-lastY)>speed || Math.abs(z-lastZ)>speed ){\n\t\t//这里是摇动后要执行的方法\n\t\tyaoAfter();\n\t}\n\tlastX = x;\n\tlastY = y;\n\tlastZ = z;\n}\n\nfunction yaoAfter(){\n\t//do something\n}\n\n//说明：说见案例摇一摇效果中yao.js\n```\n\n\n- 微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整\n```\n//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理\nif (typeof(WeixinJSBridge) == \"undefined\") {\n\tdocument.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n\t    setTimeout(function(){\n\t\t    WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize':0}, function(res){\n\t\t\t    alert(JSON.stringify(res));\n\t\t    })\n\t    }, 0)\n\t});\n}else{\n    setTimeout(function(){\n\t    WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize':0}, function(res){\n\t\t    alert(JSON.stringify(res));\n\t    })\n    }, 0)\n}\n\n//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小\nbody { -webkit-text-size-adjust:100%!important; }\n\n//最好的解决方案：最好使用rem或百分比布局\n```\n\n- 定位的坑\n```\n//fixed定位\n//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位\n//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位\n//3.ios4下不支持position:fixed\n//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：\n<div id=\"wrapper\">\n        <ul>\n               <li></li>\n               .....\n        </ul>\n</div>\n<script src=\"iscroll.js\"></script>\n<script>\n\tvar myscroll;\n\tfunction loaded(){\n\t\tmyscroll=new iScroll(\"wrapper\");\n\t}\n\twindow.addEventListener(\"DOMContentLoaded\",loaded,false);\n</script>\n\n\n//position定位\n//Android下弹出软键盘弹出时，影响absolute元素定位\n//解决方案:\nvar ua = navigator.userAgent.indexOf('Android');\nif(ua>-1){\n\t$('.ipt').on('focus', function(){\n\t\t$('.css').css({'visibility':'hidden'})\n\t}).on('blur', function(){\n\t\t$('.css').css({'visibility':'visible'})\n\t})\n}\n\n```\n\n\n- 播放视频不全屏\n``` HTML\n<!--\n1.ios7+支持自动播放\n2.支持Airplay的设备（如：音箱、Apple TV)播放\nx-webkit-airplay=\"true\"\n3.播放视频不全屏\nwebkit-playsinline=\"true\"\n-->\n<video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"></video>\n```\n\n- JS判断设备\n```\nfunction deviceType(){\n\tvar ua = navigator.userAgent;\n\tvar agent = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\n\tfor(var i=0; i<len,len = agent.length; i++){\n\t\tif(ua.indexOf(agent[i])>0){\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n}\ndeviceType();\nwindow.addEventListener('resize', function(){\n\tdeviceType();\n})\n```\n\n- JS判断微信浏览器\n```\nfunction isWeixin(){\n\tvar ua = navigator.userAgent.toLowerCase();\n\tif(ua.match(/MicroMessenger/i)=='micromessenger'){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n```\n\n\n- android 2.3 bug\n```\n//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉\n//2.after和before伪类无法使用动画animation\n//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值\n//4.translate百分比的写法和scale在一起会导致失效，例如：\n-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)\n```\n\n- android 4.x bug\n```\n//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写\n//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分\n//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色\n//4.android无法同时播放多音频audio\n```\n\n\n- 消除transition闪屏\n``` CSS\n.css {\n\t-webkit-transform-style: preserve-3d;\n\t-webkit-backface-visibility: hidden;\n\t-webkit-perspective: 1000;\n}\n```\n\n\n- 开启硬件加速\n``` CSS\n//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。\n.css {\n\t-webkit-transform: translate3d(0,0,0);\n\t-moz-transform: translate3d(0,0,0);\n\t-ms-transform: translate3d(0,0,0);\n\ttransform: translate3d(0,0,0);\n}\n```\n\n\n- 渲染优化\n```\n//1.禁止使用iframe（阻塞父文档onload事件）\n//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）\n//使用CSS3代码代替JS动画；\n//开启GPU加速；\n//使用base64位编码图片(不小图而言，大图不建议使用)\n\t// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：\n\t//1.减少HTTP请求；\n\t//2.避免文件跨域；\n\t//3.修改及时生效；\n```\n\n\n- 腾讯方案\n``` javascript\nvar autoScale = function(){\n    var ratio = 320/504,   //这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）\n        winW = document.getElement.clientWidth,\n        winH = document.getElement.clientHeight,\n        ratio2 = winW/winH,\n        scale;\n    if(ratio<ratio2){\n        scale = (winH/504).toString().substring(0, 6);\n    }else{\n        scale = (winW/320).toString().substring(0, 6);  \n    }\n    var cssText = '-webkit-transform: scale('+scale+');-webkit-transform-origin: top; opacity:1;'  \n    $('.wrap').attr('style', cssText);\n}\nsetTimeout(function(){\n    if(document.documentElement.clientWidth/document.documentElement.clientHeight !== 320/504){\n        autoScale();\n    }else{\n        $('.page').css({'opacity': 1});\n    }\n}, 300)  //添加一定时长以确保宽高获取正确\nwindow.addEventListener('onorientationchange' in window?'orientationchange':'resize', autoScale, false){\n        detectOrientatioin();\n}   //切换横竖屏\n\nfunction detectOrientatioin(){\n    if(window.orientation==180 || window.orientation==0){\n        //竖屏\n    }\n    if(window.orientation==90 || window.orientation==-90){\n        //横屏\n    }\n}\n```\n\n\n####常用的移动端框架\nzepto.js\n\t- [官网](http://zeptojs.com/)\n\t- [中文网](http://www.css88.com/doc/zeptojs_api/)\n\t- [浏览器检测](https://github.com/madrobby/zepto/blob/master/src/detect.js)\n\t- [tap事件](https://github.com/madrobby/zepto/blob/master/src/touch.js)\n\n# 2. 主要包含以下几大职能：\n    1. H5社区富交互动画\n    2. WebApp和端交互\n    3. 社区后台功能与交互\n\n# 3. 技术：\n    ## H5 端：\n    第一版：（jq || zepto) + less + gulp\n    第二版：react + less + webpack\n    前端规范:\n    ES6 + webpack + babel\n    请求方式： 统一的请求中间件\n    唤起app: 统一的中间页服务 + iframe 请求 schema\n\n# 4. 准备实践和产出\n    1. 唤起app功能组件\n    2. 请求中间件\n    2. 可视化h5编辑器 ( 基于reactjs )\n    3. 小型社区H5组件库 （ 基于reactjs ） \n\n### 唤起app功能组件\n以下为思路，后期封装成库组件\n```\n$(\"a[href^='schema://']\").on('click',function(e){\n    e.preventDefault();\n    if(isWeixinBrowser() || isQQBrowser()){\n        $('.layer').show(); //友好的提示页面\n    }else{\n        if(isAndroid){\n            //android\n            \n            //此操作会调起app并阻止接下来的js执行\n            $('body').append(\"<iframe src='schema://openapp' style='display:none' target='' ></iframe>\");\n\n            //没有安装应用会执行下面的语句\n            setTimeout(function(){window.location = 'http://www.yourdlurl.com/download.html'},600);\n        }else{\n            //ios\n            window.location = 'schema://openapp';\n            setTimeout(function(){window.location = 'itms-apps://itunes.apple.com/app/idXXXXXXX'},25);\n        }\n    }\n})\n\nfunction isWeixinBrowser() {\n        return (/micromessenger/.test(ua)) ? true : false;\n    }\n\nfunction isQQBrowser() {\n    return (ua.match(/QQ/i) == \"qq\") ? true : false;\n}\n```\n### 请求中间件\n   这块要商量下，暂时不出！\n### 可视化h5编辑器\n    非前端人员用一张图就可以完成H5专题页，前端er只推护组件与功能，不重复编码\n    （个人理念：提供服务，而不是提供劳动力）\n   DOME展示\n### 小型社区H5组件库\n    社区h5的业务其实很简单，一次开发的页面没有几页，共用的组件也很多，可提取公共组件\n   DOME展示\n   \n ## 结尾\n   #提供服务，而不是提供劳动力\n   \n   \n   ","slug":"H5项目常见问题汇总及解决方案","published":1,"updated":"2017-03-28T02:05:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zor0005nxx37dy3960z","content":"<h3 id=\"1-H5项目常见问题及注意事项\"><a href=\"#1-H5项目常见问题及注意事项\" class=\"headerlink\" title=\"1. H5项目常见问题及注意事项\"></a>1. H5项目常见问题及注意事项</h3><p>####Meta基础知识：</p>\n<ul>\n<li><p>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一、HTML页面结构</span></div><div class=\"line\">&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span> /&gt;</div><div class=\"line\"><span class=\"comment\">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></div><div class=\"line\"><span class=\"comment\">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span></div><div class=\"line\"><span class=\"comment\">// initial-scale    默认缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// user-scalable    是否允许手动缩放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//二、JS动态判断</span></div><div class=\"line\"><span class=\"keyword\">var</span> phoneWidth =  <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.screen.width);</div><div class=\"line\"><span class=\"keyword\">var</span> phoneScale = phoneWidth/<span class=\"number\">640</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> ua = navigator.userAgent;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua))&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> version = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(version&gt;<span class=\"number\">2.3</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, minimum-scale = '</span>+phoneScale+<span class=\"string\">', maximum-scale = '</span>+phoneScale+<span class=\"string\">', target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>H5空白页基本meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 设置缩放 --&gt;</div><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot; /&gt;</div><div class=\"line\">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</div><div class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</div><div class=\"line\">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</div><div class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</div><div class=\"line\">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</div><div class=\"line\">&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no, email=no&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>PC端基础meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 页面关键词--&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;</div><div class=\"line\">&lt;!-- 页面描述--&gt;</div><div class=\"line\">&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;</div><div class=\"line\">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;</div><div class=\"line\">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">    all：文件将被检索，且页面上的链接可以被查询；</div><div class=\"line\">    none：文件将不被检索，且页面上的链接不可以被查询；</div><div class=\"line\">    index：文件将被检索；</div><div class=\"line\">    follow：页面上的链接可以被查询；</div><div class=\"line\">    noindex：文件将不被检索；</div><div class=\"line\">    nofollow：页面上的链接不可以被查询。</div><div class=\"line\"> --&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt;</div><div class=\"line\"> &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面缓存设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 清除缓存 --&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</div><div class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</div><div class=\"line\">&lt;!-- 避免IE使用兼容模式 --&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class=\"line\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</div><div class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div><div class=\"line\">&lt;!-- 微软的老式浏览器 --&gt;</div><div class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</div><div class=\"line\">&lt;!-- uc强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class=\"line\">&lt;!-- UC强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div><div class=\"line\">&lt;!-- QQ强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</div><div class=\"line\">&lt;!-- UC应用模式 --&gt;</div><div class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</div><div class=\"line\">&lt;!-- QQ应用模式 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</div><div class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</div><div class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;meta name=&quot;author&quot; content=&quot;author name&quot; /&gt; &lt;!-- 定义网页作者 --&gt;</div><div class=\"line\">&lt;meta name=&quot;google&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;googlebot&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;verify&quot; content=&quot;index,follow&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####常见问题：</p>\n<ul>\n<li><p>移动端如何定义字体font-family</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ --------------------------------------中文字体的英文名称</div><div class=\"line\">@ 宋体      SimSun</div><div class=\"line\">@ 黑体      SimHei</div><div class=\"line\">@ 微信雅黑   Microsoft Yahei</div><div class=\"line\">@ 微软正黑体 Microsoft JhengHei</div><div class=\"line\">@ 新宋体    NSimSun</div><div class=\"line\">@ 新细明体  MingLiU</div><div class=\"line\">@ 细明体    MingLiU</div><div class=\"line\">@ 标楷体    DFKai-SB</div><div class=\"line\">@ 仿宋     FangSong</div><div class=\"line\">@ 楷体     KaiTi</div><div class=\"line\">@ 仿宋_GB2312  FangSong_GB2312</div><div class=\"line\">@ 楷体_GB2312  KaiTi_GB2312  </div><div class=\"line\">@</div><div class=\"line\">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</div><div class=\"line\"></div><div class=\"line\">body &#123; <span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">Yahei</span>,<span class=\"selector-tag\">SimSun</span>,<span class=\"selector-tag\">Helvetica</span>; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打电话发短信写邮件怎么实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 一、打电话</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:0755-10086\"</span>&gt;</span>打电话给:0755-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">//  二、发短信，winphone系统无效</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">// 三、写邮件</div><div class=\"line\">//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&amp;\"开头</div><div class=\"line\">//1.普通邮件</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com;384900096@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//5.包含主题，用?subject=</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?subject=邮件主题\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//7.内容包含链接，含http(s)://等的文本自动转化为链接</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=http://www.baidu.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//8.内容包含图片（PC不支持）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' /&gt;\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//9.完整示例</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' /&gt;\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端touch事件（区分webkit和winphone）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */</div><div class=\"line\">// 以下支持webkit</div><div class=\"line\">touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class=\"line\">touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</div><div class=\"line\">touchend——当手指离开屏幕时触发</div><div class=\"line\">touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</div><div class=\"line\"></div><div class=\"line\">//TouchEvent说明：</div><div class=\"line\">touches：屏幕上所有手指的信息</div><div class=\"line\">targetTouches：手指在目标区域的手指信息</div><div class=\"line\">changedTouches：最近一次触发该事件的手指信息</div><div class=\"line\">touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</div><div class=\"line\"></div><div class=\"line\">//参数信息(changedTouches[0])</div><div class=\"line\">clientX、clientY在显示区的坐标</div><div class=\"line\">target：当前元素</div><div class=\"line\"></div><div class=\"line\">//事件响应顺序</div><div class=\"line\">ontouchstart  &gt; ontouchmove  &gt; ontouchend &gt; onclick</div><div class=\"line\"></div><div class=\"line\">// 以下支持winphone 8</div><div class=\"line\">MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class=\"line\">MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html&#123;-ms-touch-action: none;&#125;可以阻止默认情况的发生：阻止页面滚动</div><div class=\"line\">MSPointerUp——当手指离开屏幕时触发</div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端click屏幕产生200-300ms的延时响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</div><div class=\"line\"></div><div class=\"line\">以下是历史原因，来源一个公司内一个同事的分享：</div><div class=\"line\">2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</div><div class=\"line\"></div><div class=\"line\">双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</div><div class=\"line\"></div><div class=\"line\">原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</div><div class=\"line\"></div><div class=\"line\">//解决方案：</div><div class=\"line\">fastclick可以解决在手机上点击事件的300ms延迟</div><div class=\"line\">zepto的touch模块，tap事件也是为了解决在click的延迟问题</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rentina显示屏原理及设计方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。</div><div class=\"line\">在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。</div><div class=\"line\">那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</div><div class=\"line\"></div><div class=\"line\">//例如图片宽高为：200px*200px，那么写法如下</div><div class=\"line\">.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;</div><div class=\"line\">//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</div><div class=\"line\">.css&#123;font-size:20px&#125;</div><div class=\"line\"></div><div class=\"line\">//image-set设计Rentina背景图</div><div class=\"line\">image-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。</div><div class=\"line\">.css &#123;</div><div class=\"line\">\tbackground: url(images/bg.jpg) no-repeat center;</div><div class=\"line\">\tbackground: -webkit-image-set(</div><div class=\"line\">\turl(images/bg.jpg) 1x,     //支持image-set普通屏</div><div class=\"line\">\turl(images/bg-2x.jpg) 2x); //支持image-set的Rentinan</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>点击元素产生背景或边框怎么去掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</div><div class=\"line\">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</div><div class=\"line\">//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;去掉；</div><div class=\"line\">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签</div><div class=\"line\">a,button,input,textarea &#123;</div><div class=\"line\">\t-webkit-tap-highlight-color: rgba(0,0,0,0);</div><div class=\"line\">\t-webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</div><div class=\"line\">&#125;   </div><div class=\"line\">// 也可以</div><div class=\"line\">* &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;</div><div class=\"line\">//winphone下</div><div class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>美化表单元素</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//一、使用appearance改变webkit浏览器的默认外观</div><div class=\"line\">input,select &#123; -webkit-appearance:none; appearance: none; &#125;</div><div class=\"line\"></div><div class=\"line\">//二、winphone下，使用伪元素改变表单元素默认外观</div><div class=\"line\">//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</div><div class=\"line\">select::-ms-expand &#123; display:none; &#125;</div><div class=\"line\"></div><div class=\"line\">//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</div><div class=\"line\">input[type=radio]::-ms-check,</div><div class=\"line\">input[type=checkbox]::-ms-check &#123; display:none; &#125;</div><div class=\"line\"></div><div class=\"line\">//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</div><div class=\"line\">input[type=text]::-ms-clear,</div><div class=\"line\">input[type=tel]::-ms-clear,</div><div class=\"line\">input[type=number]::-ms-clear &#123; display:none; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端字体单位font-size选择px还是rem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如需适配多种移动设备，建议使用rem。以下为参考值：</div><div class=\"line\">html &#123; font-size: 62.5%; &#125;   //10*16 = 62.5%</div><div class=\"line\">//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</div><div class=\"line\">body &#123; font-size:12px; font-size:1.2rem; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>超实用的CSS样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">//去掉webkit的滚动条——display: none;</div><div class=\"line\">//其他参数</div><div class=\"line\">::-webkit-scrollba //滚动条整体部分</div><div class=\"line\">::-webkit-scrollbar-thumb   //滚动条内的小方块</div><div class=\"line\">::-webkit-scrollbar-track   //滚动条轨道</div><div class=\"line\">::-webkit-scrollbar-button  //滚动条轨道两端按钮</div><div class=\"line\">::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道</div><div class=\"line\">::-webkit-scrollbar-corner       //边角，两个滚动条交汇处</div><div class=\"line\">::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</div><div class=\"line\"></div><div class=\"line\">// 禁止长按链接与图片弹出菜单</div><div class=\"line\">a,img &#123; -webkit-touch-callout: none &#125;    </div><div class=\"line\"></div><div class=\"line\">// 禁止ios和android用户选中文字</div><div class=\"line\">html,body &#123;-webkit-user-select:none; user-select: none; &#125;</div><div class=\"line\"></div><div class=\"line\">// 改变输入框placeholder的颜色值</div><div class=\"line\">::-webkit-input-placeholder &#123; /* WebKit browsers */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">:-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">::-moz-placeholder &#123; /* Mozilla Firefox 19+ */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">:-ms-input-placeholder &#123; /* Internet Explorer 10+ */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">input:focus::-webkit-input-placeholder&#123; color:#999; &#125;</div><div class=\"line\"></div><div class=\"line\">// android上去掉语音输入按钮</div><div class=\"line\">input::-webkit-input-speech-button &#123;display: none&#125;</div><div class=\"line\"></div><div class=\"line\">// 阻止windows Phone的默认触摸事件</div><div class=\"line\">/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/</div><div class=\"line\">html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消input在ios下，输入的时候英文首字母的默认大写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"off\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>手机拍照和上传图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持</div><div class=\"line\">&lt;input type=&quot;file&quot; accept=&quot;images/*&quot; /&gt;</div><div class=\"line\">&lt;input type=&quot;file&quot; accept=&quot;video/*&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>屏幕旋转的事件和样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">//JS处理</div><div class=\"line\">function orientInit()&#123;</div><div class=\"line\">\tvar orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?&apos;landscape&apos;:&apos;portrait&apos;;</div><div class=\"line\">\tif(orientChk ==&apos;lapdscape&apos;)&#123;</div><div class=\"line\">\t\t//这里是横屏下需要执行的事件</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\t//这里是竖屏下需要执行的事件</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">orientInit();</div><div class=\"line\">window.addEventListener(&apos;onorientationchange&apos; in window?&apos;orientationchange&apos;:&apos;resize&apos;, function()&#123;</div><div class=\"line\">\tsetTimeout(orientInit, 100);</div><div class=\"line\">&#125;,false)</div><div class=\"line\"></div><div class=\"line\">//CSS处理</div><div class=\"line\">//竖屏时样式</div><div class=\"line\">@media all and (orientation:portrait)&#123;   &#125;</div><div class=\"line\">//横屏时样式</div><div class=\"line\">@media all and (orientation:landscape)&#123;   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>audio元素和video元素在ios和andriod中无法自动播放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">//音频，写法一</div><div class=\"line\">&lt;audio src=&quot;music/bg.mp3&quot; autoplay loop controls&gt;你的浏览器还不支持哦&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">//音频，写法二</div><div class=\"line\">&lt;audio controls=&quot;controls&quot;&gt;</div><div class=\"line\">\t&lt;source src=&quot;music/bg.ogg&quot; type=&quot;audio/ogg&quot;&gt;&lt;/source&gt;</div><div class=\"line\">\t&lt;source src=&quot;music/bg.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/source&gt;</div><div class=\"line\">\t优先播放音乐bg.ogg，不支持在播放bg.mp3</div><div class=\"line\">&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">//JS绑定自动播放（操作window时，播放音乐）</div><div class=\"line\">$(window).one(&apos;touchstart&apos;, function()&#123;</div><div class=\"line\">\tmusic.play();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">//微信下兼容处理</div><div class=\"line\">document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123;</div><div class=\"line\">    music.play();</div><div class=\"line\">&#125;, false);</div><div class=\"line\"></div><div class=\"line\">//小结</div><div class=\"line\">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常</div><div class=\"line\">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间</div></pre></td></tr></table></figure>\n</li>\n<li><p>重力感应事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 运用HTML5的deviceMotion，调用重力感应事件</div><div class=\"line\">if(window.DeviceMotionEvent)&#123;</div><div class=\"line\">\tdocument.addEventListener(&apos;devicemotion&apos;, deviceMotionHandler, false)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var speed = 30;</div><div class=\"line\">var x = y = z = lastX = lastY = lastZ = 0;</div><div class=\"line\">function deviceMotionHandler(eventData)&#123;</div><div class=\"line\">\tvar acceleration = event.accelerationIncludingGravity;</div><div class=\"line\">\tx = acceleration.x;</div><div class=\"line\">\ty = acceleration.y;</div><div class=\"line\">\tz = acceleration.z;</div><div class=\"line\">\tif(Math.abs(x-lastX)&gt;speed || Math.abs(y-lastY)&gt;speed || Math.abs(z-lastZ)&gt;speed )&#123;</div><div class=\"line\">\t\t//这里是摇动后要执行的方法</div><div class=\"line\">\t\tyaoAfter();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tlastX = x;</div><div class=\"line\">\tlastY = y;</div><div class=\"line\">\tlastZ = z;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function yaoAfter()&#123;</div><div class=\"line\">\t//do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//说明：说见案例摇一摇效果中yao.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理</div><div class=\"line\">if (typeof(WeixinJSBridge) == &quot;undefined&quot;) &#123;</div><div class=\"line\">\tdocument.addEventListener(&quot;WeixinJSBridgeReady&quot;, function (e) &#123;</div><div class=\"line\">\t    setTimeout(function()&#123;</div><div class=\"line\">\t\t    WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123;</div><div class=\"line\">\t\t\t    alert(JSON.stringify(res));</div><div class=\"line\">\t\t    &#125;)</div><div class=\"line\">\t    &#125;, 0)</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    setTimeout(function()&#123;</div><div class=\"line\">\t    WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123;</div><div class=\"line\">\t\t    alert(JSON.stringify(res));</div><div class=\"line\">\t    &#125;)</div><div class=\"line\">    &#125;, 0)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小</div><div class=\"line\">body &#123; -webkit-text-size-adjust:100%!important; &#125;</div><div class=\"line\"></div><div class=\"line\">//最好的解决方案：最好使用rem或百分比布局</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位的坑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//fixed定位</div><div class=\"line\">//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</div><div class=\"line\">//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</div><div class=\"line\">//3.ios4下不支持position:fixed</div><div class=\"line\">//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：</div><div class=\"line\">&lt;div id=&quot;wrapper&quot;&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">               &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">               .....</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;script src=&quot;iscroll.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tvar myscroll;</div><div class=\"line\">\tfunction loaded()&#123;</div><div class=\"line\">\t\tmyscroll=new iScroll(&quot;wrapper&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twindow.addEventListener(&quot;DOMContentLoaded&quot;,loaded,false);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//position定位</div><div class=\"line\">//Android下弹出软键盘弹出时，影响absolute元素定位</div><div class=\"line\">//解决方案:</div><div class=\"line\">var ua = navigator.userAgent.indexOf(&apos;Android&apos;);</div><div class=\"line\">if(ua&gt;-1)&#123;</div><div class=\"line\">\t$(&apos;.ipt&apos;).on(&apos;focus&apos;, function()&#123;</div><div class=\"line\">\t\t$(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;hidden&apos;&#125;)</div><div class=\"line\">\t&#125;).on(&apos;blur&apos;, function()&#123;</div><div class=\"line\">\t\t$(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;visible&apos;&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>播放视频不全屏</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">1.ios7+支持自动播放</div><div class=\"line\">2.支持Airplay的设备（如：音箱、Apple TV)播放</div><div class=\"line\">x-webkit-airplay=\"true\"</div><div class=\"line\">3.播放视频不全屏</div><div class=\"line\">webkit-playsinline=\"true\"</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">x-webkit-airplay</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"auto\"</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>JS判断设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function deviceType()&#123;</div><div class=\"line\">\tvar ua = navigator.userAgent;</div><div class=\"line\">\tvar agent = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;];</div><div class=\"line\">\tfor(var i=0; i&lt;len,len = agent.length; i++)&#123;</div><div class=\"line\">\t\tif(ua.indexOf(agent[i])&gt;0)&#123;\t\t\t</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">deviceType();</div><div class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</div><div class=\"line\">\tdeviceType();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>JS判断微信浏览器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function isWeixin()&#123;</div><div class=\"line\">\tvar ua = navigator.userAgent.toLowerCase();</div><div class=\"line\">\tif(ua.match(/MicroMessenger/i)==&apos;micromessenger&apos;)&#123;</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\treturn false;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>android 2.3 bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</div><div class=\"line\">//2.after和before伪类无法使用动画animation</div><div class=\"line\">//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值</div><div class=\"line\">//4.translate百分比的写法和scale在一起会导致失效，例如：</div><div class=\"line\">-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</div></pre></td></tr></table></figure>\n</li>\n<li><p>android 4.x bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写</div><div class=\"line\">//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</div><div class=\"line\">//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</div><div class=\"line\">//4.android无法同时播放多音频audio</div></pre></td></tr></table></figure>\n</li>\n<li><p>消除transition闪屏</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.css</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-transform-style</span>: preserve-<span class=\"number\">3</span>d;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">1000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启硬件加速</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。</div><div class=\"line\">.css &#123;</div><div class=\"line\">\t-webkit-transform: translate3d(0,0,0);</div><div class=\"line\">\t-moz-transform: translate3d(0,0,0);</div><div class=\"line\">\t-ms-transform: translate3d(0,0,0);</div><div class=\"line\">\ttransform: translate3d(0,0,0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>渲染优化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.禁止使用iframe（阻塞父文档onload事件）</div><div class=\"line\">//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</div><div class=\"line\">//使用CSS3代码代替JS动画；</div><div class=\"line\">//开启GPU加速；</div><div class=\"line\">//使用base64位编码图片(不小图而言，大图不建议使用)</div><div class=\"line\">\t// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：</div><div class=\"line\">\t//1.减少HTTP请求；</div><div class=\"line\">\t//2.避免文件跨域；</div><div class=\"line\">\t//3.修改及时生效；</div></pre></td></tr></table></figure>\n</li>\n<li><p>腾讯方案</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> autoScale = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ratio = <span class=\"number\">320</span>/<span class=\"number\">504</span>,   <span class=\"comment\">//这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）</span></div><div class=\"line\">        winW = <span class=\"built_in\">document</span>.getElement.clientWidth,</div><div class=\"line\">        winH = <span class=\"built_in\">document</span>.getElement.clientHeight,</div><div class=\"line\">        ratio2 = winW/winH,</div><div class=\"line\">        scale;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ratio&lt;ratio2)&#123;</div><div class=\"line\">        scale = (winH/<span class=\"number\">504</span>).toString().substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        scale = (winW/<span class=\"number\">320</span>).toString().substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>);  </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cssText = <span class=\"string\">'-webkit-transform: scale('</span>+scale+<span class=\"string\">');-webkit-transform-origin: top; opacity:1;'</span>  </div><div class=\"line\">    $(<span class=\"string\">'.wrap'</span>).attr(<span class=\"string\">'style'</span>, cssText);</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.clientWidth/<span class=\"built_in\">document</span>.documentElement.clientHeight !== <span class=\"number\">320</span>/<span class=\"number\">504</span>)&#123;</div><div class=\"line\">        autoScale();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">'.page'</span>).css(&#123;<span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"number\">300</span>)  <span class=\"comment\">//添加一定时长以确保宽高获取正确</span></div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>?<span class=\"string\">'orientationchange'</span>:<span class=\"string\">'resize'</span>, autoScale, <span class=\"literal\">false</span>)&#123;</div><div class=\"line\">        detectOrientatioin();</div><div class=\"line\">&#125;   <span class=\"comment\">//切换横竖屏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detectOrientatioin</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.orientation==<span class=\"number\">180</span> || <span class=\"built_in\">window</span>.orientation==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//竖屏</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.orientation==<span class=\"number\">90</span> || <span class=\"built_in\">window</span>.orientation==<span class=\"number\">-90</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//横屏</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####常用的移动端框架<br>zepto.js</p>\n<pre><code>- [官网](http://zeptojs.com/)\n- [中文网](http://www.css88.com/doc/zeptojs_api/)\n- [浏览器检测](https://github.com/madrobby/zepto/blob/master/src/detect.js)\n- [tap事件](https://github.com/madrobby/zepto/blob/master/src/touch.js)\n</code></pre><h1 id=\"2-主要包含以下几大职能：\"><a href=\"#2-主要包含以下几大职能：\" class=\"headerlink\" title=\"2. 主要包含以下几大职能：\"></a>2. 主要包含以下几大职能：</h1><pre><code>1. H5社区富交互动画\n2. WebApp和端交互\n3. 社区后台功能与交互\n</code></pre><h1 id=\"3-技术：\"><a href=\"#3-技术：\" class=\"headerlink\" title=\"3. 技术：\"></a>3. 技术：</h1><pre><code>## H5 端：\n第一版：（jq || zepto) + less + gulp\n第二版：react + less + webpack\n前端规范:\nES6 + webpack + babel\n请求方式： 统一的请求中间件\n唤起app: 统一的中间页服务 + iframe 请求 schema\n</code></pre><h1 id=\"4-准备实践和产出\"><a href=\"#4-准备实践和产出\" class=\"headerlink\" title=\"4. 准备实践和产出\"></a>4. 准备实践和产出</h1><pre><code>1. 唤起app功能组件\n2. 请求中间件\n2. 可视化h5编辑器 ( 基于reactjs )\n3. 小型社区H5组件库 （ 基于reactjs ） \n</code></pre><h3 id=\"唤起app功能组件\"><a href=\"#唤起app功能组件\" class=\"headerlink\" title=\"唤起app功能组件\"></a>唤起app功能组件</h3><p>以下为思路，后期封装成库组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;a[href^=&apos;schema://&apos;]&quot;).on(&apos;click&apos;,function(e)&#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    if(isWeixinBrowser() || isQQBrowser())&#123;</div><div class=\"line\">        $(&apos;.layer&apos;).show(); //友好的提示页面</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        if(isAndroid)&#123;</div><div class=\"line\">            //android</div><div class=\"line\">            </div><div class=\"line\">            //此操作会调起app并阻止接下来的js执行</div><div class=\"line\">            $(&apos;body&apos;).append(&quot;&lt;iframe src=&apos;schema://openapp&apos; style=&apos;display:none&apos; target=&apos;&apos; &gt;&lt;/iframe&gt;&quot;);</div><div class=\"line\"></div><div class=\"line\">            //没有安装应用会执行下面的语句</div><div class=\"line\">            setTimeout(function()&#123;window.location = &apos;http://www.yourdlurl.com/download.html&apos;&#125;,600);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            //ios</div><div class=\"line\">            window.location = &apos;schema://openapp&apos;;</div><div class=\"line\">            setTimeout(function()&#123;window.location = &apos;itms-apps://itunes.apple.com/app/idXXXXXXX&apos;&#125;,25);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">function isWeixinBrowser() &#123;</div><div class=\"line\">        return (/micromessenger/.test(ua)) ? true : false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">function isQQBrowser() &#123;</div><div class=\"line\">    return (ua.match(/QQ/i) == &quot;qq&quot;) ? true : false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"请求中间件\"><a href=\"#请求中间件\" class=\"headerlink\" title=\"请求中间件\"></a>请求中间件</h3><p>   这块要商量下，暂时不出！</p>\n<h3 id=\"可视化h5编辑器\"><a href=\"#可视化h5编辑器\" class=\"headerlink\" title=\"可视化h5编辑器\"></a>可视化h5编辑器</h3><pre><code>非前端人员用一张图就可以完成H5专题页，前端er只推护组件与功能，不重复编码\n（个人理念：提供服务，而不是提供劳动力）\n</code></pre><p>   DOME展示</p>\n<h3 id=\"小型社区H5组件库\"><a href=\"#小型社区H5组件库\" class=\"headerlink\" title=\"小型社区H5组件库\"></a>小型社区H5组件库</h3><pre><code>社区h5的业务其实很简单，一次开发的页面没有几页，共用的组件也很多，可提取公共组件\n</code></pre><p>   DOME展示</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>   #提供服务，而不是提供劳动力</p>\n","excerpt":"","more":"<h3 id=\"1-H5项目常见问题及注意事项\"><a href=\"#1-H5项目常见问题及注意事项\" class=\"headerlink\" title=\"1. H5项目常见问题及注意事项\"></a>1. H5项目常见问题及注意事项</h3><p>####Meta基础知识：</p>\n<ul>\n<li><p>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一、HTML页面结构</span></div><div class=\"line\">&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span> /&gt;</div><div class=\"line\"><span class=\"comment\">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></div><div class=\"line\"><span class=\"comment\">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span></div><div class=\"line\"><span class=\"comment\">// initial-scale    默认缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></div><div class=\"line\"><span class=\"comment\">// user-scalable    是否允许手动缩放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//二、JS动态判断</span></div><div class=\"line\"><span class=\"keyword\">var</span> phoneWidth =  <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.screen.width);</div><div class=\"line\"><span class=\"keyword\">var</span> phoneScale = phoneWidth/<span class=\"number\">640</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> ua = navigator.userAgent;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua))&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> version = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(version&gt;<span class=\"number\">2.3</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, minimum-scale = '</span>+phoneScale+<span class=\"string\">', maximum-scale = '</span>+phoneScale+<span class=\"string\">', target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\"&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>H5空白页基本meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 设置缩放 --&gt;</div><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot; /&gt;</div><div class=\"line\">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</div><div class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</div><div class=\"line\">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</div><div class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</div><div class=\"line\">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</div><div class=\"line\">&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no, email=no&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>PC端基础meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 页面关键词--&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;</div><div class=\"line\">&lt;!-- 页面描述--&gt;</div><div class=\"line\">&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;</div><div class=\"line\">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;</div><div class=\"line\">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">    all：文件将被检索，且页面上的链接可以被查询；</div><div class=\"line\">    none：文件将不被检索，且页面上的链接不可以被查询；</div><div class=\"line\">    index：文件将被检索；</div><div class=\"line\">    follow：页面上的链接可以被查询；</div><div class=\"line\">    noindex：文件将不被检索；</div><div class=\"line\">    nofollow：页面上的链接不可以被查询。</div><div class=\"line\"> --&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt;</div><div class=\"line\"> &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面缓存设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 清除缓存 --&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他meta标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</div><div class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</div><div class=\"line\">&lt;!-- 避免IE使用兼容模式 --&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class=\"line\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</div><div class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div><div class=\"line\">&lt;!-- 微软的老式浏览器 --&gt;</div><div class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</div><div class=\"line\">&lt;!-- uc强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class=\"line\">&lt;!-- UC强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div><div class=\"line\">&lt;!-- QQ强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</div><div class=\"line\">&lt;!-- UC应用模式 --&gt;</div><div class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</div><div class=\"line\">&lt;!-- QQ应用模式 --&gt;</div><div class=\"line\">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</div><div class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</div><div class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;meta name=&quot;author&quot; content=&quot;author name&quot; /&gt; &lt;!-- 定义网页作者 --&gt;</div><div class=\"line\">&lt;meta name=&quot;google&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;googlebot&quot; content=&quot;index,follow&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;verify&quot; content=&quot;index,follow&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####常见问题：</p>\n<ul>\n<li><p>移动端如何定义字体font-family</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ --------------------------------------中文字体的英文名称</div><div class=\"line\">@ 宋体      SimSun</div><div class=\"line\">@ 黑体      SimHei</div><div class=\"line\">@ 微信雅黑   Microsoft Yahei</div><div class=\"line\">@ 微软正黑体 Microsoft JhengHei</div><div class=\"line\">@ 新宋体    NSimSun</div><div class=\"line\">@ 新细明体  MingLiU</div><div class=\"line\">@ 细明体    MingLiU</div><div class=\"line\">@ 标楷体    DFKai-SB</div><div class=\"line\">@ 仿宋     FangSong</div><div class=\"line\">@ 楷体     KaiTi</div><div class=\"line\">@ 仿宋_GB2312  FangSong_GB2312</div><div class=\"line\">@ 楷体_GB2312  KaiTi_GB2312  </div><div class=\"line\">@</div><div class=\"line\">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</div><div class=\"line\"></div><div class=\"line\">body &#123; <span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">Yahei</span>,<span class=\"selector-tag\">SimSun</span>,<span class=\"selector-tag\">Helvetica</span>; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打电话发短信写邮件怎么实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 一、打电话</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:0755-10086\"</span>&gt;</span>打电话给:0755-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">//  二、发短信，winphone系统无效</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">// 三、写邮件</div><div class=\"line\">//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&amp;\"开头</div><div class=\"line\">//1.普通邮件</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com;384900096@qq.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//5.包含主题，用?subject=</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?subject=邮件主题\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//7.内容包含链接，含http(s)://等的文本自动转化为链接</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=http://www.baidu.com\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//8.内容包含图片（PC不支持）</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' /&gt;\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">//9.完整示例</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' /&gt;\"</span>&gt;</span>点击我发邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端touch事件（区分webkit和winphone）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */</div><div class=\"line\">// 以下支持webkit</div><div class=\"line\">touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class=\"line\">touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</div><div class=\"line\">touchend——当手指离开屏幕时触发</div><div class=\"line\">touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</div><div class=\"line\"></div><div class=\"line\">//TouchEvent说明：</div><div class=\"line\">touches：屏幕上所有手指的信息</div><div class=\"line\">targetTouches：手指在目标区域的手指信息</div><div class=\"line\">changedTouches：最近一次触发该事件的手指信息</div><div class=\"line\">touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</div><div class=\"line\"></div><div class=\"line\">//参数信息(changedTouches[0])</div><div class=\"line\">clientX、clientY在显示区的坐标</div><div class=\"line\">target：当前元素</div><div class=\"line\"></div><div class=\"line\">//事件响应顺序</div><div class=\"line\">ontouchstart  &gt; ontouchmove  &gt; ontouchend &gt; onclick</div><div class=\"line\"></div><div class=\"line\">// 以下支持winphone 8</div><div class=\"line\">MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class=\"line\">MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html&#123;-ms-touch-action: none;&#125;可以阻止默认情况的发生：阻止页面滚动</div><div class=\"line\">MSPointerUp——当手指离开屏幕时触发</div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端click屏幕产生200-300ms的延时响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</div><div class=\"line\"></div><div class=\"line\">以下是历史原因，来源一个公司内一个同事的分享：</div><div class=\"line\">2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</div><div class=\"line\"></div><div class=\"line\">双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</div><div class=\"line\"></div><div class=\"line\">原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</div><div class=\"line\"></div><div class=\"line\">//解决方案：</div><div class=\"line\">fastclick可以解决在手机上点击事件的300ms延迟</div><div class=\"line\">zepto的touch模块，tap事件也是为了解决在click的延迟问题</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rentina显示屏原理及设计方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。</div><div class=\"line\">在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。</div><div class=\"line\">那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</div><div class=\"line\"></div><div class=\"line\">//例如图片宽高为：200px*200px，那么写法如下</div><div class=\"line\">.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;</div><div class=\"line\">//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</div><div class=\"line\">.css&#123;font-size:20px&#125;</div><div class=\"line\"></div><div class=\"line\">//image-set设计Rentina背景图</div><div class=\"line\">image-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。</div><div class=\"line\">.css &#123;</div><div class=\"line\">\tbackground: url(images/bg.jpg) no-repeat center;</div><div class=\"line\">\tbackground: -webkit-image-set(</div><div class=\"line\">\turl(images/bg.jpg) 1x,     //支持image-set普通屏</div><div class=\"line\">\turl(images/bg-2x.jpg) 2x); //支持image-set的Rentinan</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>点击元素产生背景或边框怎么去掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</div><div class=\"line\">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</div><div class=\"line\">//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;去掉；</div><div class=\"line\">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签</div><div class=\"line\">a,button,input,textarea &#123;</div><div class=\"line\">\t-webkit-tap-highlight-color: rgba(0,0,0,0);</div><div class=\"line\">\t-webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</div><div class=\"line\">&#125;   </div><div class=\"line\">// 也可以</div><div class=\"line\">* &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;</div><div class=\"line\">//winphone下</div><div class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>美化表单元素</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//一、使用appearance改变webkit浏览器的默认外观</div><div class=\"line\">input,select &#123; -webkit-appearance:none; appearance: none; &#125;</div><div class=\"line\"></div><div class=\"line\">//二、winphone下，使用伪元素改变表单元素默认外观</div><div class=\"line\">//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</div><div class=\"line\">select::-ms-expand &#123; display:none; &#125;</div><div class=\"line\"></div><div class=\"line\">//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</div><div class=\"line\">input[type=radio]::-ms-check,</div><div class=\"line\">input[type=checkbox]::-ms-check &#123; display:none; &#125;</div><div class=\"line\"></div><div class=\"line\">//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</div><div class=\"line\">input[type=text]::-ms-clear,</div><div class=\"line\">input[type=tel]::-ms-clear,</div><div class=\"line\">input[type=number]::-ms-clear &#123; display:none; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>移动端字体单位font-size选择px还是rem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如需适配多种移动设备，建议使用rem。以下为参考值：</div><div class=\"line\">html &#123; font-size: 62.5%; &#125;   //10*16 = 62.5%</div><div class=\"line\">//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</div><div class=\"line\">body &#123; font-size:12px; font-size:1.2rem; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>超实用的CSS样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">//去掉webkit的滚动条——display: none;</div><div class=\"line\">//其他参数</div><div class=\"line\">::-webkit-scrollba //滚动条整体部分</div><div class=\"line\">::-webkit-scrollbar-thumb   //滚动条内的小方块</div><div class=\"line\">::-webkit-scrollbar-track   //滚动条轨道</div><div class=\"line\">::-webkit-scrollbar-button  //滚动条轨道两端按钮</div><div class=\"line\">::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道</div><div class=\"line\">::-webkit-scrollbar-corner       //边角，两个滚动条交汇处</div><div class=\"line\">::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</div><div class=\"line\"></div><div class=\"line\">// 禁止长按链接与图片弹出菜单</div><div class=\"line\">a,img &#123; -webkit-touch-callout: none &#125;    </div><div class=\"line\"></div><div class=\"line\">// 禁止ios和android用户选中文字</div><div class=\"line\">html,body &#123;-webkit-user-select:none; user-select: none; &#125;</div><div class=\"line\"></div><div class=\"line\">// 改变输入框placeholder的颜色值</div><div class=\"line\">::-webkit-input-placeholder &#123; /* WebKit browsers */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">:-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">::-moz-placeholder &#123; /* Mozilla Firefox 19+ */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">:-ms-input-placeholder &#123; /* Internet Explorer 10+ */</div><div class=\"line\">color: #999; &#125;</div><div class=\"line\">input:focus::-webkit-input-placeholder&#123; color:#999; &#125;</div><div class=\"line\"></div><div class=\"line\">// android上去掉语音输入按钮</div><div class=\"line\">input::-webkit-input-speech-button &#123;display: none&#125;</div><div class=\"line\"></div><div class=\"line\">// 阻止windows Phone的默认触摸事件</div><div class=\"line\">/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/</div><div class=\"line\">html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消input在ios下，输入的时候英文首字母的默认大写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"off\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>手机拍照和上传图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持</div><div class=\"line\">&lt;input type=&quot;file&quot; accept=&quot;images/*&quot; /&gt;</div><div class=\"line\">&lt;input type=&quot;file&quot; accept=&quot;video/*&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>屏幕旋转的事件和样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">//JS处理</div><div class=\"line\">function orientInit()&#123;</div><div class=\"line\">\tvar orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?&apos;landscape&apos;:&apos;portrait&apos;;</div><div class=\"line\">\tif(orientChk ==&apos;lapdscape&apos;)&#123;</div><div class=\"line\">\t\t//这里是横屏下需要执行的事件</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\t//这里是竖屏下需要执行的事件</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">orientInit();</div><div class=\"line\">window.addEventListener(&apos;onorientationchange&apos; in window?&apos;orientationchange&apos;:&apos;resize&apos;, function()&#123;</div><div class=\"line\">\tsetTimeout(orientInit, 100);</div><div class=\"line\">&#125;,false)</div><div class=\"line\"></div><div class=\"line\">//CSS处理</div><div class=\"line\">//竖屏时样式</div><div class=\"line\">@media all and (orientation:portrait)&#123;   &#125;</div><div class=\"line\">//横屏时样式</div><div class=\"line\">@media all and (orientation:landscape)&#123;   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>audio元素和video元素在ios和andriod中无法自动播放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">//音频，写法一</div><div class=\"line\">&lt;audio src=&quot;music/bg.mp3&quot; autoplay loop controls&gt;你的浏览器还不支持哦&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">//音频，写法二</div><div class=\"line\">&lt;audio controls=&quot;controls&quot;&gt;</div><div class=\"line\">\t&lt;source src=&quot;music/bg.ogg&quot; type=&quot;audio/ogg&quot;&gt;&lt;/source&gt;</div><div class=\"line\">\t&lt;source src=&quot;music/bg.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/source&gt;</div><div class=\"line\">\t优先播放音乐bg.ogg，不支持在播放bg.mp3</div><div class=\"line\">&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">//JS绑定自动播放（操作window时，播放音乐）</div><div class=\"line\">$(window).one(&apos;touchstart&apos;, function()&#123;</div><div class=\"line\">\tmusic.play();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">//微信下兼容处理</div><div class=\"line\">document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123;</div><div class=\"line\">    music.play();</div><div class=\"line\">&#125;, false);</div><div class=\"line\"></div><div class=\"line\">//小结</div><div class=\"line\">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常</div><div class=\"line\">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间</div></pre></td></tr></table></figure>\n</li>\n<li><p>重力感应事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 运用HTML5的deviceMotion，调用重力感应事件</div><div class=\"line\">if(window.DeviceMotionEvent)&#123;</div><div class=\"line\">\tdocument.addEventListener(&apos;devicemotion&apos;, deviceMotionHandler, false)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var speed = 30;</div><div class=\"line\">var x = y = z = lastX = lastY = lastZ = 0;</div><div class=\"line\">function deviceMotionHandler(eventData)&#123;</div><div class=\"line\">\tvar acceleration = event.accelerationIncludingGravity;</div><div class=\"line\">\tx = acceleration.x;</div><div class=\"line\">\ty = acceleration.y;</div><div class=\"line\">\tz = acceleration.z;</div><div class=\"line\">\tif(Math.abs(x-lastX)&gt;speed || Math.abs(y-lastY)&gt;speed || Math.abs(z-lastZ)&gt;speed )&#123;</div><div class=\"line\">\t\t//这里是摇动后要执行的方法</div><div class=\"line\">\t\tyaoAfter();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tlastX = x;</div><div class=\"line\">\tlastY = y;</div><div class=\"line\">\tlastZ = z;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function yaoAfter()&#123;</div><div class=\"line\">\t//do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//说明：说见案例摇一摇效果中yao.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理</div><div class=\"line\">if (typeof(WeixinJSBridge) == &quot;undefined&quot;) &#123;</div><div class=\"line\">\tdocument.addEventListener(&quot;WeixinJSBridgeReady&quot;, function (e) &#123;</div><div class=\"line\">\t    setTimeout(function()&#123;</div><div class=\"line\">\t\t    WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123;</div><div class=\"line\">\t\t\t    alert(JSON.stringify(res));</div><div class=\"line\">\t\t    &#125;)</div><div class=\"line\">\t    &#125;, 0)</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    setTimeout(function()&#123;</div><div class=\"line\">\t    WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123;</div><div class=\"line\">\t\t    alert(JSON.stringify(res));</div><div class=\"line\">\t    &#125;)</div><div class=\"line\">    &#125;, 0)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小</div><div class=\"line\">body &#123; -webkit-text-size-adjust:100%!important; &#125;</div><div class=\"line\"></div><div class=\"line\">//最好的解决方案：最好使用rem或百分比布局</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位的坑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//fixed定位</div><div class=\"line\">//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</div><div class=\"line\">//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</div><div class=\"line\">//3.ios4下不支持position:fixed</div><div class=\"line\">//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：</div><div class=\"line\">&lt;div id=&quot;wrapper&quot;&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">               &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">               .....</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;script src=&quot;iscroll.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tvar myscroll;</div><div class=\"line\">\tfunction loaded()&#123;</div><div class=\"line\">\t\tmyscroll=new iScroll(&quot;wrapper&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twindow.addEventListener(&quot;DOMContentLoaded&quot;,loaded,false);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//position定位</div><div class=\"line\">//Android下弹出软键盘弹出时，影响absolute元素定位</div><div class=\"line\">//解决方案:</div><div class=\"line\">var ua = navigator.userAgent.indexOf(&apos;Android&apos;);</div><div class=\"line\">if(ua&gt;-1)&#123;</div><div class=\"line\">\t$(&apos;.ipt&apos;).on(&apos;focus&apos;, function()&#123;</div><div class=\"line\">\t\t$(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;hidden&apos;&#125;)</div><div class=\"line\">\t&#125;).on(&apos;blur&apos;, function()&#123;</div><div class=\"line\">\t\t$(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;visible&apos;&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>播放视频不全屏</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</div><div class=\"line\">1.ios7+支持自动播放</div><div class=\"line\">2.支持Airplay的设备（如：音箱、Apple TV)播放</div><div class=\"line\">x-webkit-airplay=\"true\"</div><div class=\"line\">3.播放视频不全屏</div><div class=\"line\">webkit-playsinline=\"true\"</div><div class=\"line\">--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">x-webkit-airplay</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"auto\"</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>JS判断设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function deviceType()&#123;</div><div class=\"line\">\tvar ua = navigator.userAgent;</div><div class=\"line\">\tvar agent = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;];</div><div class=\"line\">\tfor(var i=0; i&lt;len,len = agent.length; i++)&#123;</div><div class=\"line\">\t\tif(ua.indexOf(agent[i])&gt;0)&#123;\t\t\t</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">deviceType();</div><div class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</div><div class=\"line\">\tdeviceType();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>JS判断微信浏览器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function isWeixin()&#123;</div><div class=\"line\">\tvar ua = navigator.userAgent.toLowerCase();</div><div class=\"line\">\tif(ua.match(/MicroMessenger/i)==&apos;micromessenger&apos;)&#123;</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\treturn false;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>android 2.3 bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</div><div class=\"line\">//2.after和before伪类无法使用动画animation</div><div class=\"line\">//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值</div><div class=\"line\">//4.translate百分比的写法和scale在一起会导致失效，例如：</div><div class=\"line\">-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</div></pre></td></tr></table></figure>\n</li>\n<li><p>android 4.x bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写</div><div class=\"line\">//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</div><div class=\"line\">//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</div><div class=\"line\">//4.android无法同时播放多音频audio</div></pre></td></tr></table></figure>\n</li>\n<li><p>消除transition闪屏</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.css</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-transform-style</span>: preserve-<span class=\"number\">3</span>d;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">1000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启硬件加速</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。</div><div class=\"line\">.css &#123;</div><div class=\"line\">\t-webkit-transform: translate3d(0,0,0);</div><div class=\"line\">\t-moz-transform: translate3d(0,0,0);</div><div class=\"line\">\t-ms-transform: translate3d(0,0,0);</div><div class=\"line\">\ttransform: translate3d(0,0,0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>渲染优化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.禁止使用iframe（阻塞父文档onload事件）</div><div class=\"line\">//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</div><div class=\"line\">//使用CSS3代码代替JS动画；</div><div class=\"line\">//开启GPU加速；</div><div class=\"line\">//使用base64位编码图片(不小图而言，大图不建议使用)</div><div class=\"line\">\t// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：</div><div class=\"line\">\t//1.减少HTTP请求；</div><div class=\"line\">\t//2.避免文件跨域；</div><div class=\"line\">\t//3.修改及时生效；</div></pre></td></tr></table></figure>\n</li>\n<li><p>腾讯方案</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> autoScale = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ratio = <span class=\"number\">320</span>/<span class=\"number\">504</span>,   <span class=\"comment\">//这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）</span></div><div class=\"line\">        winW = <span class=\"built_in\">document</span>.getElement.clientWidth,</div><div class=\"line\">        winH = <span class=\"built_in\">document</span>.getElement.clientHeight,</div><div class=\"line\">        ratio2 = winW/winH,</div><div class=\"line\">        scale;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ratio&lt;ratio2)&#123;</div><div class=\"line\">        scale = (winH/<span class=\"number\">504</span>).toString().substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        scale = (winW/<span class=\"number\">320</span>).toString().substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>);  </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cssText = <span class=\"string\">'-webkit-transform: scale('</span>+scale+<span class=\"string\">');-webkit-transform-origin: top; opacity:1;'</span>  </div><div class=\"line\">    $(<span class=\"string\">'.wrap'</span>).attr(<span class=\"string\">'style'</span>, cssText);</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.clientWidth/<span class=\"built_in\">document</span>.documentElement.clientHeight !== <span class=\"number\">320</span>/<span class=\"number\">504</span>)&#123;</div><div class=\"line\">        autoScale();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">'.page'</span>).css(&#123;<span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"number\">300</span>)  <span class=\"comment\">//添加一定时长以确保宽高获取正确</span></div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>?<span class=\"string\">'orientationchange'</span>:<span class=\"string\">'resize'</span>, autoScale, <span class=\"literal\">false</span>)&#123;</div><div class=\"line\">        detectOrientatioin();</div><div class=\"line\">&#125;   <span class=\"comment\">//切换横竖屏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detectOrientatioin</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.orientation==<span class=\"number\">180</span> || <span class=\"built_in\">window</span>.orientation==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//竖屏</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.orientation==<span class=\"number\">90</span> || <span class=\"built_in\">window</span>.orientation==<span class=\"number\">-90</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//横屏</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####常用的移动端框架<br>zepto.js</p>\n<pre><code>- [官网](http://zeptojs.com/)\n- [中文网](http://www.css88.com/doc/zeptojs_api/)\n- [浏览器检测](https://github.com/madrobby/zepto/blob/master/src/detect.js)\n- [tap事件](https://github.com/madrobby/zepto/blob/master/src/touch.js)\n</code></pre><h1 id=\"2-主要包含以下几大职能：\"><a href=\"#2-主要包含以下几大职能：\" class=\"headerlink\" title=\"2. 主要包含以下几大职能：\"></a>2. 主要包含以下几大职能：</h1><pre><code>1. H5社区富交互动画\n2. WebApp和端交互\n3. 社区后台功能与交互\n</code></pre><h1 id=\"3-技术：\"><a href=\"#3-技术：\" class=\"headerlink\" title=\"3. 技术：\"></a>3. 技术：</h1><pre><code>## H5 端：\n第一版：（jq || zepto) + less + gulp\n第二版：react + less + webpack\n前端规范:\nES6 + webpack + babel\n请求方式： 统一的请求中间件\n唤起app: 统一的中间页服务 + iframe 请求 schema\n</code></pre><h1 id=\"4-准备实践和产出\"><a href=\"#4-准备实践和产出\" class=\"headerlink\" title=\"4. 准备实践和产出\"></a>4. 准备实践和产出</h1><pre><code>1. 唤起app功能组件\n2. 请求中间件\n2. 可视化h5编辑器 ( 基于reactjs )\n3. 小型社区H5组件库 （ 基于reactjs ） \n</code></pre><h3 id=\"唤起app功能组件\"><a href=\"#唤起app功能组件\" class=\"headerlink\" title=\"唤起app功能组件\"></a>唤起app功能组件</h3><p>以下为思路，后期封装成库组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;a[href^=&apos;schema://&apos;]&quot;).on(&apos;click&apos;,function(e)&#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    if(isWeixinBrowser() || isQQBrowser())&#123;</div><div class=\"line\">        $(&apos;.layer&apos;).show(); //友好的提示页面</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        if(isAndroid)&#123;</div><div class=\"line\">            //android</div><div class=\"line\">            </div><div class=\"line\">            //此操作会调起app并阻止接下来的js执行</div><div class=\"line\">            $(&apos;body&apos;).append(&quot;&lt;iframe src=&apos;schema://openapp&apos; style=&apos;display:none&apos; target=&apos;&apos; &gt;&lt;/iframe&gt;&quot;);</div><div class=\"line\"></div><div class=\"line\">            //没有安装应用会执行下面的语句</div><div class=\"line\">            setTimeout(function()&#123;window.location = &apos;http://www.yourdlurl.com/download.html&apos;&#125;,600);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            //ios</div><div class=\"line\">            window.location = &apos;schema://openapp&apos;;</div><div class=\"line\">            setTimeout(function()&#123;window.location = &apos;itms-apps://itunes.apple.com/app/idXXXXXXX&apos;&#125;,25);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">function isWeixinBrowser() &#123;</div><div class=\"line\">        return (/micromessenger/.test(ua)) ? true : false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">function isQQBrowser() &#123;</div><div class=\"line\">    return (ua.match(/QQ/i) == &quot;qq&quot;) ? true : false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"请求中间件\"><a href=\"#请求中间件\" class=\"headerlink\" title=\"请求中间件\"></a>请求中间件</h3><p>   这块要商量下，暂时不出！</p>\n<h3 id=\"可视化h5编辑器\"><a href=\"#可视化h5编辑器\" class=\"headerlink\" title=\"可视化h5编辑器\"></a>可视化h5编辑器</h3><pre><code>非前端人员用一张图就可以完成H5专题页，前端er只推护组件与功能，不重复编码\n（个人理念：提供服务，而不是提供劳动力）\n</code></pre><p>   DOME展示</p>\n<h3 id=\"小型社区H5组件库\"><a href=\"#小型社区H5组件库\" class=\"headerlink\" title=\"小型社区H5组件库\"></a>小型社区H5组件库</h3><pre><code>社区h5的业务其实很简单，一次开发的页面没有几页，共用的组件也很多，可提取公共组件\n</code></pre><p>   DOME展示</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>   #提供服务，而不是提供劳动力</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-11-28T09:17:48.000Z","updated":"2016-11-28T09:17:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zot0008nxx3rsmj0b5c","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"一种为前端提供服务的后端模式(BFF)","date":"2016-12-19T02:23:25.000Z","_content":"\n> \b术语解释 BFF （ Backend for Frontend ）\n  1. BFF ( Backend for Frontend ) 意为前端专设一个服务端\n  2. 从底层服务抓取数据·组装·裁剪，然后提供给前端\n  3. BFF专为前端服务，要能够快速响应前端的变化，提供各种各样的数据\n\n![](/images/C6F003CB6AF935154F7AC9F21018273B.jpg)\n\n## 摘要\n\n> 由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。Sam Newman在一篇博客中这样解释到。\n\n## 正文\n\n由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。[Sam Newman](http://samnewman.io/patterns/architectural/bff/)在一篇博客中这样解释到。这篇博客描述了[一种API后端的模式](http://samnewman.io/patterns/architectural/bff/)，用来处理这种不同用户体验的设备之间的这种不协调。\n\n正如这位Thoughtworks的开发者Newman所言，一种解决方案是构建一个为所有类型的用户界面服务的通用的API后端。然而正是由于需求不同，这种方案在实践中意味着后端功能和复杂度的增加。同时，为了支持所有设备而做的变动也可能导致该方案成为拖累部署流程的瓶颈。根据Newman的经验，使用这种通用后端有时会导致一个专门的团队出现，进而导致问题增加。这种情况下，前端团队会有一个单独的团队需要去沟通，而这个单独的团队需要确定来自其他团队的需求的优先级。\n\nNewman见过的另外一种实际在用的方案是为每种用户体验提供一套API后端。\n从概念上讲，一个面向用户的应用会有两个组件组成，客户端组件和服务端组件，每个前端一个后端。为此，Phil Calçado在SoundCloud工作的时候还发明了一个术语：BFF。\n\n当使用BFF架构工作的时候，前后端由同一个团队来维护，后端很自然地会和某种特定的用户界面紧耦合。当处理同种类型的用户体验，但是不同的平台（例如Android和iOS），Newman描述了两种不同的处理方式：每个平台提供一套BFF和每种类型用户界面提供一套BFF。\n\nNewman更倾向于采用一种严格的模型，为每个平台提供一套BFF，即Android和iOS各一套。这种方式有一个令人担忧的问题，就是需要冒着不同平台的BFF之间大量重复的风险，例如，相同类型的聚合或者与下游服务交互的相似代码。但是，他并不太担心这个，因为这种重复已经跨越了不同的流程。恰恰相反，合并成一种通用的聚合Edge API服务才是他想警告的。因为事实已经反复证明，这种模式会导致高度膨胀的代码。\n\n让所有类型的客户端共用一套BFF，即Android和iOS共用一套BFF，是他在SoundCloud看到的实际使用中的方式。他对这种方式的担心就是，更多类型的客户端会导致整个BFF膨胀的风险增加。\n\n同样在Thoughtworks工作的[Lukasz Plotnicki](https://www.thoughtworks.com/profiles/lukasz-plotnicki)，最近写了一篇博客，专门论述了[SoundCloud在从单体Rails应用转向微服务的过程中对BFF的使用](https://www.thoughtworks.com/insights/blog/bff-soundcloud)。\n\n在Thoughtworks最近的Technology Radar中，BFF作为值得推行的技术而被提及。\n\n查看英文原文：[A Pattern for API Backends Serving Frontends](http://www.infoq.com/news/2015/12/bff-backend-frontend-pattern)\n","source":"_posts/一种为前端提供服务的后端模式-BFF.md","raw":"---\ntitle: 一种为前端提供服务的后端模式(BFF)\ndate: 2016-12-19 10:23:25\ntags: BFF\n---\n\n> \b术语解释 BFF （ Backend for Frontend ）\n  1. BFF ( Backend for Frontend ) 意为前端专设一个服务端\n  2. 从底层服务抓取数据·组装·裁剪，然后提供给前端\n  3. BFF专为前端服务，要能够快速响应前端的变化，提供各种各样的数据\n\n![](/images/C6F003CB6AF935154F7AC9F21018273B.jpg)\n\n## 摘要\n\n> 由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。Sam Newman在一篇博客中这样解释到。\n\n## 正文\n\n由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。[Sam Newman](http://samnewman.io/patterns/architectural/bff/)在一篇博客中这样解释到。这篇博客描述了[一种API后端的模式](http://samnewman.io/patterns/architectural/bff/)，用来处理这种不同用户体验的设备之间的这种不协调。\n\n正如这位Thoughtworks的开发者Newman所言，一种解决方案是构建一个为所有类型的用户界面服务的通用的API后端。然而正是由于需求不同，这种方案在实践中意味着后端功能和复杂度的增加。同时，为了支持所有设备而做的变动也可能导致该方案成为拖累部署流程的瓶颈。根据Newman的经验，使用这种通用后端有时会导致一个专门的团队出现，进而导致问题增加。这种情况下，前端团队会有一个单独的团队需要去沟通，而这个单独的团队需要确定来自其他团队的需求的优先级。\n\nNewman见过的另外一种实际在用的方案是为每种用户体验提供一套API后端。\n从概念上讲，一个面向用户的应用会有两个组件组成，客户端组件和服务端组件，每个前端一个后端。为此，Phil Calçado在SoundCloud工作的时候还发明了一个术语：BFF。\n\n当使用BFF架构工作的时候，前后端由同一个团队来维护，后端很自然地会和某种特定的用户界面紧耦合。当处理同种类型的用户体验，但是不同的平台（例如Android和iOS），Newman描述了两种不同的处理方式：每个平台提供一套BFF和每种类型用户界面提供一套BFF。\n\nNewman更倾向于采用一种严格的模型，为每个平台提供一套BFF，即Android和iOS各一套。这种方式有一个令人担忧的问题，就是需要冒着不同平台的BFF之间大量重复的风险，例如，相同类型的聚合或者与下游服务交互的相似代码。但是，他并不太担心这个，因为这种重复已经跨越了不同的流程。恰恰相反，合并成一种通用的聚合Edge API服务才是他想警告的。因为事实已经反复证明，这种模式会导致高度膨胀的代码。\n\n让所有类型的客户端共用一套BFF，即Android和iOS共用一套BFF，是他在SoundCloud看到的实际使用中的方式。他对这种方式的担心就是，更多类型的客户端会导致整个BFF膨胀的风险增加。\n\n同样在Thoughtworks工作的[Lukasz Plotnicki](https://www.thoughtworks.com/profiles/lukasz-plotnicki)，最近写了一篇博客，专门论述了[SoundCloud在从单体Rails应用转向微服务的过程中对BFF的使用](https://www.thoughtworks.com/insights/blog/bff-soundcloud)。\n\n在Thoughtworks最近的Technology Radar中，BFF作为值得推行的技术而被提及。\n\n查看英文原文：[A Pattern for API Backends Serving Frontends](http://www.infoq.com/news/2015/12/bff-backend-frontend-pattern)\n","slug":"一种为前端提供服务的后端模式-BFF","published":1,"updated":"2016-12-19T03:06:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zov0009nxx3nh5cudmq","content":"<blockquote>\n<p>\b术语解释 BFF （ Backend for Frontend ）</p>\n<ol>\n<li>BFF ( Backend for Frontend ) 意为前端专设一个服务端</li>\n<li>从底层服务抓取数据·组装·裁剪，然后提供给前端</li>\n<li>BFF专为前端服务，要能够快速响应前端的变化，提供各种各样的数据</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/C6F003CB6AF935154F7AC9F21018273B.jpg\" alt=\"\"></p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。Sam Newman在一篇博客中这样解释到。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。<a href=\"http://samnewman.io/patterns/architectural/bff/\" target=\"_blank\" rel=\"external\">Sam Newman</a>在一篇博客中这样解释到。这篇博客描述了<a href=\"http://samnewman.io/patterns/architectural/bff/\" target=\"_blank\" rel=\"external\">一种API后端的模式</a>，用来处理这种不同用户体验的设备之间的这种不协调。</p>\n<p>正如这位Thoughtworks的开发者Newman所言，一种解决方案是构建一个为所有类型的用户界面服务的通用的API后端。然而正是由于需求不同，这种方案在实践中意味着后端功能和复杂度的增加。同时，为了支持所有设备而做的变动也可能导致该方案成为拖累部署流程的瓶颈。根据Newman的经验，使用这种通用后端有时会导致一个专门的团队出现，进而导致问题增加。这种情况下，前端团队会有一个单独的团队需要去沟通，而这个单独的团队需要确定来自其他团队的需求的优先级。</p>\n<p>Newman见过的另外一种实际在用的方案是为每种用户体验提供一套API后端。<br>从概念上讲，一个面向用户的应用会有两个组件组成，客户端组件和服务端组件，每个前端一个后端。为此，Phil Calçado在SoundCloud工作的时候还发明了一个术语：BFF。</p>\n<p>当使用BFF架构工作的时候，前后端由同一个团队来维护，后端很自然地会和某种特定的用户界面紧耦合。当处理同种类型的用户体验，但是不同的平台（例如Android和iOS），Newman描述了两种不同的处理方式：每个平台提供一套BFF和每种类型用户界面提供一套BFF。</p>\n<p>Newman更倾向于采用一种严格的模型，为每个平台提供一套BFF，即Android和iOS各一套。这种方式有一个令人担忧的问题，就是需要冒着不同平台的BFF之间大量重复的风险，例如，相同类型的聚合或者与下游服务交互的相似代码。但是，他并不太担心这个，因为这种重复已经跨越了不同的流程。恰恰相反，合并成一种通用的聚合Edge API服务才是他想警告的。因为事实已经反复证明，这种模式会导致高度膨胀的代码。</p>\n<p>让所有类型的客户端共用一套BFF，即Android和iOS共用一套BFF，是他在SoundCloud看到的实际使用中的方式。他对这种方式的担心就是，更多类型的客户端会导致整个BFF膨胀的风险增加。</p>\n<p>同样在Thoughtworks工作的<a href=\"https://www.thoughtworks.com/profiles/lukasz-plotnicki\" target=\"_blank\" rel=\"external\">Lukasz Plotnicki</a>，最近写了一篇博客，专门论述了<a href=\"https://www.thoughtworks.com/insights/blog/bff-soundcloud\" target=\"_blank\" rel=\"external\">SoundCloud在从单体Rails应用转向微服务的过程中对BFF的使用</a>。</p>\n<p>在Thoughtworks最近的Technology Radar中，BFF作为值得推行的技术而被提及。</p>\n<p>查看英文原文：<a href=\"http://www.infoq.com/news/2015/12/bff-backend-frontend-pattern\" target=\"_blank\" rel=\"external\">A Pattern for API Backends Serving Frontends</a></p>\n","excerpt":"","more":"<blockquote>\n<p>\b术语解释 BFF （ Backend for Frontend ）</p>\n<ol>\n<li>BFF ( Backend for Frontend ) 意为前端专设一个服务端</li>\n<li>从底层服务抓取数据·组装·裁剪，然后提供给前端</li>\n<li>BFF专为前端服务，要能够快速响应前端的变化，提供各种各样的数据</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/C6F003CB6AF935154F7AC9F21018273B.jpg\" alt=\"\"></p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。Sam Newman在一篇博客中这样解释到。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>由于移动设备屏幕更小、数据规划有限以及需要更少的请求，移动端的Web体验与桌面端Web浏览器的体验在很多方面都有差异。移动设备需要的数据更少且常常不同于桌面端的需求，而且可能会提供其他的交互方式，例如通过条形码读码器。这就意味着，为了支持移动设备，我们需要向我们的API后端添加额外的功能。<a href=\"http://samnewman.io/patterns/architectural/bff/\">Sam Newman</a>在一篇博客中这样解释到。这篇博客描述了<a href=\"http://samnewman.io/patterns/architectural/bff/\">一种API后端的模式</a>，用来处理这种不同用户体验的设备之间的这种不协调。</p>\n<p>正如这位Thoughtworks的开发者Newman所言，一种解决方案是构建一个为所有类型的用户界面服务的通用的API后端。然而正是由于需求不同，这种方案在实践中意味着后端功能和复杂度的增加。同时，为了支持所有设备而做的变动也可能导致该方案成为拖累部署流程的瓶颈。根据Newman的经验，使用这种通用后端有时会导致一个专门的团队出现，进而导致问题增加。这种情况下，前端团队会有一个单独的团队需要去沟通，而这个单独的团队需要确定来自其他团队的需求的优先级。</p>\n<p>Newman见过的另外一种实际在用的方案是为每种用户体验提供一套API后端。<br>从概念上讲，一个面向用户的应用会有两个组件组成，客户端组件和服务端组件，每个前端一个后端。为此，Phil Calçado在SoundCloud工作的时候还发明了一个术语：BFF。</p>\n<p>当使用BFF架构工作的时候，前后端由同一个团队来维护，后端很自然地会和某种特定的用户界面紧耦合。当处理同种类型的用户体验，但是不同的平台（例如Android和iOS），Newman描述了两种不同的处理方式：每个平台提供一套BFF和每种类型用户界面提供一套BFF。</p>\n<p>Newman更倾向于采用一种严格的模型，为每个平台提供一套BFF，即Android和iOS各一套。这种方式有一个令人担忧的问题，就是需要冒着不同平台的BFF之间大量重复的风险，例如，相同类型的聚合或者与下游服务交互的相似代码。但是，他并不太担心这个，因为这种重复已经跨越了不同的流程。恰恰相反，合并成一种通用的聚合Edge API服务才是他想警告的。因为事实已经反复证明，这种模式会导致高度膨胀的代码。</p>\n<p>让所有类型的客户端共用一套BFF，即Android和iOS共用一套BFF，是他在SoundCloud看到的实际使用中的方式。他对这种方式的担心就是，更多类型的客户端会导致整个BFF膨胀的风险增加。</p>\n<p>同样在Thoughtworks工作的<a href=\"https://www.thoughtworks.com/profiles/lukasz-plotnicki\">Lukasz Plotnicki</a>，最近写了一篇博客，专门论述了<a href=\"https://www.thoughtworks.com/insights/blog/bff-soundcloud\">SoundCloud在从单体Rails应用转向微服务的过程中对BFF的使用</a>。</p>\n<p>在Thoughtworks最近的Technology Radar中，BFF作为值得推行的技术而被提及。</p>\n<p>查看英文原文：<a href=\"http://www.infoq.com/news/2015/12/bff-backend-frontend-pattern\">A Pattern for API Backends Serving Frontends</a></p>\n"},{"title":"前端开发流程","date":"2017-01-11T09:34:20.000Z","_content":"\n# 前端开发流程\n\n> 1. 此开发流程主要对前端人员的开发流程管理规范\n>\n> 2. 此流程是使用前端脚手架[yunle-cli](https://github.com/hexiao-o/yunle-template-gulp) 你可以自选其它脚手架，流程互通\n\n![开发流程图](/images/images1.png)\n\n## 项目发起\n\n   > 在一个H5项目发起，由产品发起产品项目或产品评审会\n\n在评审时，前端人员要对产品原型图和产品文档，弄不清楚交互逻辑，如有细节不清楚，在评审时向产品确认请楚，`后期开发时如遇评审时未了解清楚的地方及时和产品沟通`\n\n## 项目启动\n\n> 在项目启动前期，对H5页面所涉及与后台交互，如API接口事先与后台同学沟通\n\n### 前期沟能 --- API文档\n\n与后台同学沟通后我们会得到一份API文档，一般提供的文档会有两种类型，纯文本的doc文档类型 或 基于RAP的API文档管理的一个URL。（如开发期间API有所变化,应事先要通知双方）\n\n\n### 项目搭建\n例： 我们现要做达人申请H5项目\n#### 首先生成的项目骨架\n```\n  yunle init daren\n\n  > gulp\n    webpack\n    react\n    vue\n    node\n\n```\n#### 安装脚手架所需依赖(有点慢，请稍等)\n```\n  cd daren && npm install\n\n```\n#### 根据前期得到的API文档配置架手架\n1. 如此时API接口只提供RAP文档地址\n\n  此时我们前端将代理RAP文档MOCK api\n\n  例：`http://rap.taobao.org/mockjsdata/481/users`\n\n   GET ==> 提供用户例表\n  ```\n  // config/server.config.js 脚手架代理配置\n  proxys: [\n    {\n      host: 'http://rap.taobao.org',\n      path: '/api/rap',\n      pathRewrite: { '^/api/rap': 'mockjsdata' }, // 替换路径/api/rap ==> /mockjsdata\n    },\n  ],\n\n  // yunle-cli脚手架会向window注入__ENV__ 环境变量\n  var env = window.__ENV__;\n\n  // js中请求时\n  var __INIT__ = {\n    devConfig: {\n      host: '/api/rap/users',\n    },\n    proConfig: {\n      host: '/users'\n    },\n  };\n  var config = (\n    env === 'production' ?\n    __INFI__.proConfig : __INFI__.devConfig\n  );\n\n  $.ajax({ url: config.host });\n\n  ```\n2. 如此时API接口只提供doc文档类型\n  此时我们前端将按接口文档模拟假接口提供mock数据\n  例： `/users`\n\n  GET ==> 提供用户例表\n  ```\n  // config/server.config.js 脚手架Mock路由配置\n  {\n    route: '/api/mock/users',\n    handle: (req, res) => {\n      const data = Mock.mock({\n        data: {\n          'list|0-10': [\n            {\n              'id|+1': 0,\n            },\n          ],\n        },\n        status: 200,\n        message: '',\n        serverTime: '@now',\n      });\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify(data));\n    },\n  },\n\n  // yunle-cli脚手架会向window注入__ENV__ 环境变量\n  var env = window.__ENV__;\n\n  // js中请求时\n  var __INIT__ = {\n    devConfig: {\n      host: '/api/mock/users',\n    },\n    proConfig: {\n      host: '/users'\n    },\n  };\n  var config = (\n    env === 'production' ?\n    __INFI__.proConfig : __INFI__.devConfig\n  );\n\n  $.ajax({ url: config.host });\n\n  ```\n#### 启动开发环境\n  ```\n  npm run dev\n  ```\n\n## 项目联调\u0013\n> 联调的基础是在前后端同学都按API文档完成了各自功能与交互的基础上\u0013\n\n  ### 本地联调\n\n  本地开发环境联调，对于前端同学我们所要做的是重新配置yunle-cli脚手架\n\n  例：后端同学A给了一个他本地的server的IP 10.1.7.177 （同时可以直接代理线上接口）\n      ```\n      // config/server.config.js 脚手架代理配置\n      proxys: [\n        {\n          host: '10.1.7.177',\n          path: '/users',\n        }\n      ],\n      ```\n\n  ### 线上QA环境联调\n\n  线上QA环境联调，对于前端同学我们所要做的是打包上QA环境\n  ```\n    npm run build\n  ```\n  打包后项目中会出现`dist`目录,此内为打包压缩后的代码供线上使用。\n\n  ### 移动端真机调试\n  yunle-cli 启动后会启动两个server，如你手机在同个局域网中可以远程监听.\n\n  ![](/images/QQ20170113-114118@2x.png)\n\n  我们在PC的浏览器中打开http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：\n\n  ![](/images/QQ20170113-114306@2x.png)\n\n  界面操作简洁易懂。我们着重关注的是Remote Debug这一项，默认它的所有选项都是关闭的。我们开启Remote Debugger (weinre)这一项，然后点击出现的红色字：Access remote debugger (opens in a new tab)，就会打开weinre的控制台界面：\n\n  ![](/images/QQ20170113-114530@2x.png)\n\n  ![](/images/Untitled.gif)\n\n  >需要注意的是，要先打开自己的项目页面，再打开Remote Debugger，这样才能列出当前已经连接的客户端。否则的话，即使项目页面和BrowserSync是连接状态，Remote Debugger也会出现捕捉不到的情况。因此，可能需要关闭再重新开启Remote Debugger进行调试。\n\n## BUG排查\n\n\n## 项目上线\n","source":"_posts/前端开发流程.md","raw":"---\ntitle: 前端开发流程\ndate: 2017-01-11 17:34:20\ntags:\n---\n\n# 前端开发流程\n\n> 1. 此开发流程主要对前端人员的开发流程管理规范\n>\n> 2. 此流程是使用前端脚手架[yunle-cli](https://github.com/hexiao-o/yunle-template-gulp) 你可以自选其它脚手架，流程互通\n\n![开发流程图](/images/images1.png)\n\n## 项目发起\n\n   > 在一个H5项目发起，由产品发起产品项目或产品评审会\n\n在评审时，前端人员要对产品原型图和产品文档，弄不清楚交互逻辑，如有细节不清楚，在评审时向产品确认请楚，`后期开发时如遇评审时未了解清楚的地方及时和产品沟通`\n\n## 项目启动\n\n> 在项目启动前期，对H5页面所涉及与后台交互，如API接口事先与后台同学沟通\n\n### 前期沟能 --- API文档\n\n与后台同学沟通后我们会得到一份API文档，一般提供的文档会有两种类型，纯文本的doc文档类型 或 基于RAP的API文档管理的一个URL。（如开发期间API有所变化,应事先要通知双方）\n\n\n### 项目搭建\n例： 我们现要做达人申请H5项目\n#### 首先生成的项目骨架\n```\n  yunle init daren\n\n  > gulp\n    webpack\n    react\n    vue\n    node\n\n```\n#### 安装脚手架所需依赖(有点慢，请稍等)\n```\n  cd daren && npm install\n\n```\n#### 根据前期得到的API文档配置架手架\n1. 如此时API接口只提供RAP文档地址\n\n  此时我们前端将代理RAP文档MOCK api\n\n  例：`http://rap.taobao.org/mockjsdata/481/users`\n\n   GET ==> 提供用户例表\n  ```\n  // config/server.config.js 脚手架代理配置\n  proxys: [\n    {\n      host: 'http://rap.taobao.org',\n      path: '/api/rap',\n      pathRewrite: { '^/api/rap': 'mockjsdata' }, // 替换路径/api/rap ==> /mockjsdata\n    },\n  ],\n\n  // yunle-cli脚手架会向window注入__ENV__ 环境变量\n  var env = window.__ENV__;\n\n  // js中请求时\n  var __INIT__ = {\n    devConfig: {\n      host: '/api/rap/users',\n    },\n    proConfig: {\n      host: '/users'\n    },\n  };\n  var config = (\n    env === 'production' ?\n    __INFI__.proConfig : __INFI__.devConfig\n  );\n\n  $.ajax({ url: config.host });\n\n  ```\n2. 如此时API接口只提供doc文档类型\n  此时我们前端将按接口文档模拟假接口提供mock数据\n  例： `/users`\n\n  GET ==> 提供用户例表\n  ```\n  // config/server.config.js 脚手架Mock路由配置\n  {\n    route: '/api/mock/users',\n    handle: (req, res) => {\n      const data = Mock.mock({\n        data: {\n          'list|0-10': [\n            {\n              'id|+1': 0,\n            },\n          ],\n        },\n        status: 200,\n        message: '',\n        serverTime: '@now',\n      });\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify(data));\n    },\n  },\n\n  // yunle-cli脚手架会向window注入__ENV__ 环境变量\n  var env = window.__ENV__;\n\n  // js中请求时\n  var __INIT__ = {\n    devConfig: {\n      host: '/api/mock/users',\n    },\n    proConfig: {\n      host: '/users'\n    },\n  };\n  var config = (\n    env === 'production' ?\n    __INFI__.proConfig : __INFI__.devConfig\n  );\n\n  $.ajax({ url: config.host });\n\n  ```\n#### 启动开发环境\n  ```\n  npm run dev\n  ```\n\n## 项目联调\u0013\n> 联调的基础是在前后端同学都按API文档完成了各自功能与交互的基础上\u0013\n\n  ### 本地联调\n\n  本地开发环境联调，对于前端同学我们所要做的是重新配置yunle-cli脚手架\n\n  例：后端同学A给了一个他本地的server的IP 10.1.7.177 （同时可以直接代理线上接口）\n      ```\n      // config/server.config.js 脚手架代理配置\n      proxys: [\n        {\n          host: '10.1.7.177',\n          path: '/users',\n        }\n      ],\n      ```\n\n  ### 线上QA环境联调\n\n  线上QA环境联调，对于前端同学我们所要做的是打包上QA环境\n  ```\n    npm run build\n  ```\n  打包后项目中会出现`dist`目录,此内为打包压缩后的代码供线上使用。\n\n  ### 移动端真机调试\n  yunle-cli 启动后会启动两个server，如你手机在同个局域网中可以远程监听.\n\n  ![](/images/QQ20170113-114118@2x.png)\n\n  我们在PC的浏览器中打开http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：\n\n  ![](/images/QQ20170113-114306@2x.png)\n\n  界面操作简洁易懂。我们着重关注的是Remote Debug这一项，默认它的所有选项都是关闭的。我们开启Remote Debugger (weinre)这一项，然后点击出现的红色字：Access remote debugger (opens in a new tab)，就会打开weinre的控制台界面：\n\n  ![](/images/QQ20170113-114530@2x.png)\n\n  ![](/images/Untitled.gif)\n\n  >需要注意的是，要先打开自己的项目页面，再打开Remote Debugger，这样才能列出当前已经连接的客户端。否则的话，即使项目页面和BrowserSync是连接状态，Remote Debugger也会出现捕捉不到的情况。因此，可能需要关闭再重新开启Remote Debugger进行调试。\n\n## BUG排查\n\n\n## 项目上线\n","slug":"前端开发流程","published":1,"updated":"2017-02-06T06:48:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zoy000bnxx387rmyi14","content":"<h1 id=\"前端开发流程\"><a href=\"#前端开发流程\" class=\"headerlink\" title=\"前端开发流程\"></a>前端开发流程</h1><blockquote>\n<ol>\n<li><p>此开发流程主要对前端人员的开发流程管理规范</p>\n</li>\n<li><p>此流程是使用前端脚手架<a href=\"https://github.com/hexiao-o/yunle-template-gulp\" target=\"_blank\" rel=\"external\">yunle-cli</a> 你可以自选其它脚手架，流程互通</p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/images1.png\" alt=\"开发流程图\"></p>\n<h2 id=\"项目发起\"><a href=\"#项目发起\" class=\"headerlink\" title=\"项目发起\"></a>项目发起</h2><blockquote>\n<p>在一个H5项目发起，由产品发起产品项目或产品评审会</p>\n</blockquote>\n<p>在评审时，前端人员要对产品原型图和产品文档，弄不清楚交互逻辑，如有细节不清楚，在评审时向产品确认请楚，<code>后期开发时如遇评审时未了解清楚的地方及时和产品沟通</code></p>\n<h2 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h2><blockquote>\n<p>在项目启动前期，对H5页面所涉及与后台交互，如API接口事先与后台同学沟通</p>\n</blockquote>\n<h3 id=\"前期沟能-—-API文档\"><a href=\"#前期沟能-—-API文档\" class=\"headerlink\" title=\"前期沟能 — API文档\"></a>前期沟能 — API文档</h3><p>与后台同学沟通后我们会得到一份API文档，一般提供的文档会有两种类型，纯文本的doc文档类型 或 基于RAP的API文档管理的一个URL。（如开发期间API有所变化,应事先要通知双方）</p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>例： 我们现要做达人申请H5项目</p>\n<h4 id=\"首先生成的项目骨架\"><a href=\"#首先生成的项目骨架\" class=\"headerlink\" title=\"首先生成的项目骨架\"></a>首先生成的项目骨架</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">yunle init daren</div><div class=\"line\"></div><div class=\"line\">&gt; gulp</div><div class=\"line\">  webpack</div><div class=\"line\">  react</div><div class=\"line\">  vue</div><div class=\"line\">  node</div></pre></td></tr></table></figure>\n<h4 id=\"安装脚手架所需依赖-有点慢，请稍等\"><a href=\"#安装脚手架所需依赖-有点慢，请稍等\" class=\"headerlink\" title=\"安装脚手架所需依赖(有点慢，请稍等)\"></a>安装脚手架所需依赖(有点慢，请稍等)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd daren &amp;&amp; npm install</div></pre></td></tr></table></figure>\n<h4 id=\"根据前期得到的API文档配置架手架\"><a href=\"#根据前期得到的API文档配置架手架\" class=\"headerlink\" title=\"根据前期得到的API文档配置架手架\"></a>根据前期得到的API文档配置架手架</h4><ol>\n<li><p>如此时API接口只提供RAP文档地址</p>\n<p>此时我们前端将代理RAP文档MOCK api</p>\n<p>例：<code>http://rap.taobao.org/mockjsdata/481/users</code></p>\n<p>GET ==&gt; 提供用户例表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架代理配置</div><div class=\"line\">proxys: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    host: &apos;http://rap.taobao.org&apos;,</div><div class=\"line\">    path: &apos;/api/rap&apos;,</div><div class=\"line\">    pathRewrite: &#123; &apos;^/api/rap&apos;: &apos;mockjsdata&apos; &#125;, // 替换路径/api/rap ==&gt; /mockjsdata</div><div class=\"line\">  &#125;,</div><div class=\"line\">],</div><div class=\"line\"></div><div class=\"line\">// yunle-cli脚手架会向window注入__ENV__ 环境变量</div><div class=\"line\">var env = window.__ENV__;</div><div class=\"line\"></div><div class=\"line\">// js中请求时</div><div class=\"line\">var __INIT__ = &#123;</div><div class=\"line\">  devConfig: &#123;</div><div class=\"line\">    host: &apos;/api/rap/users&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  proConfig: &#123;</div><div class=\"line\">    host: &apos;/users&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\">var config = (</div><div class=\"line\">  env === &apos;production&apos; ?</div><div class=\"line\">  __INFI__.proConfig : __INFI__.devConfig</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123; url: config.host &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如此时API接口只提供doc文档类型<br>此时我们前端将按接口文档模拟假接口提供mock数据<br>例： <code>/users</code></p>\n<p>GET ==&gt; 提供用户例表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架Mock路由配置</div><div class=\"line\">&#123;</div><div class=\"line\">  route: &apos;/api/mock/users&apos;,</div><div class=\"line\">  handle: (req, res) =&gt; &#123;</div><div class=\"line\">    const data = Mock.mock(&#123;</div><div class=\"line\">      data: &#123;</div><div class=\"line\">        &apos;list|0-10&apos;: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            &apos;id|+1&apos;: 0,</div><div class=\"line\">          &#125;,</div><div class=\"line\">        ],</div><div class=\"line\">      &#125;,</div><div class=\"line\">      status: 200,</div><div class=\"line\">      message: &apos;&apos;,</div><div class=\"line\">      serverTime: &apos;@now&apos;,</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.setHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</div><div class=\"line\">    res.end(JSON.stringify(data));</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\">// yunle-cli脚手架会向window注入__ENV__ 环境变量</div><div class=\"line\">var env = window.__ENV__;</div><div class=\"line\"></div><div class=\"line\">// js中请求时</div><div class=\"line\">var __INIT__ = &#123;</div><div class=\"line\">  devConfig: &#123;</div><div class=\"line\">    host: &apos;/api/mock/users&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  proConfig: &#123;</div><div class=\"line\">    host: &apos;/users&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\">var config = (</div><div class=\"line\">  env === &apos;production&apos; ?</div><div class=\"line\">  __INFI__.proConfig : __INFI__.devConfig</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123; url: config.host &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"启动开发环境\"><a href=\"#启动开发环境\" class=\"headerlink\" title=\"启动开发环境\"></a>启动开发环境</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h2 id=\"项目联调\"><a href=\"#项目联调\" class=\"headerlink\" title=\"项目联调\u0013\"></a>项目联调\u0013</h2><blockquote>\n<p>联调的基础是在前后端同学都按API文档完成了各自功能与交互的基础上\u0013</p>\n</blockquote>\n<h3 id=\"本地联调\"><a href=\"#本地联调\" class=\"headerlink\" title=\"本地联调\"></a>本地联调</h3><p>  本地开发环境联调，对于前端同学我们所要做的是重新配置yunle-cli脚手架</p>\n<p>  例：后端同学A给了一个他本地的server的IP 10.1.7.177 （同时可以直接代理线上接口）<br>      <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架代理配置</div><div class=\"line\">proxys: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    host: &apos;10.1.7.177&apos;,</div><div class=\"line\">    path: &apos;/users&apos;,</div><div class=\"line\">  &#125;</div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<h3 id=\"线上QA环境联调\"><a href=\"#线上QA环境联调\" class=\"headerlink\" title=\"线上QA环境联调\"></a>线上QA环境联调</h3><p>  线上QA环境联调，对于前端同学我们所要做的是打包上QA环境<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure></p>\n<p>  打包后项目中会出现<code>dist</code>目录,此内为打包压缩后的代码供线上使用。</p>\n<h3 id=\"移动端真机调试\"><a href=\"#移动端真机调试\" class=\"headerlink\" title=\"移动端真机调试\"></a>移动端真机调试</h3><p>  yunle-cli 启动后会启动两个server，如你手机在同个局域网中可以远程监听.</p>\n<p>  <img src=\"/images/QQ20170113-114118@2x.png\" alt=\"\"></p>\n<p>  我们在PC的浏览器中打开<a href=\"http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：\" target=\"_blank\" rel=\"external\">http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：</a></p>\n<p>  <img src=\"/images/QQ20170113-114306@2x.png\" alt=\"\"></p>\n<p>  界面操作简洁易懂。我们着重关注的是Remote Debug这一项，默认它的所有选项都是关闭的。我们开启Remote Debugger (weinre)这一项，然后点击出现的红色字：Access remote debugger (opens in a new tab)，就会打开weinre的控制台界面：</p>\n<p>  <img src=\"/images/QQ20170113-114530@2x.png\" alt=\"\"></p>\n<p>  <img src=\"/images/Untitled.gif\" alt=\"\"></p>\n<blockquote>\n<p>需要注意的是，要先打开自己的项目页面，再打开Remote Debugger，这样才能列出当前已经连接的客户端。否则的话，即使项目页面和BrowserSync是连接状态，Remote Debugger也会出现捕捉不到的情况。因此，可能需要关闭再重新开启Remote Debugger进行调试。</p>\n</blockquote>\n<h2 id=\"BUG排查\"><a href=\"#BUG排查\" class=\"headerlink\" title=\"BUG排查\"></a>BUG排查</h2><h2 id=\"项目上线\"><a href=\"#项目上线\" class=\"headerlink\" title=\"项目上线\"></a>项目上线</h2>","excerpt":"","more":"<h1 id=\"前端开发流程\"><a href=\"#前端开发流程\" class=\"headerlink\" title=\"前端开发流程\"></a>前端开发流程</h1><blockquote>\n<ol>\n<li><p>此开发流程主要对前端人员的开发流程管理规范</p>\n</li>\n<li><p>此流程是使用前端脚手架<a href=\"https://github.com/hexiao-o/yunle-template-gulp\">yunle-cli</a> 你可以自选其它脚手架，流程互通</p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/images1.png\" alt=\"开发流程图\"></p>\n<h2 id=\"项目发起\"><a href=\"#项目发起\" class=\"headerlink\" title=\"项目发起\"></a>项目发起</h2><blockquote>\n<p>在一个H5项目发起，由产品发起产品项目或产品评审会</p>\n</blockquote>\n<p>在评审时，前端人员要对产品原型图和产品文档，弄不清楚交互逻辑，如有细节不清楚，在评审时向产品确认请楚，<code>后期开发时如遇评审时未了解清楚的地方及时和产品沟通</code></p>\n<h2 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h2><blockquote>\n<p>在项目启动前期，对H5页面所涉及与后台交互，如API接口事先与后台同学沟通</p>\n</blockquote>\n<h3 id=\"前期沟能-—-API文档\"><a href=\"#前期沟能-—-API文档\" class=\"headerlink\" title=\"前期沟能 — API文档\"></a>前期沟能 — API文档</h3><p>与后台同学沟通后我们会得到一份API文档，一般提供的文档会有两种类型，纯文本的doc文档类型 或 基于RAP的API文档管理的一个URL。（如开发期间API有所变化,应事先要通知双方）</p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>例： 我们现要做达人申请H5项目</p>\n<h4 id=\"首先生成的项目骨架\"><a href=\"#首先生成的项目骨架\" class=\"headerlink\" title=\"首先生成的项目骨架\"></a>首先生成的项目骨架</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">yunle init daren</div><div class=\"line\"></div><div class=\"line\">&gt; gulp</div><div class=\"line\">  webpack</div><div class=\"line\">  react</div><div class=\"line\">  vue</div><div class=\"line\">  node</div></pre></td></tr></table></figure>\n<h4 id=\"安装脚手架所需依赖-有点慢，请稍等\"><a href=\"#安装脚手架所需依赖-有点慢，请稍等\" class=\"headerlink\" title=\"安装脚手架所需依赖(有点慢，请稍等)\"></a>安装脚手架所需依赖(有点慢，请稍等)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd daren &amp;&amp; npm install</div></pre></td></tr></table></figure>\n<h4 id=\"根据前期得到的API文档配置架手架\"><a href=\"#根据前期得到的API文档配置架手架\" class=\"headerlink\" title=\"根据前期得到的API文档配置架手架\"></a>根据前期得到的API文档配置架手架</h4><ol>\n<li><p>如此时API接口只提供RAP文档地址</p>\n<p>此时我们前端将代理RAP文档MOCK api</p>\n<p>例：<code>http://rap.taobao.org/mockjsdata/481/users</code></p>\n<p>GET ==&gt; 提供用户例表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架代理配置</div><div class=\"line\">proxys: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    host: &apos;http://rap.taobao.org&apos;,</div><div class=\"line\">    path: &apos;/api/rap&apos;,</div><div class=\"line\">    pathRewrite: &#123; &apos;^/api/rap&apos;: &apos;mockjsdata&apos; &#125;, // 替换路径/api/rap ==&gt; /mockjsdata</div><div class=\"line\">  &#125;,</div><div class=\"line\">],</div><div class=\"line\"></div><div class=\"line\">// yunle-cli脚手架会向window注入__ENV__ 环境变量</div><div class=\"line\">var env = window.__ENV__;</div><div class=\"line\"></div><div class=\"line\">// js中请求时</div><div class=\"line\">var __INIT__ = &#123;</div><div class=\"line\">  devConfig: &#123;</div><div class=\"line\">    host: &apos;/api/rap/users&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  proConfig: &#123;</div><div class=\"line\">    host: &apos;/users&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\">var config = (</div><div class=\"line\">  env === &apos;production&apos; ?</div><div class=\"line\">  __INFI__.proConfig : __INFI__.devConfig</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123; url: config.host &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如此时API接口只提供doc文档类型<br>此时我们前端将按接口文档模拟假接口提供mock数据<br>例： <code>/users</code></p>\n<p>GET ==&gt; 提供用户例表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架Mock路由配置</div><div class=\"line\">&#123;</div><div class=\"line\">  route: &apos;/api/mock/users&apos;,</div><div class=\"line\">  handle: (req, res) =&gt; &#123;</div><div class=\"line\">    const data = Mock.mock(&#123;</div><div class=\"line\">      data: &#123;</div><div class=\"line\">        &apos;list|0-10&apos;: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            &apos;id|+1&apos;: 0,</div><div class=\"line\">          &#125;,</div><div class=\"line\">        ],</div><div class=\"line\">      &#125;,</div><div class=\"line\">      status: 200,</div><div class=\"line\">      message: &apos;&apos;,</div><div class=\"line\">      serverTime: &apos;@now&apos;,</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.setHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</div><div class=\"line\">    res.end(JSON.stringify(data));</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\">// yunle-cli脚手架会向window注入__ENV__ 环境变量</div><div class=\"line\">var env = window.__ENV__;</div><div class=\"line\"></div><div class=\"line\">// js中请求时</div><div class=\"line\">var __INIT__ = &#123;</div><div class=\"line\">  devConfig: &#123;</div><div class=\"line\">    host: &apos;/api/mock/users&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  proConfig: &#123;</div><div class=\"line\">    host: &apos;/users&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\">var config = (</div><div class=\"line\">  env === &apos;production&apos; ?</div><div class=\"line\">  __INFI__.proConfig : __INFI__.devConfig</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123; url: config.host &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"启动开发环境\"><a href=\"#启动开发环境\" class=\"headerlink\" title=\"启动开发环境\"></a>启动开发环境</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h2 id=\"项目联调\"><a href=\"#项目联调\" class=\"headerlink\" title=\"项目联调\u0013\"></a>项目联调\u0013</h2><blockquote>\n<p>联调的基础是在前后端同学都按API文档完成了各自功能与交互的基础上\u0013</p>\n</blockquote>\n<h3 id=\"本地联调\"><a href=\"#本地联调\" class=\"headerlink\" title=\"本地联调\"></a>本地联调</h3><p>  本地开发环境联调，对于前端同学我们所要做的是重新配置yunle-cli脚手架</p>\n<p>  例：后端同学A给了一个他本地的server的IP 10.1.7.177 （同时可以直接代理线上接口）<br>      <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// config/server.config.js 脚手架代理配置</div><div class=\"line\">proxys: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    host: &apos;10.1.7.177&apos;,</div><div class=\"line\">    path: &apos;/users&apos;,</div><div class=\"line\">  &#125;</div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<h3 id=\"线上QA环境联调\"><a href=\"#线上QA环境联调\" class=\"headerlink\" title=\"线上QA环境联调\"></a>线上QA环境联调</h3><p>  线上QA环境联调，对于前端同学我们所要做的是打包上QA环境<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure></p>\n<p>  打包后项目中会出现<code>dist</code>目录,此内为打包压缩后的代码供线上使用。</p>\n<h3 id=\"移动端真机调试\"><a href=\"#移动端真机调试\" class=\"headerlink\" title=\"移动端真机调试\"></a>移动端真机调试</h3><p>  yunle-cli 启动后会启动两个server，如你手机在同个局域网中可以远程监听.</p>\n<p>  <img src=\"/images/QQ20170113-114118@2x.png\" alt=\"\"></p>\n<p>  我们在PC的浏览器中打开<a href=\"http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：\">http://localhost:3001，这个端口为3001的URL是BrowserSync的操作界面：</a></p>\n<p>  <img src=\"/images/QQ20170113-114306@2x.png\" alt=\"\"></p>\n<p>  界面操作简洁易懂。我们着重关注的是Remote Debug这一项，默认它的所有选项都是关闭的。我们开启Remote Debugger (weinre)这一项，然后点击出现的红色字：Access remote debugger (opens in a new tab)，就会打开weinre的控制台界面：</p>\n<p>  <img src=\"/images/QQ20170113-114530@2x.png\" alt=\"\"></p>\n<p>  <img src=\"/images/Untitled.gif\" alt=\"\"></p>\n<blockquote>\n<p>需要注意的是，要先打开自己的项目页面，再打开Remote Debugger，这样才能列出当前已经连接的客户端。否则的话，即使项目页面和BrowserSync是连接状态，Remote Debugger也会出现捕捉不到的情况。因此，可能需要关闭再重新开启Remote Debugger进行调试。</p>\n</blockquote>\n<h2 id=\"BUG排查\"><a href=\"#BUG排查\" class=\"headerlink\" title=\"BUG排查\"></a>BUG排查</h2><h2 id=\"项目上线\"><a href=\"#项目上线\" class=\"headerlink\" title=\"项目上线\"></a>项目上线</h2>"},{"title":"Web 研发模式演变","date":"2016-12-21T03:02:49.000Z","_content":"\n[原文 lifesinger](https://github.com/lifesinger/blog/issues/184)\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg)\n\n前不久徐飞写了一篇很好的文章：Web 应用的组件化开发。本文尝试从历史发展角度，说说各种研发模式的优劣。\n\n一、简单明快的早期时代\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg)\n\n可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。\n\n这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。\n\n然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：\n\n1、**Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。**考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。\n\n2、**JSP 等代码的可维护性越来越差。**JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。\n\n这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg)\n\n理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。\n\n**如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。**下面我们继续来看，技术架构的演变如何解决这两个问题。\n\n二、后端为主的 MVC 时代\n\n为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg)\n\n代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：\n\n1、**前端开发重度依赖开发环境。**这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。\n\n2、**前后端职责依旧纠缠不清。**Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。\n\n经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。\n\n三、Ajax 带来的 SPA 时代\n\n历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg)\n\n这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg)\n\n对于 SPA 应用，有几个很重要的挑战：\n\n1、**前后端接口的约定。**如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。\n\n2、**前端开发的复杂度控制。**SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。\n\nSPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。\n\n四、前端为主的 MV* 时代\n\n为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg)\n\n好处很明显：\n\n1、**前后端职责很清晰。**前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。\n\n2、**前端开发的复杂度可控。**前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。\n\n3、部署相对独立，产品体验可以快速改进。\n\n但依旧有不足之处：\n\n1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n3、性能并非最佳，特别是移动互联网环境下。\n4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。\n\n五、Node 带来的全栈时代\n\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png)\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n\n1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。\n\n2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。\n\n通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。\n\n与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。\n\n基于 Node 的全栈模式，依旧面临很多挑战：\n\n1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。\n2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。\n3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。\n4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。\n\n六、小结\n\n回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：\n\n1、模式没有好坏高下之分，只有合不合适。\n2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。\n3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。\n4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。\n\n历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。\n\n（完）\n\n题图：演化真不容易呀。\n","source":"_posts/Web-研发模式演变.md","raw":"---\ntitle: Web 研发模式演变\ndate: 2016-12-21 11:02:49\ntags:\n---\n\n[原文 lifesinger](https://github.com/lifesinger/blog/issues/184)\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg)\n\n前不久徐飞写了一篇很好的文章：Web 应用的组件化开发。本文尝试从历史发展角度，说说各种研发模式的优劣。\n\n一、简单明快的早期时代\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg)\n\n可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。\n\n这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。\n\n然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：\n\n1、**Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。**考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。\n\n2、**JSP 等代码的可维护性越来越差。**JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。\n\n这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg)\n\n理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。\n\n**如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。**下面我们继续来看，技术架构的演变如何解决这两个问题。\n\n二、后端为主的 MVC 时代\n\n为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg)\n\n代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：\n\n1、**前端开发重度依赖开发环境。**这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。\n\n2、**前后端职责依旧纠缠不清。**Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。\n\n经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。\n\n三、Ajax 带来的 SPA 时代\n\n历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg)\n\n这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg)\n\n对于 SPA 应用，有几个很重要的挑战：\n\n1、**前后端接口的约定。**如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。\n\n2、**前端开发的复杂度控制。**SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。\n\nSPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。\n\n四、前端为主的 MV* 时代\n\n为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg)\n\n好处很明显：\n\n1、**前后端职责很清晰。**前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。\n\n2、**前端开发的复杂度可控。**前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。\n\n3、部署相对独立，产品体验可以快速改进。\n\n但依旧有不足之处：\n\n1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n3、性能并非最佳，特别是移动互联网环境下。\n4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。\n\n五、Node 带来的全栈时代\n\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\n![](/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png)\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n\n1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。\n\n2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。\n\n通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。\n\n与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。\n\n基于 Node 的全栈模式，依旧面临很多挑战：\n\n1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。\n2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。\n3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。\n4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。\n\n六、小结\n\n回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：\n\n1、模式没有好坏高下之分，只有合不合适。\n2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。\n3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。\n4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。\n\n历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。\n\n（完）\n\n题图：演化真不容易呀。\n","slug":"Web-研发模式演变","published":1,"updated":"2016-12-21T03:13:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zoz000dnxx39i527ak6","content":"<p><a href=\"https://github.com/lifesinger/blog/issues/184\" target=\"_blank\" rel=\"external\">原文 lifesinger</a></p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg\" alt=\"\"></p>\n<p>前不久徐飞写了一篇很好的文章：Web 应用的组件化开发。本文尝试从历史发展角度，说说各种研发模式的优劣。</p>\n<p>一、简单明快的早期时代</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg\" alt=\"\"></p>\n<p>可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。</p>\n<p>这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。</p>\n<p>然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：</p>\n<p>1、<strong>Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。</strong>考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。</p>\n<p>2、<strong>JSP 等代码的可维护性越来越差。</strong>JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。</p>\n<p>这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg\" alt=\"\"></p>\n<p>理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。</p>\n<p><strong>如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。</strong>下面我们继续来看，技术架构的演变如何解决这两个问题。</p>\n<p>二、后端为主的 MVC 时代</p>\n<p>为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg\" alt=\"\"></p>\n<p>代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：</p>\n<p>1、<strong>前端开发重度依赖开发环境。</strong>这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</p>\n<p>2、<strong>前后端职责依旧纠缠不清。</strong>Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</p>\n<p>经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。</p>\n<p>三、Ajax 带来的 SPA 时代</p>\n<p>历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg\" alt=\"\"></p>\n<p>这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg\" alt=\"\"></p>\n<p>对于 SPA 应用，有几个很重要的挑战：</p>\n<p>1、<strong>前后端接口的约定。</strong>如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。</p>\n<p>2、<strong>前端开发的复杂度控制。</strong>SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。</p>\n<p>SPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。</p>\n<p>四、前端为主的 MV* 时代</p>\n<p>为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg\" alt=\"\"></p>\n<p>好处很明显：</p>\n<p>1、<strong>前后端职责很清晰。</strong>前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。</p>\n<p>2、<strong>前端开发的复杂度可控。</strong>前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。</p>\n<p>3、部署相对独立，产品体验可以快速改进。</p>\n<p>但依旧有不足之处：</p>\n<p>1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。<br>2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。<br>3、性能并非最佳，特别是移动互联网环境下。<br>4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。</p>\n<p>五、Node 带来的全栈时代</p>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png\" alt=\"\"></p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<p>1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。</p>\n<p>2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。</p>\n<p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p>\n<p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。</p>\n<p>基于 Node 的全栈模式，依旧面临很多挑战：</p>\n<p>1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。<br>2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。<br>3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。<br>4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。</p>\n<p>六、小结</p>\n<p>回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：</p>\n<p>1、模式没有好坏高下之分，只有合不合适。<br>2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。<br>3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。<br>4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。</p>\n<p>历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。</p>\n<p>（完）</p>\n<p>题图：演化真不容易呀。</p>\n","excerpt":"","more":"<p><a href=\"https://github.com/lifesinger/blog/issues/184\">原文 lifesinger</a></p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f6366323535396466303137396666346431666630336463346465663961386334666661376435346531626134662d695355784373.jpeg\" alt=\"\"></p>\n<p>前不久徐飞写了一篇很好的文章：Web 应用的组件化开发。本文尝试从历史发展角度，说说各种研发模式的优劣。</p>\n<p>一、简单明快的早期时代</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538.jpeg\" alt=\"\"></p>\n<p>可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。</p>\n<p>这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。</p>\n<p>然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：</p>\n<p>1、<strong>Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。</strong>考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。</p>\n<p>2、<strong>JSP 等代码的可维护性越来越差。</strong>JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。</p>\n<p>这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3835393365623736663966353163613735333933333234333131303933623731356235373637316531313466342d6e61677936445f6677363538.jpeg\" alt=\"\"></p>\n<p>理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。</p>\n<p><strong>如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。</strong>下面我们继续来看，技术架构的演变如何解决这两个问题。</p>\n<p>二、后端为主的 MVC 时代</p>\n<p>为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538.jpeg\" alt=\"\"></p>\n<p>代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：</p>\n<p>1、<strong>前端开发重度依赖开发环境。</strong>这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</p>\n<p>2、<strong>前后端职责依旧纠缠不清。</strong>Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</p>\n<p>经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。</p>\n<p>三、Ajax 带来的 SPA 时代</p>\n<p>历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538.jpeg\" alt=\"\"></p>\n<p>这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538.jpeg\" alt=\"\"></p>\n<p>对于 SPA 应用，有几个很重要的挑战：</p>\n<p>1、<strong>前后端接口的约定。</strong>如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。</p>\n<p>2、<strong>前端开发的复杂度控制。</strong>SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。</p>\n<p>SPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。</p>\n<p>四、前端为主的 MV* 时代</p>\n<p>为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538.jpeg\" alt=\"\"></p>\n<p>好处很明显：</p>\n<p>1、<strong>前后端职责很清晰。</strong>前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。</p>\n<p>2、<strong>前端开发的复杂度可控。</strong>前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。</p>\n<p>3、部署相对独立，产品体验可以快速改进。</p>\n<p>但依旧有不足之处：</p>\n<p>1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。<br>2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。<br>3、性能并非最佳，特别是移动互联网环境下。<br>4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。</p>\n<p>五、Node 带来的全栈时代</p>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p><img src=\"/images/687474703a2f2f696d672e68622e616963646e2e636f6d2f3430303931653637316230626465653236653531366163303530633663616563383038383562386131326238372d374a676646685f6677363538.png\" alt=\"\"></p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<p>1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。</p>\n<p>2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。</p>\n<p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p>\n<p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。</p>\n<p>基于 Node 的全栈模式，依旧面临很多挑战：</p>\n<p>1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。<br>2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。<br>3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。<br>4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。</p>\n<p>六、小结</p>\n<p>回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：</p>\n<p>1、模式没有好坏高下之分，只有合不合适。<br>2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。<br>3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。<br>4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。</p>\n<p>历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。</p>\n<p>（完）</p>\n<p>题图：演化真不容易呀。</p>\n"},{"title":"我们为什么要尝试前后端分离","date":"2016-11-30T15:30:31.000Z","_content":"\n> 这不是一篇纯技术文章，而是一篇分享我个人在前后端分离路上收获的点点滴滴的文章，以此来为准备尝试前后端分离或者想了解前后端分离的童鞋做一个大体的讲解。\n\n[原文 劳卜](https://segmentfault.com/a/1190000006240370)\n\n## 尝试与改变\n\n如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：\n\n把流程从\n\n> PM：“我要这个功能”\n> 后端：“这个先找前端做个模板”\n> 前端：“模板做完了”\n> 后端：“我来对接一下，这里样式不对”\n> 前端：“我改完了”\n> 后端：“功能交付”\n> PM：“春节要加这个活动”\n> 后端：“这个先找前端改个模板”\n> 前端：“模板做完了”\n> 后端：“我来对接一下，这里样式不对”\n> 前端：“我改完了”\n> 后端：“功能交付”\n\n变成\n\n> PM：“我要这个功能”\n> 前端：“我要接口”\n> 后端：“接口完成了”\n> 前端：“我来对接一下，功能交付”\n> PM：“春节要加这个活动”\n> 前端：“需要增加接口”\n> 后端：“接口完成了”\n> 前端：“我来对接一下，功能交付”\n\n由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。\n\n## 现状与分歧\n\n作为一名前端开发人员，我们应该尝试一些新颖的技术，完善每一个细节性的问题，不断突破自我。虽然前后端分离已经算不上什么新颖的技术或思路，但是目前很多后台开发人员甚至前端开发人员都没有接触过。\n\n据我个人的了解，如果在一个部门里，部门人员全是后台开发人员，前端的一些页面也是由后台人员完成的，那么前后端分离对于他们而言可能是一片未知的领域，项目大多是前后端强耦合的，甚至不存在前端的概念。\n\n在不重视前端的公司或部门，不了解前后端分离这也无可厚非。在我刚进入一个全是后台开发人员的部门的时候，整个部门就我一个前端，我刚开始的主要职责就是负责项目前端页面的制作和JS功能的实现，虽然部门有前后端分离的意识，但都不知该如何去实践。在那时，部门的后台人员认为前后端分离就是后台不再需要写HTML和JS了，可以交给前端来做了，然而这只能叫做前后端分工。\n\n以上讲述的是一种情况: 不了解前后端分离，也不知如何去实践的。下面还有一种情况：了解前后端分离，但不想去尝试的。\n\n针对第二种情况，很多人也做过相应的解释，其实这就涉及到“前后端分离的利弊”问题。很多后台人员会认为自己所做的那一套没有问题，即便后台套用前端html也是司空见惯，一直是大势所趋，后台MVC框架也是这么推荐使用的，很合理。这时候前端开发人员在部门中的话语权往往是不够的，或者认为后台开发人员的意见永远是对的，没有主观性。\n\n相反，也有可能是后台开发人员非常推荐前后端分离，而前端开发人员不想去实践的。这时候前端会认为后台开发人员在瞎折腾，之前前后端不分离项目做起来都很顺利，分离了反而会给自己带来额外的工作量和学习成本，而这就取决于前端的技术能力和见识了。\n\n当然，这也是我个人认为的前后端分离所存在的一些现状和分歧所在。\n\n## 场景与要求\n\n对于前后端分离的应用场景，不是所有的场景都适合，但是大多数项目都能够通过前后端分离来实现。\n\n由于我主要从事企业级后台应用的前端开发工作，个人认为对于后台应用的开发来说，前后端分离带来的利是远大于弊的。\n\n大多数后台应用我们都可以做成SPA应用（单页应用），而单页应用最主要的特点就是局部刷新，这通过前端控制路由调用AJAX，后台提供接口便可以实现，而且这样的方式用户体验更加友好，网页加载更加快速，开发和维护成本也降低了不少，效率明显提升。\n\n同样的，在展示类网站和移动APP页面中前后端分离也同样试用。前后端不分离的情况下，服务端要单独针对Web端做处理，返回完整HTML，这样势必增加服务端的复杂度，可维护性差，而web端需要加载完整的HTML，一定程度上影响网页性能，这对于移动端性能为王的地方非常的不友好。\n\n随着前端技术的发展和迭代，前端MVC框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。下面是一段前端控制路由的代码：\n\n```\n'use strict'\n\nexport default function (router) {\n    router.map({\n        '/': {\n            component: function (resolve) {\n                require(['./PC.vue'], resolve)\n            }\n        },\n        '/m/:params': {\n            component: function (resolve) {\n                require(['./Mobile.vue'], resolve)\n            }\n        },\n        '/p': {\n            component: function (resolve) {\n                require(['./PC.vue'], resolve)\n            },\n            subRoutes: {\n                '/process/:username': {\n                    component: function (resolve) {\n                        require(['./components/Process.vue'], resolve)\n                    }\n                }\n            }\n        }\n    })\n}\n\n```\n前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。\n\n## 优势与意义\n\n对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：\n\n1. 彻底解放前端\n\n  前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，如：\n\n  ```\n  <!--服务器端渲染 -->\n  <select>\n      <option value=''>--请选择所属业务--</option>\n      {% for p in p_list %}\n      <option value=\"{{ p }}\">{{ p }}</option>\n      {% endfor %}\n  </select>\n\n  ```\n  这是前后端耦合的，可读性差。\n\n  ```\n  <!--前端渲染 -->\n  <template>\n      <select id=\"rander\">\n          <option value=''>--请选择所属业务--</option>\n          <option v-for=\"list in lists\" :value=\"list\" v-text=\"list\"></option>\n      </select>\n  </template>\n\n  <script>\n  export default {\n      data: {\n          return {\n              lists: ['选项一', '选项二', '选项三', '选项四']\n          }\n      }，\n      ready: function () {\n          this.$http({\n              url: '/demo/',\n              method: 'POST',\n          })\n          .then(function (response) {\n              this.lists = response.data.lists // 获取服务器端数据并渲染\n          })\n      }\n  }\n  </script>\n\n  ```\n\n  上面是前端渲染的一段代码，前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。\n\n2. 提高工作效率，分工更加明确\n前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。\n\n3. 局部性能提升\n通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。\n\n4. 降低维护成本\n通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。\n\n## 心得与体会\n\n一路走来，项目一个接着一个，从一开始的后台控制路由、后台渲染页面到现在的前端控制路由、前端渲染数据，工作流程和方式都发生了很大的变化。每当遇到下面情形的时候，我都会为前后端分离带来的优势而感慨一番：\n\n1. 项目一开始制作前端页面的时候，我不再需要后台给我配置服务器环境了\n2. 项目的前端文件可以在需要调用后台接口的时候丢进服务器就好了，完全不需要事先放进去\n3. 增加一个项目页面需要配置路由的时候不再需要让后台同事给我加了，自己前端搞定\n4. 前端文件里不再掺杂后台的代码逻辑了，看起来舒服多了\n5. 页面跳转比之前更加流畅了，局部渲染局部加载非常快速\n6. 页面模板可以重复使用了，前端组件化开发提高了开发效率\n\n等等。面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。\n\n>只有尝试了才知道适不适合，只有切身体会才能辨别谁是谁非，本文并非推崇一定要前后端分离，而是希望大家在合适的应用场景下去尝试前后端分离，在丰富经验的同时或许也会擦出火花。\n","source":"_posts/我们为什么要尝试前后端分离.md","raw":"---\ntitle: 我们为什么要尝试前后端分离\ndate: 2016-11-30 23:30:31\ntags: 前后端分离\n---\n\n> 这不是一篇纯技术文章，而是一篇分享我个人在前后端分离路上收获的点点滴滴的文章，以此来为准备尝试前后端分离或者想了解前后端分离的童鞋做一个大体的讲解。\n\n[原文 劳卜](https://segmentfault.com/a/1190000006240370)\n\n## 尝试与改变\n\n如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：\n\n把流程从\n\n> PM：“我要这个功能”\n> 后端：“这个先找前端做个模板”\n> 前端：“模板做完了”\n> 后端：“我来对接一下，这里样式不对”\n> 前端：“我改完了”\n> 后端：“功能交付”\n> PM：“春节要加这个活动”\n> 后端：“这个先找前端改个模板”\n> 前端：“模板做完了”\n> 后端：“我来对接一下，这里样式不对”\n> 前端：“我改完了”\n> 后端：“功能交付”\n\n变成\n\n> PM：“我要这个功能”\n> 前端：“我要接口”\n> 后端：“接口完成了”\n> 前端：“我来对接一下，功能交付”\n> PM：“春节要加这个活动”\n> 前端：“需要增加接口”\n> 后端：“接口完成了”\n> 前端：“我来对接一下，功能交付”\n\n由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。\n\n## 现状与分歧\n\n作为一名前端开发人员，我们应该尝试一些新颖的技术，完善每一个细节性的问题，不断突破自我。虽然前后端分离已经算不上什么新颖的技术或思路，但是目前很多后台开发人员甚至前端开发人员都没有接触过。\n\n据我个人的了解，如果在一个部门里，部门人员全是后台开发人员，前端的一些页面也是由后台人员完成的，那么前后端分离对于他们而言可能是一片未知的领域，项目大多是前后端强耦合的，甚至不存在前端的概念。\n\n在不重视前端的公司或部门，不了解前后端分离这也无可厚非。在我刚进入一个全是后台开发人员的部门的时候，整个部门就我一个前端，我刚开始的主要职责就是负责项目前端页面的制作和JS功能的实现，虽然部门有前后端分离的意识，但都不知该如何去实践。在那时，部门的后台人员认为前后端分离就是后台不再需要写HTML和JS了，可以交给前端来做了，然而这只能叫做前后端分工。\n\n以上讲述的是一种情况: 不了解前后端分离，也不知如何去实践的。下面还有一种情况：了解前后端分离，但不想去尝试的。\n\n针对第二种情况，很多人也做过相应的解释，其实这就涉及到“前后端分离的利弊”问题。很多后台人员会认为自己所做的那一套没有问题，即便后台套用前端html也是司空见惯，一直是大势所趋，后台MVC框架也是这么推荐使用的，很合理。这时候前端开发人员在部门中的话语权往往是不够的，或者认为后台开发人员的意见永远是对的，没有主观性。\n\n相反，也有可能是后台开发人员非常推荐前后端分离，而前端开发人员不想去实践的。这时候前端会认为后台开发人员在瞎折腾，之前前后端不分离项目做起来都很顺利，分离了反而会给自己带来额外的工作量和学习成本，而这就取决于前端的技术能力和见识了。\n\n当然，这也是我个人认为的前后端分离所存在的一些现状和分歧所在。\n\n## 场景与要求\n\n对于前后端分离的应用场景，不是所有的场景都适合，但是大多数项目都能够通过前后端分离来实现。\n\n由于我主要从事企业级后台应用的前端开发工作，个人认为对于后台应用的开发来说，前后端分离带来的利是远大于弊的。\n\n大多数后台应用我们都可以做成SPA应用（单页应用），而单页应用最主要的特点就是局部刷新，这通过前端控制路由调用AJAX，后台提供接口便可以实现，而且这样的方式用户体验更加友好，网页加载更加快速，开发和维护成本也降低了不少，效率明显提升。\n\n同样的，在展示类网站和移动APP页面中前后端分离也同样试用。前后端不分离的情况下，服务端要单独针对Web端做处理，返回完整HTML，这样势必增加服务端的复杂度，可维护性差，而web端需要加载完整的HTML，一定程度上影响网页性能，这对于移动端性能为王的地方非常的不友好。\n\n随着前端技术的发展和迭代，前端MVC框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。下面是一段前端控制路由的代码：\n\n```\n'use strict'\n\nexport default function (router) {\n    router.map({\n        '/': {\n            component: function (resolve) {\n                require(['./PC.vue'], resolve)\n            }\n        },\n        '/m/:params': {\n            component: function (resolve) {\n                require(['./Mobile.vue'], resolve)\n            }\n        },\n        '/p': {\n            component: function (resolve) {\n                require(['./PC.vue'], resolve)\n            },\n            subRoutes: {\n                '/process/:username': {\n                    component: function (resolve) {\n                        require(['./components/Process.vue'], resolve)\n                    }\n                }\n            }\n        }\n    })\n}\n\n```\n前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。\n\n## 优势与意义\n\n对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：\n\n1. 彻底解放前端\n\n  前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，如：\n\n  ```\n  <!--服务器端渲染 -->\n  <select>\n      <option value=''>--请选择所属业务--</option>\n      {% for p in p_list %}\n      <option value=\"{{ p }}\">{{ p }}</option>\n      {% endfor %}\n  </select>\n\n  ```\n  这是前后端耦合的，可读性差。\n\n  ```\n  <!--前端渲染 -->\n  <template>\n      <select id=\"rander\">\n          <option value=''>--请选择所属业务--</option>\n          <option v-for=\"list in lists\" :value=\"list\" v-text=\"list\"></option>\n      </select>\n  </template>\n\n  <script>\n  export default {\n      data: {\n          return {\n              lists: ['选项一', '选项二', '选项三', '选项四']\n          }\n      }，\n      ready: function () {\n          this.$http({\n              url: '/demo/',\n              method: 'POST',\n          })\n          .then(function (response) {\n              this.lists = response.data.lists // 获取服务器端数据并渲染\n          })\n      }\n  }\n  </script>\n\n  ```\n\n  上面是前端渲染的一段代码，前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。\n\n2. 提高工作效率，分工更加明确\n前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。\n\n3. 局部性能提升\n通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。\n\n4. 降低维护成本\n通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。\n\n## 心得与体会\n\n一路走来，项目一个接着一个，从一开始的后台控制路由、后台渲染页面到现在的前端控制路由、前端渲染数据，工作流程和方式都发生了很大的变化。每当遇到下面情形的时候，我都会为前后端分离带来的优势而感慨一番：\n\n1. 项目一开始制作前端页面的时候，我不再需要后台给我配置服务器环境了\n2. 项目的前端文件可以在需要调用后台接口的时候丢进服务器就好了，完全不需要事先放进去\n3. 增加一个项目页面需要配置路由的时候不再需要让后台同事给我加了，自己前端搞定\n4. 前端文件里不再掺杂后台的代码逻辑了，看起来舒服多了\n5. 页面跳转比之前更加流畅了，局部渲染局部加载非常快速\n6. 页面模板可以重复使用了，前端组件化开发提高了开发效率\n\n等等。面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。\n\n>只有尝试了才知道适不适合，只有切身体会才能辨别谁是谁非，本文并非推崇一定要前后端分离，而是希望大家在合适的应用场景下去尝试前后端分离，在丰富经验的同时或许也会擦出火花。\n","slug":"我们为什么要尝试前后端分离","published":1,"updated":"2016-12-03T10:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zp0000fnxx3uiv9ktom","content":"<blockquote>\n<p>这不是一篇纯技术文章，而是一篇分享我个人在前后端分离路上收获的点点滴滴的文章，以此来为准备尝试前后端分离或者想了解前后端分离的童鞋做一个大体的讲解。</p>\n</blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000006240370\" target=\"_blank\" rel=\"external\">原文 劳卜</a></p>\n<h2 id=\"尝试与改变\"><a href=\"#尝试与改变\" class=\"headerlink\" title=\"尝试与改变\"></a>尝试与改变</h2><p>如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：</p>\n<p>把流程从</p>\n<blockquote>\n<p>PM：“我要这个功能”<br>后端：“这个先找前端做个模板”<br>前端：“模板做完了”<br>后端：“我来对接一下，这里样式不对”<br>前端：“我改完了”<br>后端：“功能交付”<br>PM：“春节要加这个活动”<br>后端：“这个先找前端改个模板”<br>前端：“模板做完了”<br>后端：“我来对接一下，这里样式不对”<br>前端：“我改完了”<br>后端：“功能交付”</p>\n</blockquote>\n<p>变成</p>\n<blockquote>\n<p>PM：“我要这个功能”<br>前端：“我要接口”<br>后端：“接口完成了”<br>前端：“我来对接一下，功能交付”<br>PM：“春节要加这个活动”<br>前端：“需要增加接口”<br>后端：“接口完成了”<br>前端：“我来对接一下，功能交付”</p>\n</blockquote>\n<p>由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。</p>\n<h2 id=\"现状与分歧\"><a href=\"#现状与分歧\" class=\"headerlink\" title=\"现状与分歧\"></a>现状与分歧</h2><p>作为一名前端开发人员，我们应该尝试一些新颖的技术，完善每一个细节性的问题，不断突破自我。虽然前后端分离已经算不上什么新颖的技术或思路，但是目前很多后台开发人员甚至前端开发人员都没有接触过。</p>\n<p>据我个人的了解，如果在一个部门里，部门人员全是后台开发人员，前端的一些页面也是由后台人员完成的，那么前后端分离对于他们而言可能是一片未知的领域，项目大多是前后端强耦合的，甚至不存在前端的概念。</p>\n<p>在不重视前端的公司或部门，不了解前后端分离这也无可厚非。在我刚进入一个全是后台开发人员的部门的时候，整个部门就我一个前端，我刚开始的主要职责就是负责项目前端页面的制作和JS功能的实现，虽然部门有前后端分离的意识，但都不知该如何去实践。在那时，部门的后台人员认为前后端分离就是后台不再需要写HTML和JS了，可以交给前端来做了，然而这只能叫做前后端分工。</p>\n<p>以上讲述的是一种情况: 不了解前后端分离，也不知如何去实践的。下面还有一种情况：了解前后端分离，但不想去尝试的。</p>\n<p>针对第二种情况，很多人也做过相应的解释，其实这就涉及到“前后端分离的利弊”问题。很多后台人员会认为自己所做的那一套没有问题，即便后台套用前端html也是司空见惯，一直是大势所趋，后台MVC框架也是这么推荐使用的，很合理。这时候前端开发人员在部门中的话语权往往是不够的，或者认为后台开发人员的意见永远是对的，没有主观性。</p>\n<p>相反，也有可能是后台开发人员非常推荐前后端分离，而前端开发人员不想去实践的。这时候前端会认为后台开发人员在瞎折腾，之前前后端不分离项目做起来都很顺利，分离了反而会给自己带来额外的工作量和学习成本，而这就取决于前端的技术能力和见识了。</p>\n<p>当然，这也是我个人认为的前后端分离所存在的一些现状和分歧所在。</p>\n<h2 id=\"场景与要求\"><a href=\"#场景与要求\" class=\"headerlink\" title=\"场景与要求\"></a>场景与要求</h2><p>对于前后端分离的应用场景，不是所有的场景都适合，但是大多数项目都能够通过前后端分离来实现。</p>\n<p>由于我主要从事企业级后台应用的前端开发工作，个人认为对于后台应用的开发来说，前后端分离带来的利是远大于弊的。</p>\n<p>大多数后台应用我们都可以做成SPA应用（单页应用），而单页应用最主要的特点就是局部刷新，这通过前端控制路由调用AJAX，后台提供接口便可以实现，而且这样的方式用户体验更加友好，网页加载更加快速，开发和维护成本也降低了不少，效率明显提升。</p>\n<p>同样的，在展示类网站和移动APP页面中前后端分离也同样试用。前后端不分离的情况下，服务端要单独针对Web端做处理，返回完整HTML，这样势必增加服务端的复杂度，可维护性差，而web端需要加载完整的HTML，一定程度上影响网页性能，这对于移动端性能为王的地方非常的不友好。</p>\n<p>随着前端技术的发展和迭代，前端MVC框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。下面是一段前端控制路由的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">export default function (router) &#123;</div><div class=\"line\">    router.map(&#123;</div><div class=\"line\">        &apos;/&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./PC.vue&apos;], resolve)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &apos;/m/:params&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./Mobile.vue&apos;], resolve)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &apos;/p&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./PC.vue&apos;], resolve)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            subRoutes: &#123;</div><div class=\"line\">                &apos;/process/:username&apos;: &#123;</div><div class=\"line\">                    component: function (resolve) &#123;</div><div class=\"line\">                        require([&apos;./components/Process.vue&apos;], resolve)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。</p>\n<h2 id=\"优势与意义\"><a href=\"#优势与意义\" class=\"headerlink\" title=\"优势与意义\"></a>优势与意义</h2><p>对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：</p>\n<ol>\n<li><p>彻底解放前端</p>\n<p>前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--服务器端渲染 --&gt;</div><div class=\"line\">&lt;select&gt;</div><div class=\"line\">    &lt;option value=&apos;&apos;&gt;--请选择所属业务--&lt;/option&gt;</div><div class=\"line\">    &#123;% for p in p_list %&#125;</div><div class=\"line\">    &lt;option value=&quot;&#123;&#123; p &#125;&#125;&quot;&gt;&#123;&#123; p &#125;&#125;&lt;/option&gt;</div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>这是前后端耦合的，可读性差。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--前端渲染 --&gt;</div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;select id=&quot;rander&quot;&gt;</div><div class=\"line\">        &lt;option value=&apos;&apos;&gt;--请选择所属业务--&lt;/option&gt;</div><div class=\"line\">        &lt;option v-for=&quot;list in lists&quot; :value=&quot;list&quot; v-text=&quot;list&quot;&gt;&lt;/option&gt;</div><div class=\"line\">    &lt;/select&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            lists: [&apos;选项一&apos;, &apos;选项二&apos;, &apos;选项三&apos;, &apos;选项四&apos;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;，</div><div class=\"line\">    ready: function () &#123;</div><div class=\"line\">        this.$http(&#123;</div><div class=\"line\">            url: &apos;/demo/&apos;,</div><div class=\"line\">            method: &apos;POST&apos;,</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .then(function (response) &#123;</div><div class=\"line\">            this.lists = response.data.lists // 获取服务器端数据并渲染</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>上面是前端渲染的一段代码，前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。</p>\n</li>\n<li><p>提高工作效率，分工更加明确<br>前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。</p>\n</li>\n<li><p>局部性能提升<br>通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。</p>\n</li>\n<li><p>降低维护成本<br>通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。</p>\n</li>\n</ol>\n<h2 id=\"心得与体会\"><a href=\"#心得与体会\" class=\"headerlink\" title=\"心得与体会\"></a>心得与体会</h2><p>一路走来，项目一个接着一个，从一开始的后台控制路由、后台渲染页面到现在的前端控制路由、前端渲染数据，工作流程和方式都发生了很大的变化。每当遇到下面情形的时候，我都会为前后端分离带来的优势而感慨一番：</p>\n<ol>\n<li>项目一开始制作前端页面的时候，我不再需要后台给我配置服务器环境了</li>\n<li>项目的前端文件可以在需要调用后台接口的时候丢进服务器就好了，完全不需要事先放进去</li>\n<li>增加一个项目页面需要配置路由的时候不再需要让后台同事给我加了，自己前端搞定</li>\n<li>前端文件里不再掺杂后台的代码逻辑了，看起来舒服多了</li>\n<li>页面跳转比之前更加流畅了，局部渲染局部加载非常快速</li>\n<li>页面模板可以重复使用了，前端组件化开发提高了开发效率</li>\n</ol>\n<p>等等。面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。</p>\n<blockquote>\n<p>只有尝试了才知道适不适合，只有切身体会才能辨别谁是谁非，本文并非推崇一定要前后端分离，而是希望大家在合适的应用场景下去尝试前后端分离，在丰富经验的同时或许也会擦出火花。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>这不是一篇纯技术文章，而是一篇分享我个人在前后端分离路上收获的点点滴滴的文章，以此来为准备尝试前后端分离或者想了解前后端分离的童鞋做一个大体的讲解。</p>\n</blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000006240370\">原文 劳卜</a></p>\n<h2 id=\"尝试与改变\"><a href=\"#尝试与改变\" class=\"headerlink\" title=\"尝试与改变\"></a>尝试与改变</h2><p>如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：</p>\n<p>把流程从</p>\n<blockquote>\n<p>PM：“我要这个功能”<br>后端：“这个先找前端做个模板”<br>前端：“模板做完了”<br>后端：“我来对接一下，这里样式不对”<br>前端：“我改完了”<br>后端：“功能交付”<br>PM：“春节要加这个活动”<br>后端：“这个先找前端改个模板”<br>前端：“模板做完了”<br>后端：“我来对接一下，这里样式不对”<br>前端：“我改完了”<br>后端：“功能交付”</p>\n</blockquote>\n<p>变成</p>\n<blockquote>\n<p>PM：“我要这个功能”<br>前端：“我要接口”<br>后端：“接口完成了”<br>前端：“我来对接一下，功能交付”<br>PM：“春节要加这个活动”<br>前端：“需要增加接口”<br>后端：“接口完成了”<br>前端：“我来对接一下，功能交付”</p>\n</blockquote>\n<p>由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。</p>\n<h2 id=\"现状与分歧\"><a href=\"#现状与分歧\" class=\"headerlink\" title=\"现状与分歧\"></a>现状与分歧</h2><p>作为一名前端开发人员，我们应该尝试一些新颖的技术，完善每一个细节性的问题，不断突破自我。虽然前后端分离已经算不上什么新颖的技术或思路，但是目前很多后台开发人员甚至前端开发人员都没有接触过。</p>\n<p>据我个人的了解，如果在一个部门里，部门人员全是后台开发人员，前端的一些页面也是由后台人员完成的，那么前后端分离对于他们而言可能是一片未知的领域，项目大多是前后端强耦合的，甚至不存在前端的概念。</p>\n<p>在不重视前端的公司或部门，不了解前后端分离这也无可厚非。在我刚进入一个全是后台开发人员的部门的时候，整个部门就我一个前端，我刚开始的主要职责就是负责项目前端页面的制作和JS功能的实现，虽然部门有前后端分离的意识，但都不知该如何去实践。在那时，部门的后台人员认为前后端分离就是后台不再需要写HTML和JS了，可以交给前端来做了，然而这只能叫做前后端分工。</p>\n<p>以上讲述的是一种情况: 不了解前后端分离，也不知如何去实践的。下面还有一种情况：了解前后端分离，但不想去尝试的。</p>\n<p>针对第二种情况，很多人也做过相应的解释，其实这就涉及到“前后端分离的利弊”问题。很多后台人员会认为自己所做的那一套没有问题，即便后台套用前端html也是司空见惯，一直是大势所趋，后台MVC框架也是这么推荐使用的，很合理。这时候前端开发人员在部门中的话语权往往是不够的，或者认为后台开发人员的意见永远是对的，没有主观性。</p>\n<p>相反，也有可能是后台开发人员非常推荐前后端分离，而前端开发人员不想去实践的。这时候前端会认为后台开发人员在瞎折腾，之前前后端不分离项目做起来都很顺利，分离了反而会给自己带来额外的工作量和学习成本，而这就取决于前端的技术能力和见识了。</p>\n<p>当然，这也是我个人认为的前后端分离所存在的一些现状和分歧所在。</p>\n<h2 id=\"场景与要求\"><a href=\"#场景与要求\" class=\"headerlink\" title=\"场景与要求\"></a>场景与要求</h2><p>对于前后端分离的应用场景，不是所有的场景都适合，但是大多数项目都能够通过前后端分离来实现。</p>\n<p>由于我主要从事企业级后台应用的前端开发工作，个人认为对于后台应用的开发来说，前后端分离带来的利是远大于弊的。</p>\n<p>大多数后台应用我们都可以做成SPA应用（单页应用），而单页应用最主要的特点就是局部刷新，这通过前端控制路由调用AJAX，后台提供接口便可以实现，而且这样的方式用户体验更加友好，网页加载更加快速，开发和维护成本也降低了不少，效率明显提升。</p>\n<p>同样的，在展示类网站和移动APP页面中前后端分离也同样试用。前后端不分离的情况下，服务端要单独针对Web端做处理，返回完整HTML，这样势必增加服务端的复杂度，可维护性差，而web端需要加载完整的HTML，一定程度上影响网页性能，这对于移动端性能为王的地方非常的不友好。</p>\n<p>随着前端技术的发展和迭代，前端MVC框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。下面是一段前端控制路由的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">export default function (router) &#123;</div><div class=\"line\">    router.map(&#123;</div><div class=\"line\">        &apos;/&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./PC.vue&apos;], resolve)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &apos;/m/:params&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./Mobile.vue&apos;], resolve)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &apos;/p&apos;: &#123;</div><div class=\"line\">            component: function (resolve) &#123;</div><div class=\"line\">                require([&apos;./PC.vue&apos;], resolve)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            subRoutes: &#123;</div><div class=\"line\">                &apos;/process/:username&apos;: &#123;</div><div class=\"line\">                    component: function (resolve) &#123;</div><div class=\"line\">                        require([&apos;./components/Process.vue&apos;], resolve)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。</p>\n<h2 id=\"优势与意义\"><a href=\"#优势与意义\" class=\"headerlink\" title=\"优势与意义\"></a>优势与意义</h2><p>对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：</p>\n<ol>\n<li><p>彻底解放前端</p>\n<p>前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--服务器端渲染 --&gt;</div><div class=\"line\">&lt;select&gt;</div><div class=\"line\">    &lt;option value=&apos;&apos;&gt;--请选择所属业务--&lt;/option&gt;</div><div class=\"line\">    &#123;% for p in p_list %&#125;</div><div class=\"line\">    &lt;option value=&quot;&#123;&#123; p &#125;&#125;&quot;&gt;&#123;&#123; p &#125;&#125;&lt;/option&gt;</div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>这是前后端耦合的，可读性差。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--前端渲染 --&gt;</div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;select id=&quot;rander&quot;&gt;</div><div class=\"line\">        &lt;option value=&apos;&apos;&gt;--请选择所属业务--&lt;/option&gt;</div><div class=\"line\">        &lt;option v-for=&quot;list in lists&quot; :value=&quot;list&quot; v-text=&quot;list&quot;&gt;&lt;/option&gt;</div><div class=\"line\">    &lt;/select&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            lists: [&apos;选项一&apos;, &apos;选项二&apos;, &apos;选项三&apos;, &apos;选项四&apos;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;，</div><div class=\"line\">    ready: function () &#123;</div><div class=\"line\">        this.$http(&#123;</div><div class=\"line\">            url: &apos;/demo/&apos;,</div><div class=\"line\">            method: &apos;POST&apos;,</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .then(function (response) &#123;</div><div class=\"line\">            this.lists = response.data.lists // 获取服务器端数据并渲染</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>上面是前端渲染的一段代码，前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。</p>\n</li>\n<li><p>提高工作效率，分工更加明确<br>前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。</p>\n</li>\n<li><p>局部性能提升<br>通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。</p>\n</li>\n<li><p>降低维护成本<br>通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。</p>\n</li>\n</ol>\n<h2 id=\"心得与体会\"><a href=\"#心得与体会\" class=\"headerlink\" title=\"心得与体会\"></a>心得与体会</h2><p>一路走来，项目一个接着一个，从一开始的后台控制路由、后台渲染页面到现在的前端控制路由、前端渲染数据，工作流程和方式都发生了很大的变化。每当遇到下面情形的时候，我都会为前后端分离带来的优势而感慨一番：</p>\n<ol>\n<li>项目一开始制作前端页面的时候，我不再需要后台给我配置服务器环境了</li>\n<li>项目的前端文件可以在需要调用后台接口的时候丢进服务器就好了，完全不需要事先放进去</li>\n<li>增加一个项目页面需要配置路由的时候不再需要让后台同事给我加了，自己前端搞定</li>\n<li>前端文件里不再掺杂后台的代码逻辑了，看起来舒服多了</li>\n<li>页面跳转比之前更加流畅了，局部渲染局部加载非常快速</li>\n<li>页面模板可以重复使用了，前端组件化开发提高了开发效率</li>\n</ol>\n<p>等等。面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。</p>\n<blockquote>\n<p>只有尝试了才知道适不适合，只有切身体会才能辨别谁是谁非，本文并非推崇一定要前后端分离，而是希望大家在合适的应用场景下去尝试前后端分离，在丰富经验的同时或许也会擦出火花。</p>\n</blockquote>\n"},{"title":"微服务架构-开源API网关Kong的部署与使用","date":"2016-12-16T16:47:09.000Z","_content":"[原文 酱酱酱子](http://heqin.blog.51cto.com/8931355/1865665)\n\n### 前言：\n   微服务架构是现在很火热的技术话题，其本质是将庞大而复杂的系统，拆分成微小的服务模块，使服务之间实现解耦，能够实现各模块的独立开发、升级、部署。大大降低了系统的运维及开发难度。\n\n 然而由于服务的拆分，客户端可能同时需要和多个服务进行交互，随着微服务规模的增大，这样的交互模式在性能和管理上都有很大的不便。那么基于微服务的客户端如何能够更好的去访问这些独立的服务呢，这时我们就需要一个统一的入口来向外提供服务。这就是我们所说的API网关，\n\n  API Gateway是一个在客户端和服务之间的中间人，客户端不用直接访问服务器，而是通过API Gateway来传递中间消息。API Gateway能够实现负载均衡、缓存、访问控制、API 计费监控等等功能。下面为网上关于API Gateway的图。\n\n  Kong 是由Mashape公司开发的一款API Gateway的软件，Kong是基于nginx开发，用来接收客户端的API请求，同时还需要一个数据库来存储操作数据。写这篇文章时Kong的最新版是0.9.3，其支持数据库为PostgreSQL 9.4+ 和Cassandra 2.2.x .\n\n  一：安装\ncentos\n（1）：安装kong\n```\n$ sudo yum install epel-release\n$ sudo yum install kong-0.9.3.*.noarch.rpm --nogpgcheck\n```\n\nor\nDownload kong-0.9.3.el7.noarch.rpm\n```\n$ wget kong-0.9.3.el7.noarch.rpm\n```\n（2）：配置数据库\nkong支持 PostgreSQL 9.4+ 和Cassandra 2.2.x .\n如果使用PostgreSQL数据库，请创建用户和对应的数据库\n```\n$ CREATE USER kong; CREATE DATABASE kong OWNER kong;\n```\n（3）：启动\n\n```\n$ kong start\n# Kong is running\n$ curl 127.0.0.1:8001\n```\nKong启动后，会分别监听8000端口和8001端口。8000端口是用来提供服务，8001是用来对API进行管理。\n\n\ndocker\n（1）:启动数据库\ncassandra\n```\n$ docker run -d --name kong-database \\\n              -p 9042:9042 \\\n              cassandra:2.2\n```\n\nOR PostgreSQL\n\n```\n$ docker run -d --name kong-database \\\n              -p 5432:5432 \\\n              -e \"POSTGRES_USER=kong\" \\\n              -e \"POSTGRES_DB=kong\" \\\n              postgres:9.4\n```\n\n（2）：启动kong\n\n```\n$ docker run -d --name kong \\\n              --link kong-database:kong-database \\\n              -e \"KONG_DATABASE=cassandra\" \\\n              -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n              -e \"KONG_PG_HOST=kong-database\" \\\n              -p 8000:8000 \\\n              -p 8443:8443 \\\n              -p 8001:8001 \\\n              -p 7946:7946 \\\n              -p 7946:7946/udp \\\n              kong\n```\n\n附上docker-compose.yml\n\n```\nkong-database:\n  image: postgres:9.4\n  ports:\n  - 5432:5432/tcp\n  environment:\n  - POSTGRES_USER=kong\n  - POSTGRES_DB=kong\nkong:\n  image: kong\n  links:\n  -  kong-database:kong-database\n  environment:\n  - KONG_DATABASE=postgres\n  - KONG_CASSANDRA_CONTACT_POINTS=kong-database\n  - KONG_PG_HOST=kong-database\n  ports:\n  - 8000:8000/tcp\n  - 8443:8443/tcp\n  - 8001:8001/tcp\n  - 7946:7946/tcp\n  - 7946:7946/udp\n```\n\n二：使用kong\n（1）：添加api到kong\n\n```\n$ curl -i -X POST \\\n--url http://localhost:8001/apis/ \\\n--data 'name=baidu' \\\n--data 'upstream_url=http://baidu.com/' \\\n--data 'request_host=baidu.com'\n--url：8001端口是Kong的管理端口。\n```\nupstream_url：提供服务的后端url。\n\nrequest_path：使用path参数时，加入该路径的服务接口。\n\nrequest_host 使用这个参数时，将加入该host的所有服务接口：\n\n\n（2）:查询已经添加的API\n\n```\n$curl localhost:8001/apis/\n```\n\n（3）:访问API\n\n```\n$curl -i -X POST --url http://localhost:8000/ --header 10.100.55.1\n```\n\n（4）:删除API\n根据API_NAME or API_ID来删除指定api\n```\n$curl -i -X DELETE localhost:8001/apis/00f90ca9-cf2d-4830-c842-3b90f6cd08af\n$curl -i -X DELETE localhost:8001/apis/test1\n```\n（5）:添加实例\n实例1  (request_path限制path内的接口)\nURL:\nhttp://10.100.55.1/hello1/index.html\n添加:\n\n```\n$curl -i -X POST --url http://localhost:8001/apis/ \\\n--data name=test1 \\\n--data 'upstream_url=http://10.100.55.1' \\\n--data 'request_path=/hello1/'\n```\n\n访问接口:\n```\n$curl -i -X GET --url http://localhost:8000/hello1/\n```\n所谓的request_path，就是固定只能访问hello1下的内容，如果该host的www目录下还有hello2、hello3、那么是不能通过网关去访问这个目录下的内容，例如下面是访问不到的，因为没有加入到Kong中。\n```\n$curl -i -X GET --url http://localhost:8000/hello2/\n```\n\n实例2  (request_host可以访问host所有接口)\nURL:\nhttp://10.100.55.1\n添加:\n```\n$ curl -i -X POST --url http://localhost:8001/apis/ \\\n--data name=test2 \\\n--data 'upstream_url=http://10.100.55.1' \\\n--data 'request_host=10.100.55.1'\n```\n访问接口:\n使用request_host后，该host所有api都加入到Kong中，下面的都能够通过网关访问。\n```\n$curl -i -X GET --url http://localhost:8000/hello1  --header host:10.100.55.1\n$curl -i -X GET --url http://localhost:8000/hello2 --header host:10.100.55.1\n```\n实例3 (request_host  port:8080)\nURL:\nhttp://10.100.55.2:8080\n添加:\n```\n$curl -i -X POST --url http://localhost:8001/apis/ \\\n--data  name=test3  \\\n--data 'upstream_url=http://10.100.55.2:8080' \\\n--data 'request_host=10.100.55.2'\n```\n访问接口:\n```\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.2\n```\n实例4 （复杂url的添加和访问）\nURL:\nhttp://10.100.55.3:8000/opj/list?serviceId=box&c=nanjing\n添加:\n1\n$ curl -i -X POST --url http://localhost:8001/apis/ --data 'name=test4' --data 'upstream_url=http://10.100.55.3:8000/' --data 'request_path=/opj/list'\n访问接口:\n```\n$ curl -i -X GET --url http://localhost:8000/opj/list?serviceId=box&c=nanjing\n```\n\n\n三：创建认证\n（1）给API配置pulgin认证\n1：添加api\n```\n$curl -i -X POST --url http://localhost:8001/apis/ --data 'name=test5' --data 'upstream_url=http://10.100.55.1/' --data 'request_host=10.100.55.1'\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1\n```\n访问正常\n```\nConnect  Success...\n```\n2：添加plugin认证\n```\n$curl -i -X POST --url http://localhost:8001/apis/test5/plugins/ --data 'name=key-auth'\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1\n```\n访问失败\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: Key realm=\"kong\"\nServer: kong/0.9.3\n{\"message\":\"No API key found in headers or querystring\"}\n```\n（2）添加用户\n1：创建用户\n```\n$curl -i -X POST --url http://localhost:8001/consumers/ --data \"username=heqin\"\n{\"username\":\"heqin\",\"created_at\":1477382339000,\"id\":\"8e6273c9-f332-4d68-b74c-73ae9f82f150\"}\n```\n2：给用户创建key\n```\n$curl -i -X POST --url http://localhost:8001/consumers/heqin/key-auth/ --data 'key=helloworld'\n{\"created_at\":1477382483000,\"consumer_id\":\"8e6273c9-f332-4d68-b74c-73ae9f82f150\",\"key\":\"helloworld\",\"id\":\"62c0d640-b1bd-4f3b-aa6e-ba3adaf8ec38\"}\n```\n3：带着key去访问\n```\n$curl -i -X GET --url http://localhost:8000/  --header host:10.100.55.1 --header apikey:helloworld\n```\n访问成功\n```\nConnect  Success...\n```\n通过上面的两步，就可以实现对API接口的权限控制。\n\n未完待续。。。。。。。\n","source":"_posts/微服务架构-开源API网关Kong的部署与使用.md","raw":"---\ntitle: 微服务架构-开源API网关Kong的部署与使用\ndate: 2016-12-17 00:47:09\ntags: kong,api\n---\n[原文 酱酱酱子](http://heqin.blog.51cto.com/8931355/1865665)\n\n### 前言：\n   微服务架构是现在很火热的技术话题，其本质是将庞大而复杂的系统，拆分成微小的服务模块，使服务之间实现解耦，能够实现各模块的独立开发、升级、部署。大大降低了系统的运维及开发难度。\n\n 然而由于服务的拆分，客户端可能同时需要和多个服务进行交互，随着微服务规模的增大，这样的交互模式在性能和管理上都有很大的不便。那么基于微服务的客户端如何能够更好的去访问这些独立的服务呢，这时我们就需要一个统一的入口来向外提供服务。这就是我们所说的API网关，\n\n  API Gateway是一个在客户端和服务之间的中间人，客户端不用直接访问服务器，而是通过API Gateway来传递中间消息。API Gateway能够实现负载均衡、缓存、访问控制、API 计费监控等等功能。下面为网上关于API Gateway的图。\n\n  Kong 是由Mashape公司开发的一款API Gateway的软件，Kong是基于nginx开发，用来接收客户端的API请求，同时还需要一个数据库来存储操作数据。写这篇文章时Kong的最新版是0.9.3，其支持数据库为PostgreSQL 9.4+ 和Cassandra 2.2.x .\n\n  一：安装\ncentos\n（1）：安装kong\n```\n$ sudo yum install epel-release\n$ sudo yum install kong-0.9.3.*.noarch.rpm --nogpgcheck\n```\n\nor\nDownload kong-0.9.3.el7.noarch.rpm\n```\n$ wget kong-0.9.3.el7.noarch.rpm\n```\n（2）：配置数据库\nkong支持 PostgreSQL 9.4+ 和Cassandra 2.2.x .\n如果使用PostgreSQL数据库，请创建用户和对应的数据库\n```\n$ CREATE USER kong; CREATE DATABASE kong OWNER kong;\n```\n（3）：启动\n\n```\n$ kong start\n# Kong is running\n$ curl 127.0.0.1:8001\n```\nKong启动后，会分别监听8000端口和8001端口。8000端口是用来提供服务，8001是用来对API进行管理。\n\n\ndocker\n（1）:启动数据库\ncassandra\n```\n$ docker run -d --name kong-database \\\n              -p 9042:9042 \\\n              cassandra:2.2\n```\n\nOR PostgreSQL\n\n```\n$ docker run -d --name kong-database \\\n              -p 5432:5432 \\\n              -e \"POSTGRES_USER=kong\" \\\n              -e \"POSTGRES_DB=kong\" \\\n              postgres:9.4\n```\n\n（2）：启动kong\n\n```\n$ docker run -d --name kong \\\n              --link kong-database:kong-database \\\n              -e \"KONG_DATABASE=cassandra\" \\\n              -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n              -e \"KONG_PG_HOST=kong-database\" \\\n              -p 8000:8000 \\\n              -p 8443:8443 \\\n              -p 8001:8001 \\\n              -p 7946:7946 \\\n              -p 7946:7946/udp \\\n              kong\n```\n\n附上docker-compose.yml\n\n```\nkong-database:\n  image: postgres:9.4\n  ports:\n  - 5432:5432/tcp\n  environment:\n  - POSTGRES_USER=kong\n  - POSTGRES_DB=kong\nkong:\n  image: kong\n  links:\n  -  kong-database:kong-database\n  environment:\n  - KONG_DATABASE=postgres\n  - KONG_CASSANDRA_CONTACT_POINTS=kong-database\n  - KONG_PG_HOST=kong-database\n  ports:\n  - 8000:8000/tcp\n  - 8443:8443/tcp\n  - 8001:8001/tcp\n  - 7946:7946/tcp\n  - 7946:7946/udp\n```\n\n二：使用kong\n（1）：添加api到kong\n\n```\n$ curl -i -X POST \\\n--url http://localhost:8001/apis/ \\\n--data 'name=baidu' \\\n--data 'upstream_url=http://baidu.com/' \\\n--data 'request_host=baidu.com'\n--url：8001端口是Kong的管理端口。\n```\nupstream_url：提供服务的后端url。\n\nrequest_path：使用path参数时，加入该路径的服务接口。\n\nrequest_host 使用这个参数时，将加入该host的所有服务接口：\n\n\n（2）:查询已经添加的API\n\n```\n$curl localhost:8001/apis/\n```\n\n（3）:访问API\n\n```\n$curl -i -X POST --url http://localhost:8000/ --header 10.100.55.1\n```\n\n（4）:删除API\n根据API_NAME or API_ID来删除指定api\n```\n$curl -i -X DELETE localhost:8001/apis/00f90ca9-cf2d-4830-c842-3b90f6cd08af\n$curl -i -X DELETE localhost:8001/apis/test1\n```\n（5）:添加实例\n实例1  (request_path限制path内的接口)\nURL:\nhttp://10.100.55.1/hello1/index.html\n添加:\n\n```\n$curl -i -X POST --url http://localhost:8001/apis/ \\\n--data name=test1 \\\n--data 'upstream_url=http://10.100.55.1' \\\n--data 'request_path=/hello1/'\n```\n\n访问接口:\n```\n$curl -i -X GET --url http://localhost:8000/hello1/\n```\n所谓的request_path，就是固定只能访问hello1下的内容，如果该host的www目录下还有hello2、hello3、那么是不能通过网关去访问这个目录下的内容，例如下面是访问不到的，因为没有加入到Kong中。\n```\n$curl -i -X GET --url http://localhost:8000/hello2/\n```\n\n实例2  (request_host可以访问host所有接口)\nURL:\nhttp://10.100.55.1\n添加:\n```\n$ curl -i -X POST --url http://localhost:8001/apis/ \\\n--data name=test2 \\\n--data 'upstream_url=http://10.100.55.1' \\\n--data 'request_host=10.100.55.1'\n```\n访问接口:\n使用request_host后，该host所有api都加入到Kong中，下面的都能够通过网关访问。\n```\n$curl -i -X GET --url http://localhost:8000/hello1  --header host:10.100.55.1\n$curl -i -X GET --url http://localhost:8000/hello2 --header host:10.100.55.1\n```\n实例3 (request_host  port:8080)\nURL:\nhttp://10.100.55.2:8080\n添加:\n```\n$curl -i -X POST --url http://localhost:8001/apis/ \\\n--data  name=test3  \\\n--data 'upstream_url=http://10.100.55.2:8080' \\\n--data 'request_host=10.100.55.2'\n```\n访问接口:\n```\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.2\n```\n实例4 （复杂url的添加和访问）\nURL:\nhttp://10.100.55.3:8000/opj/list?serviceId=box&c=nanjing\n添加:\n1\n$ curl -i -X POST --url http://localhost:8001/apis/ --data 'name=test4' --data 'upstream_url=http://10.100.55.3:8000/' --data 'request_path=/opj/list'\n访问接口:\n```\n$ curl -i -X GET --url http://localhost:8000/opj/list?serviceId=box&c=nanjing\n```\n\n\n三：创建认证\n（1）给API配置pulgin认证\n1：添加api\n```\n$curl -i -X POST --url http://localhost:8001/apis/ --data 'name=test5' --data 'upstream_url=http://10.100.55.1/' --data 'request_host=10.100.55.1'\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1\n```\n访问正常\n```\nConnect  Success...\n```\n2：添加plugin认证\n```\n$curl -i -X POST --url http://localhost:8001/apis/test5/plugins/ --data 'name=key-auth'\n$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1\n```\n访问失败\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: Key realm=\"kong\"\nServer: kong/0.9.3\n{\"message\":\"No API key found in headers or querystring\"}\n```\n（2）添加用户\n1：创建用户\n```\n$curl -i -X POST --url http://localhost:8001/consumers/ --data \"username=heqin\"\n{\"username\":\"heqin\",\"created_at\":1477382339000,\"id\":\"8e6273c9-f332-4d68-b74c-73ae9f82f150\"}\n```\n2：给用户创建key\n```\n$curl -i -X POST --url http://localhost:8001/consumers/heqin/key-auth/ --data 'key=helloworld'\n{\"created_at\":1477382483000,\"consumer_id\":\"8e6273c9-f332-4d68-b74c-73ae9f82f150\",\"key\":\"helloworld\",\"id\":\"62c0d640-b1bd-4f3b-aa6e-ba3adaf8ec38\"}\n```\n3：带着key去访问\n```\n$curl -i -X GET --url http://localhost:8000/  --header host:10.100.55.1 --header apikey:helloworld\n```\n访问成功\n```\nConnect  Success...\n```\n通过上面的两步，就可以实现对API接口的权限控制。\n\n未完待续。。。。。。。\n","slug":"微服务架构-开源API网关Kong的部署与使用","published":1,"updated":"2016-12-17T02:38:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63p6zp3000hnxx3a6gsx5sz","content":"<p><a href=\"http://heqin.blog.51cto.com/8931355/1865665\" target=\"_blank\" rel=\"external\">原文 酱酱酱子</a></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>   微服务架构是现在很火热的技术话题，其本质是将庞大而复杂的系统，拆分成微小的服务模块，使服务之间实现解耦，能够实现各模块的独立开发、升级、部署。大大降低了系统的运维及开发难度。</p>\n<p> 然而由于服务的拆分，客户端可能同时需要和多个服务进行交互，随着微服务规模的增大，这样的交互模式在性能和管理上都有很大的不便。那么基于微服务的客户端如何能够更好的去访问这些独立的服务呢，这时我们就需要一个统一的入口来向外提供服务。这就是我们所说的API网关，</p>\n<p>  API Gateway是一个在客户端和服务之间的中间人，客户端不用直接访问服务器，而是通过API Gateway来传递中间消息。API Gateway能够实现负载均衡、缓存、访问控制、API 计费监控等等功能。下面为网上关于API Gateway的图。</p>\n<p>  Kong 是由Mashape公司开发的一款API Gateway的软件，Kong是基于nginx开发，用来接收客户端的API请求，同时还需要一个数据库来存储操作数据。写这篇文章时Kong的最新版是0.9.3，其支持数据库为PostgreSQL 9.4+ 和Cassandra 2.2.x .</p>\n<p>  一：安装<br>centos<br>（1）：安装kong<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum install epel-release</div><div class=\"line\">$ sudo yum install kong-0.9.3.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p>\n<p>or<br>Download kong-0.9.3.el7.noarch.rpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget kong-0.9.3.el7.noarch.rpm</div></pre></td></tr></table></figure></p>\n<p>（2）：配置数据库<br>kong支持 PostgreSQL 9.4+ 和Cassandra 2.2.x .<br>如果使用PostgreSQL数据库，请创建用户和对应的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ CREATE USER kong; CREATE DATABASE kong OWNER kong;</div></pre></td></tr></table></figure></p>\n<p>（3）：启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ kong start</div><div class=\"line\"># Kong is running</div><div class=\"line\">$ curl 127.0.0.1:8001</div></pre></td></tr></table></figure>\n<p>Kong启动后，会分别监听8000端口和8001端口。8000端口是用来提供服务，8001是用来对API进行管理。</p>\n<p>docker<br>（1）:启动数据库<br>cassandra<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong-database \\</div><div class=\"line\">              -p 9042:9042 \\</div><div class=\"line\">              cassandra:2.2</div></pre></td></tr></table></figure></p>\n<p>OR PostgreSQL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong-database \\</div><div class=\"line\">              -p 5432:5432 \\</div><div class=\"line\">              -e &quot;POSTGRES_USER=kong&quot; \\</div><div class=\"line\">              -e &quot;POSTGRES_DB=kong&quot; \\</div><div class=\"line\">              postgres:9.4</div></pre></td></tr></table></figure>\n<p>（2）：启动kong</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong \\</div><div class=\"line\">              --link kong-database:kong-database \\</div><div class=\"line\">              -e &quot;KONG_DATABASE=cassandra&quot; \\</div><div class=\"line\">              -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \\</div><div class=\"line\">              -e &quot;KONG_PG_HOST=kong-database&quot; \\</div><div class=\"line\">              -p 8000:8000 \\</div><div class=\"line\">              -p 8443:8443 \\</div><div class=\"line\">              -p 8001:8001 \\</div><div class=\"line\">              -p 7946:7946 \\</div><div class=\"line\">              -p 7946:7946/udp \\</div><div class=\"line\">              kong</div></pre></td></tr></table></figure>\n<p>附上docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">kong-database:</div><div class=\"line\">  image: postgres:9.4</div><div class=\"line\">  ports:</div><div class=\"line\">  - 5432:5432/tcp</div><div class=\"line\">  environment:</div><div class=\"line\">  - POSTGRES_USER=kong</div><div class=\"line\">  - POSTGRES_DB=kong</div><div class=\"line\">kong:</div><div class=\"line\">  image: kong</div><div class=\"line\">  links:</div><div class=\"line\">  -  kong-database:kong-database</div><div class=\"line\">  environment:</div><div class=\"line\">  - KONG_DATABASE=postgres</div><div class=\"line\">  - KONG_CASSANDRA_CONTACT_POINTS=kong-database</div><div class=\"line\">  - KONG_PG_HOST=kong-database</div><div class=\"line\">  ports:</div><div class=\"line\">  - 8000:8000/tcp</div><div class=\"line\">  - 8443:8443/tcp</div><div class=\"line\">  - 8001:8001/tcp</div><div class=\"line\">  - 7946:7946/tcp</div><div class=\"line\">  - 7946:7946/udp</div></pre></td></tr></table></figure>\n<p>二：使用kong<br>（1）：添加api到kong</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">--url http://localhost:8001/apis/ \\</div><div class=\"line\">--data &apos;name=baidu&apos; \\</div><div class=\"line\">--data &apos;upstream_url=http://baidu.com/&apos; \\</div><div class=\"line\">--data &apos;request_host=baidu.com&apos;</div><div class=\"line\">--url：8001端口是Kong的管理端口。</div></pre></td></tr></table></figure>\n<p>upstream_url：提供服务的后端url。</p>\n<p>request_path：使用path参数时，加入该路径的服务接口。</p>\n<p>request_host 使用这个参数时，将加入该host的所有服务接口：</p>\n<p>（2）:查询已经添加的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl localhost:8001/apis/</div></pre></td></tr></table></figure>\n<p>（3）:访问API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8000/ --header 10.100.55.1</div></pre></td></tr></table></figure>\n<p>（4）:删除API<br>根据API_NAME or API_ID来删除指定api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X DELETE localhost:8001/apis/00f90ca9-cf2d-4830-c842-3b90f6cd08af</div><div class=\"line\">$curl -i -X DELETE localhost:8001/apis/test1</div></pre></td></tr></table></figure></p>\n<p>（5）:添加实例<br>实例1  (request_path限制path内的接口)<br>URL:<br><a href=\"http://10.100.55.1/hello1/index.html\" target=\"_blank\" rel=\"external\">http://10.100.55.1/hello1/index.html</a><br>添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data name=test1 \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.1&apos; \\</div><div class=\"line\">--data &apos;request_path=/hello1/&apos;</div></pre></td></tr></table></figure>\n<p>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello1/</div></pre></td></tr></table></figure></p>\n<p>所谓的request_path，就是固定只能访问hello1下的内容，如果该host的www目录下还有hello2、hello3、那么是不能通过网关去访问这个目录下的内容，例如下面是访问不到的，因为没有加入到Kong中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello2/</div></pre></td></tr></table></figure></p>\n<p>实例2  (request_host可以访问host所有接口)<br>URL:<br><a href=\"http://10.100.55.1\" target=\"_blank\" rel=\"external\">http://10.100.55.1</a><br>添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data name=test2 \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.1&apos; \\</div><div class=\"line\">--data &apos;request_host=10.100.55.1&apos;</div></pre></td></tr></table></figure></p>\n<p>访问接口:<br>使用request_host后，该host所有api都加入到Kong中，下面的都能够通过网关访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello1  --header host:10.100.55.1</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello2 --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>实例3 (request_host  port:8080)<br>URL:<br><a href=\"http://10.100.55.2:8080\" target=\"_blank\" rel=\"external\">http://10.100.55.2:8080</a><br>添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data  name=test3  \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.2:8080&apos; \\</div><div class=\"line\">--data &apos;request_host=10.100.55.2&apos;</div></pre></td></tr></table></figure></p>\n<p>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.2</div></pre></td></tr></table></figure></p>\n<p>实例4 （复杂url的添加和访问）<br>URL:<br><a href=\"http://10.100.55.3:8000/opj/list?serviceId=box&amp;c=nanjing\" target=\"_blank\" rel=\"external\">http://10.100.55.3:8000/opj/list?serviceId=box&amp;c=nanjing</a><br>添加:<br>1<br>$ curl -i -X POST –url <a href=\"http://localhost:8001/apis/\" target=\"_blank\" rel=\"external\">http://localhost:8001/apis/</a> –data ‘name=test4’ –data ‘upstream_url=<a href=\"http://10.100.55.3:8000/\" target=\"_blank\" rel=\"external\">http://10.100.55.3:8000/</a>‘ –data ‘request_path=/opj/list’<br>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET --url http://localhost:8000/opj/list?serviceId=box&amp;c=nanjing</div></pre></td></tr></table></figure></p>\n<p>三：创建认证<br>（1）给API配置pulgin认证<br>1：添加api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ --data &apos;name=test5&apos; --data &apos;upstream_url=http://10.100.55.1/&apos; --data &apos;request_host=10.100.55.1&apos;</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>访问正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connect  Success...</div></pre></td></tr></table></figure></p>\n<p>2：添加plugin认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/test5/plugins/ --data &apos;name=key-auth&apos;</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>访问失败<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 401 Unauthorized</div><div class=\"line\">WWW-Authenticate: Key realm=&quot;kong&quot;</div><div class=\"line\">Server: kong/0.9.3</div><div class=\"line\">&#123;&quot;message&quot;:&quot;No API key found in headers or querystring&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>（2）添加用户<br>1：创建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/consumers/ --data &quot;username=heqin&quot;</div><div class=\"line\">&#123;&quot;username&quot;:&quot;heqin&quot;,&quot;created_at&quot;:1477382339000,&quot;id&quot;:&quot;8e6273c9-f332-4d68-b74c-73ae9f82f150&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>2：给用户创建key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/consumers/heqin/key-auth/ --data &apos;key=helloworld&apos;</div><div class=\"line\">&#123;&quot;created_at&quot;:1477382483000,&quot;consumer_id&quot;:&quot;8e6273c9-f332-4d68-b74c-73ae9f82f150&quot;,&quot;key&quot;:&quot;helloworld&quot;,&quot;id&quot;:&quot;62c0d640-b1bd-4f3b-aa6e-ba3adaf8ec38&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>3：带着key去访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/  --header host:10.100.55.1 --header apikey:helloworld</div></pre></td></tr></table></figure></p>\n<p>访问成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connect  Success...</div></pre></td></tr></table></figure></p>\n<p>通过上面的两步，就可以实现对API接口的权限控制。</p>\n<p>未完待续。。。。。。。</p>\n","excerpt":"","more":"<p><a href=\"http://heqin.blog.51cto.com/8931355/1865665\">原文 酱酱酱子</a></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>   微服务架构是现在很火热的技术话题，其本质是将庞大而复杂的系统，拆分成微小的服务模块，使服务之间实现解耦，能够实现各模块的独立开发、升级、部署。大大降低了系统的运维及开发难度。</p>\n<p> 然而由于服务的拆分，客户端可能同时需要和多个服务进行交互，随着微服务规模的增大，这样的交互模式在性能和管理上都有很大的不便。那么基于微服务的客户端如何能够更好的去访问这些独立的服务呢，这时我们就需要一个统一的入口来向外提供服务。这就是我们所说的API网关，</p>\n<p>  API Gateway是一个在客户端和服务之间的中间人，客户端不用直接访问服务器，而是通过API Gateway来传递中间消息。API Gateway能够实现负载均衡、缓存、访问控制、API 计费监控等等功能。下面为网上关于API Gateway的图。</p>\n<p>  Kong 是由Mashape公司开发的一款API Gateway的软件，Kong是基于nginx开发，用来接收客户端的API请求，同时还需要一个数据库来存储操作数据。写这篇文章时Kong的最新版是0.9.3，其支持数据库为PostgreSQL 9.4+ 和Cassandra 2.2.x .</p>\n<p>  一：安装<br>centos<br>（1）：安装kong<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum install epel-release</div><div class=\"line\">$ sudo yum install kong-0.9.3.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p>\n<p>or<br>Download kong-0.9.3.el7.noarch.rpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget kong-0.9.3.el7.noarch.rpm</div></pre></td></tr></table></figure></p>\n<p>（2）：配置数据库<br>kong支持 PostgreSQL 9.4+ 和Cassandra 2.2.x .<br>如果使用PostgreSQL数据库，请创建用户和对应的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ CREATE USER kong; CREATE DATABASE kong OWNER kong;</div></pre></td></tr></table></figure></p>\n<p>（3）：启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ kong start</div><div class=\"line\"># Kong is running</div><div class=\"line\">$ curl 127.0.0.1:8001</div></pre></td></tr></table></figure>\n<p>Kong启动后，会分别监听8000端口和8001端口。8000端口是用来提供服务，8001是用来对API进行管理。</p>\n<p>docker<br>（1）:启动数据库<br>cassandra<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong-database \\</div><div class=\"line\">              -p 9042:9042 \\</div><div class=\"line\">              cassandra:2.2</div></pre></td></tr></table></figure></p>\n<p>OR PostgreSQL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong-database \\</div><div class=\"line\">              -p 5432:5432 \\</div><div class=\"line\">              -e &quot;POSTGRES_USER=kong&quot; \\</div><div class=\"line\">              -e &quot;POSTGRES_DB=kong&quot; \\</div><div class=\"line\">              postgres:9.4</div></pre></td></tr></table></figure>\n<p>（2）：启动kong</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker run -d --name kong \\</div><div class=\"line\">              --link kong-database:kong-database \\</div><div class=\"line\">              -e &quot;KONG_DATABASE=cassandra&quot; \\</div><div class=\"line\">              -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \\</div><div class=\"line\">              -e &quot;KONG_PG_HOST=kong-database&quot; \\</div><div class=\"line\">              -p 8000:8000 \\</div><div class=\"line\">              -p 8443:8443 \\</div><div class=\"line\">              -p 8001:8001 \\</div><div class=\"line\">              -p 7946:7946 \\</div><div class=\"line\">              -p 7946:7946/udp \\</div><div class=\"line\">              kong</div></pre></td></tr></table></figure>\n<p>附上docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">kong-database:</div><div class=\"line\">  image: postgres:9.4</div><div class=\"line\">  ports:</div><div class=\"line\">  - 5432:5432/tcp</div><div class=\"line\">  environment:</div><div class=\"line\">  - POSTGRES_USER=kong</div><div class=\"line\">  - POSTGRES_DB=kong</div><div class=\"line\">kong:</div><div class=\"line\">  image: kong</div><div class=\"line\">  links:</div><div class=\"line\">  -  kong-database:kong-database</div><div class=\"line\">  environment:</div><div class=\"line\">  - KONG_DATABASE=postgres</div><div class=\"line\">  - KONG_CASSANDRA_CONTACT_POINTS=kong-database</div><div class=\"line\">  - KONG_PG_HOST=kong-database</div><div class=\"line\">  ports:</div><div class=\"line\">  - 8000:8000/tcp</div><div class=\"line\">  - 8443:8443/tcp</div><div class=\"line\">  - 8001:8001/tcp</div><div class=\"line\">  - 7946:7946/tcp</div><div class=\"line\">  - 7946:7946/udp</div></pre></td></tr></table></figure>\n<p>二：使用kong<br>（1）：添加api到kong</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">--url http://localhost:8001/apis/ \\</div><div class=\"line\">--data &apos;name=baidu&apos; \\</div><div class=\"line\">--data &apos;upstream_url=http://baidu.com/&apos; \\</div><div class=\"line\">--data &apos;request_host=baidu.com&apos;</div><div class=\"line\">--url：8001端口是Kong的管理端口。</div></pre></td></tr></table></figure>\n<p>upstream_url：提供服务的后端url。</p>\n<p>request_path：使用path参数时，加入该路径的服务接口。</p>\n<p>request_host 使用这个参数时，将加入该host的所有服务接口：</p>\n<p>（2）:查询已经添加的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl localhost:8001/apis/</div></pre></td></tr></table></figure>\n<p>（3）:访问API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8000/ --header 10.100.55.1</div></pre></td></tr></table></figure>\n<p>（4）:删除API<br>根据API_NAME or API_ID来删除指定api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X DELETE localhost:8001/apis/00f90ca9-cf2d-4830-c842-3b90f6cd08af</div><div class=\"line\">$curl -i -X DELETE localhost:8001/apis/test1</div></pre></td></tr></table></figure></p>\n<p>（5）:添加实例<br>实例1  (request_path限制path内的接口)<br>URL:<br><a href=\"http://10.100.55.1/hello1/index.html\">http://10.100.55.1/hello1/index.html</a><br>添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data name=test1 \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.1&apos; \\</div><div class=\"line\">--data &apos;request_path=/hello1/&apos;</div></pre></td></tr></table></figure>\n<p>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello1/</div></pre></td></tr></table></figure></p>\n<p>所谓的request_path，就是固定只能访问hello1下的内容，如果该host的www目录下还有hello2、hello3、那么是不能通过网关去访问这个目录下的内容，例如下面是访问不到的，因为没有加入到Kong中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello2/</div></pre></td></tr></table></figure></p>\n<p>实例2  (request_host可以访问host所有接口)<br>URL:<br><a href=\"http://10.100.55.1\">http://10.100.55.1</a><br>添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data name=test2 \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.1&apos; \\</div><div class=\"line\">--data &apos;request_host=10.100.55.1&apos;</div></pre></td></tr></table></figure></p>\n<p>访问接口:<br>使用request_host后，该host所有api都加入到Kong中，下面的都能够通过网关访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello1  --header host:10.100.55.1</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/hello2 --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>实例3 (request_host  port:8080)<br>URL:<br><a href=\"http://10.100.55.2:8080\">http://10.100.55.2:8080</a><br>添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ \\</div><div class=\"line\">--data  name=test3  \\</div><div class=\"line\">--data &apos;upstream_url=http://10.100.55.2:8080&apos; \\</div><div class=\"line\">--data &apos;request_host=10.100.55.2&apos;</div></pre></td></tr></table></figure></p>\n<p>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.2</div></pre></td></tr></table></figure></p>\n<p>实例4 （复杂url的添加和访问）<br>URL:<br><a href=\"http://10.100.55.3:8000/opj/list?serviceId=box&amp;c=nanjing\">http://10.100.55.3:8000/opj/list?serviceId=box&amp;c=nanjing</a><br>添加:<br>1<br>$ curl -i -X POST –url <a href=\"http://localhost:8001/apis/\">http://localhost:8001/apis/</a> –data ‘name=test4’ –data ‘upstream_url=<a href=\"http://10.100.55.3:8000/\">http://10.100.55.3:8000/</a>‘ –data ‘request_path=/opj/list’<br>访问接口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET --url http://localhost:8000/opj/list?serviceId=box&amp;c=nanjing</div></pre></td></tr></table></figure></p>\n<p>三：创建认证<br>（1）给API配置pulgin认证<br>1：添加api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/ --data &apos;name=test5&apos; --data &apos;upstream_url=http://10.100.55.1/&apos; --data &apos;request_host=10.100.55.1&apos;</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>访问正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connect  Success...</div></pre></td></tr></table></figure></p>\n<p>2：添加plugin认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/apis/test5/plugins/ --data &apos;name=key-auth&apos;</div><div class=\"line\">$curl -i -X GET --url http://localhost:8000/ --header host:10.100.55.1</div></pre></td></tr></table></figure></p>\n<p>访问失败<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 401 Unauthorized</div><div class=\"line\">WWW-Authenticate: Key realm=&quot;kong&quot;</div><div class=\"line\">Server: kong/0.9.3</div><div class=\"line\">&#123;&quot;message&quot;:&quot;No API key found in headers or querystring&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>（2）添加用户<br>1：创建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/consumers/ --data &quot;username=heqin&quot;</div><div class=\"line\">&#123;&quot;username&quot;:&quot;heqin&quot;,&quot;created_at&quot;:1477382339000,&quot;id&quot;:&quot;8e6273c9-f332-4d68-b74c-73ae9f82f150&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>2：给用户创建key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X POST --url http://localhost:8001/consumers/heqin/key-auth/ --data &apos;key=helloworld&apos;</div><div class=\"line\">&#123;&quot;created_at&quot;:1477382483000,&quot;consumer_id&quot;:&quot;8e6273c9-f332-4d68-b74c-73ae9f82f150&quot;,&quot;key&quot;:&quot;helloworld&quot;,&quot;id&quot;:&quot;62c0d640-b1bd-4f3b-aa6e-ba3adaf8ec38&quot;&#125;</div></pre></td></tr></table></figure></p>\n<p>3：带着key去访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl -i -X GET --url http://localhost:8000/  --header host:10.100.55.1 --header apikey:helloworld</div></pre></td></tr></table></figure></p>\n<p>访问成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connect  Success...</div></pre></td></tr></table></figure></p>\n<p>通过上面的两步，就可以实现对API接口的权限控制。</p>\n<p>未完待续。。。。。。。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj63p6zo90000nxx37h5w9ep4","tag_id":"cj63p6zok0002nxx38rssinxp","_id":"cj63p6zot0007nxx3i88pwckz"},{"post_id":"cj63p6zoh0001nxx3bvfneoss","tag_id":"cj63p6zos0006nxx3znqzkkhj","_id":"cj63p6zoy000cnxx3qbi42xsk"},{"post_id":"cj63p6zoo0004nxx3emffhnwe","tag_id":"cj63p6zox000anxx36iw04nde","_id":"cj63p6zp2000gnxx3fx8lyxse"},{"post_id":"cj63p6zp0000fnxx3uiv9ktom","tag_id":"cj63p6zox000anxx36iw04nde","_id":"cj63p6zp5000inxx3js9zn6dx"},{"post_id":"cj63p6zov0009nxx3nh5cudmq","tag_id":"cj63p6zp0000enxx3n9u6cipj","_id":"cj63p6zp5000knxx3iiu1pfeg"},{"post_id":"cj63p6zp3000hnxx3a6gsx5sz","tag_id":"cj63p6zp5000jnxx35f4oczvx","_id":"cj63p6zp6000lnxx3946tpoo5"}],"Tag":[{"name":"server","_id":"cj63p6zok0002nxx38rssinxp"},{"name":"VirtualBox","_id":"cj63p6zos0006nxx3znqzkkhj"},{"name":"前后端分离","_id":"cj63p6zox000anxx36iw04nde"},{"name":"BFF","_id":"cj63p6zp0000enxx3n9u6cipj"},{"name":"kong,api","_id":"cj63p6zp5000jnxx35f4oczvx"}]}}